
package com.fss.aut.base.wrap;

import java.awt.AWTException;

import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
//import java.time.LocalDateTime;
//import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.mail.MessagingException;

import org.apache.commons.io.FileUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.Capabilities;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.Platform;
import org.openqa.selenium.Point;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
//import org.openqa.selenium.chrome.ChromeDriver;
//import org.openqa.selenium.chrome.ChromeOptions;
//import org.openqa.selenium.firefox.FirefoxDriver;
//import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.phantomjs.PhantomJSDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.fss.aut.base.util.CommonLogger;


import atu.testng.reports.ATUReports;
import atu.testng.reports.logging.LogAs;
import atu.testng.reports.utils.Utils;
import atu.testng.selenium.reports.CaptureScreen;
import atu.testng.selenium.reports.CaptureScreen.ScreenshotOf;

public class WrapperMethods {

	// Initialize the Remote Web Driver object
	protected static RemoteWebDriver driver;

	// Load the object properties file
	public Properties loadObjectRepository(String FileName) throws FileNotFoundException, IOException {
		// Step 1: Instantiate Properties (java.util)
		Properties p = new Properties();
		// Step 2: Load the Property file
		p.load(new FileInputStream(new File(FileName)));
		return p;
	}

	public static String BROWSER_NAME = "";
	public static String BROWSER_VERSION = "";

	/*public Properties loadObjectRepository() throws FileNotFoundException, IOException {
		// Step 1: Instantiate Properties (java.util)
		Properties p = new Properties();
		// Step 2: Load the Property file
		p.load(new FileInputStream(new File("object.properties")));
		return p;
	}*/
	
	// Launch Firefox browser
	public void launchFirefox(String url) {
		driver = new FirefoxDriver();
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		driver.get(url);
		
	}
   
	public void launchURL(String URL){
		driver.get(URL);
	}
	
	 
	public RemoteWebDriver launchAppRemotely(String browser, String url) throws IOException {

		// Set the hub url
		URL url1 = new URL("http://10.44.51.70:8108/fsspg33/merchant.htm");
		 
		// Set the desired capabilities
		DesiredCapabilities dC = new DesiredCapabilities();
		dC.setBrowserName(browser);
		dC.setPlatform(Platform.WINDOWS);
		driver = new RemoteWebDriver(url1, dC);
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		driver.get(url);
		return driver;
		
	}
	 public String launchBrowserNew(String value1, String value2, String value3, String PageDesc, String Authorname,
	            String ProjectName) {
	        try {
	            CommonLogger.log("launchBrowser invoked");
	            launchLogin(value1, value2, value3);
	            setBrowserInfo();
	            setATUreportConfig(PageDesc, Authorname, ProjectName);
	            ATUReports.add("Browser opened ", LogAs.INFO, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
	            CommonLogger.log("launchBrowser - Browser Launched");
	        } catch (Exception e) {
	            CommonLogger.log("launchBrowser - Browser Launch Failed in Exception Block");
	            ATUReports.add("Launch Browser failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
	            CommonLogger.errorLog(e);
	        }
	        return value1;
	    }
	
	public void launchBrowser(String browser, String Url) {
		try {
			if (browser.equals("firefox")) {
				URL url1 = new URL("http://10.44.51.70:8108/fsspg33/merchant.htm");
				DesiredCapabilities dC = new DesiredCapabilities();
				dC.setBrowserName("firefox");
				dC.setPlatform(Platform.WINDOWS);
				driver = new RemoteWebDriver(url1, dC);
				driver.manage().window().maximize();
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				driver.get(Url);
			} else if (browser.equals("chrome")) {
				//System.setProperty("webdriver.chrome.driver", "D:\\files\\DRIVER\\chromedriver.exe");
				URL url1 = new URL("http://10.44.75.131:4444/wd/hub");
				DesiredCapabilities dC = new DesiredCapabilities();
				dC.setBrowserName("chrome");
				dC.setPlatform(Platform.WINDOWS);
				driver = new RemoteWebDriver(url1, dC);
				driver.manage().window().maximize();
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				driver.get(Url);
				
			} else if (browser.equals("ie")) {
				//System.setProperty("webdriver.ie.driver", "D:\\files\\DRIVER\\IEDriverServer.exe");
				URL url1 = new URL("http://10.44.75.131:4444/wd/hub");
				DesiredCapabilities dC = new DesiredCapabilities();
				dC.setBrowserName("internet explorer");
				dC.setPlatform(Platform.WINDOWS);
				driver = new RemoteWebDriver(url1, dC);
				driver.manage().window().maximize();
				driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				driver.get(Url);
			}
			
		} catch (MalformedURLException e) {
		}
		
	}
	
	public boolean launchLogin(String browser,String path,String url) throws IOException {
		try {
			
			if (browser.equalsIgnoreCase("firefox")) {
				System.setProperty("webdriver.chrome.driver","./drivers/geckodriver.exe");
				driver = new FirefoxDriver();
			} else if (browser.equalsIgnoreCase("chrome")) {
				//System.setProperty("webdriver.chrome.driver", path+"\\chromedriver.exe");
				System.setProperty("webdriver.chrome.driver","F:\\FSSPGRoadmap\\FSSPGRoadmap\\FSSPGRoadmap\\files\\driver\\chromedriver.exe");
				driver = new ChromeDriver();

			} else if (browser.equalsIgnoreCase("ie")) { 
			//	System.setProperty("webdriver.ie.driver", path+"\\IEDriverServer.exe");
				driver = new InternetExplorerDriver();
			}
			else if (browser.equals("phantomjs")) {
				//System.setProperty("webdriver.ie.driver", "D:\\files\\driver\\phantomjs-1.9.8-windows.phantomjs.exe");
				Capabilities caps = new DesiredCapabilities();
			     ((DesiredCapabilities) caps).setJavascriptEnabled(true);
			     ((DesiredCapabilities) caps).setCapability("takesScreenshot", true);
			     ((DesiredCapabilities) caps).setCapability("locationContextEnabled", true);
			     ((DesiredCapabilities) caps).setCapability("acceptSslCerts", true);
			     
			     File file = new File(path+"\\phantomjs.exe");				
		            System.setProperty("phantomjs.binary.path", file.getAbsolutePath());		
		            driver = new PhantomJSDriver(caps);
		            driver.manage().window().maximize();
					driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
					driver.get(url);
			}

			driver.manage().window().maximize();
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			driver.get(url);
			
			/*ATUReports.setWebDriver(driver);
			ATUReports.indexPageDescription = "Payment Gateway Project";
			ATUReports.setAuthorInfo("Jay", Utils.getCurrentTime(), "1.0");
			ATUReports.setTestCaseReqCoverage("IPay - Payment Gateway Automation");*/
		} catch (Exception e) {
			ATUReports.add("Browser opening failed", browser, LogAs.FAILED, new CaptureScreen(ScreenshotOf.DESKTOP));
		}
		return true;
		
		/*try {
			
			if (browser.equalsIgnoreCase("firefox")) {
				driver = new FirefoxDriver();
			} else if (browser.equalsIgnoreCase("chrome")) {
				ChromeOptions options = new ChromeOptions();
				options.addArguments("user-data-dir=D:\\Profile\\myprofile\\");
				options.addArguments("--disable-extensions");
				options.addArguments("--start-maximized");
				options.addArguments("disable-infobars");
				HashMap<String, Object> images = new HashMap<String, Object>(); 
				images.put("images", 2);
								
				HashMap<String, Object> prefs = new HashMap<String, Object>(); 
				prefs.put("profile.default_content_setting_values", images);
				options.setExperimentalOption("prefs", prefs);
				System.setProperty("webdriver.chrome.driver", path+"\\chromedriver.exe");
				DesiredCapabilities dc = DesiredCapabilities.chrome();
				dc.setCapability(ChromeOptions.CAPABILITY, options);
			
				
				driver = new ChromeDriver(dc);

			} else if (browser.equalsIgnoreCase("ie")) {
				System.setProperty("webdriver.ie.driver", path+"\\IEDriverServer.exe");
				driver = new InternetExplorerDriver();
			}
			else if (browser.equals("phantomjs")) {
				//System.setProperty("webdriver.ie.driver", "D:\\files\\driver\\phantomjs-1.9.8-windows.phantomjs.exe");
				Capabilities caps = new DesiredCapabilities();
			     ((DesiredCapabilities) caps).setJavascriptEnabled(true);
			     ((DesiredCapabilities) caps).setCapability("takesScreenshot", true);
			     ((DesiredCapabilities) caps).setCapability("locationContextEnabled", true);
			     ((DesiredCapabilities) caps).setCapability("acceptSslCerts", true);
			     
			     File file = new File(path+"\\phantomjs.exe");				
		            System.setProperty("phantomjs.binary.path", file.getAbsolutePath());		
		            driver = new PhantomJSDriver(caps);
		            driver.manage().window().maximize();
					driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				//	driver.manage().timeouts();
					driver.get(url);
			}

			driver.manage().window().maximize();
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			driver.get(url);
			
			ATUReports.setWebDriver(driver);
			ATUReports.indexPageDescription = "Payment Gateway Project";
			ATUReports.setAuthorInfo("Varadarajan", Utils.getCurrentTime(), "1.0");
			ATUReports.setTestCaseReqCoverage("IPay - Payment Gateway Automation");
		} catch (Exception e) {
			ATUReports.add("Browser opening failed", browser, LogAs.FAILED, new CaptureScreen(ScreenshotOf.DESKTOP));
		}
		return true;*/


	}
	
	// Launch specific browser
	public void launchBrowserold(String browser, String Url) {
		if (browser.equals("firefox")) {
			driver = new FirefoxDriver();
			driver.manage().window().maximize();
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			driver.get(Url);
		} else if (browser.equals("chrome")) {
			System.setProperty("webdriver.chrome.driver", "F:\\FSSPGRoadmap\\FSSPGRoadmap\\FSSPGRoadmap\\files\\driver\\chromedriver.exe");
			driver = new ChromeDriver();
			driver.manage().window().maximize();
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			driver.get(Url);
		} else if (browser.equals("ie")) {
			System.setProperty("webdriver.ie.driver", "D:\\files\\DRIVER\\IEDriverServer.exe");
			driver = new InternetExplorerDriver();
			driver.manage().window().maximize();
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
			driver.get(Url);
		}
	}

	// ATU report initialization
		public static void setATUreportConfig(String pageDes, String Author, String TestCaseReqCoverage) {
		
			ATUReports.setWebDriver(driver);
			
			ATUReports.indexPageDescription = pageDes;
			ATUReports.setAuthorInfo(Author, Utils.getCurrentTime(), "1.0");
			ATUReports.setTestCaseReqCoverage(TestCaseReqCoverage);
		}

	// wait for the element to visible using id
	public boolean waitTillVisibleByID(String ID) {
		WebDriverWait wait = new WebDriverWait(driver, 300);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(ID)));
		return true;
	}

	// wait for the element to visible using Xpath
	public boolean waitTillVisibleByXpath(String Xpath) {
		WebDriverWait wait = new WebDriverWait(driver, 300);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		return true;
	}

	// wait for the element to visible using LinkText
	public boolean waitTillVisibleByLinkText(String LinkText) {
		WebDriverWait wait = new WebDriverWait(driver, 300);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(LinkText)));
		return true;
	}

	// To store the Excel data in array - 050900
	public static String[] getColumnDataInSheet(String FileName, String sheet_name) throws IOException {
		String[] data = null;
		// Select the particular excel file
		FileInputStream fis = new FileInputStream(new File(FileName));
		// Select the particular workbook
		HSSFWorkbook workbook = new HSSFWorkbook(fis);
		// Select the sheet in that workbook
		int sheet_no = workbook.getSheetIndex(sheet_name);
		HSSFSheet sheet = workbook.getSheetAt(sheet_no);
		// get the number of rows
		int rowCount = sheet.getLastRowNum();
		// get the number of columns
		int columnCount = sheet.getRow(0).getLastCellNum();
		// Create a array with no of rows & columns
		data = new String[rowCount];
		// loop through the rows
		for (int i = 1; i <= rowCount; i++) {
			try {
				HSSFRow row = sheet.getRow(i); // Select the particular row
				try {
					String cellValue = "";
					try {
						cellValue = row.getCell(0).getStringCellValue();
					} catch (NullPointerException e) {
					}
					// Data stored in the array
					data[i - 1] = cellValue;
				} catch (Exception e) {

				}
			} catch (Exception e) {
			}
		}
		// Close the excel sheet
		fis.close();
		return data;
	}

	public boolean writeDataInExcel(String FileName, String sheet_name, String Data) throws IOException {
		FileInputStream fis = new FileInputStream(new File(FileName));
		HSSFWorkbook workBook = new HSSFWorkbook(fis);

		// Create sheet
		HSSFSheet sheet = workBook.getSheet(sheet_name);

		int lastRowNumber = sheet.getLastRowNum();
		int columnCount = 0;
		HSSFRow row = null;
		// Create Row
		if (lastRowNumber <= 0) {
			row = sheet.createRow(lastRowNumber + 1);
		} else {
			row = sheet.getRow(lastRowNumber);
			columnCount = sheet.getRow(lastRowNumber).getLastCellNum();
		}
		// Create cell
		HSSFCell cell = row.createCell(columnCount);
		cell.setCellValue(Data);

		FileOutputStream fos = new FileOutputStream(new File(FileName));

		workBook.write(fos);

		fos.close();

		workBook.close();
		return true;
	}

	// Text Link Click

	// Click the Link with Text given - 010504
	public boolean clickByLinkText(String Linktext) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(Linktext)));
		driver.findElement(By.linkText(Linktext)).click();
		return true;
	}

	// Simple List Selection

	// List Selection with Visible Text using ID - 040701
	public boolean selectVisibleTextById(String Id, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		Select i = new Select(driver.findElement(By.id(Id)));
		i.selectByVisibleText(Text);
		return true;
	}

	// List Selection with Visible Text using Name - 040702
	public boolean selectVisibleTextByName(String Name, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		Select n = new Select(driver.findElement(By.name(Name)));
		n.selectByVisibleText(Text);
		return true;
	}

	// List Selection with Visible Text using Class Name - 040703
	public boolean selectVisibleTextByClassName(String Classname, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(Classname)));
		Select c = new Select(driver.findElement(By.className(Classname)));
		c.selectByVisibleText(Text);
		return true;
	}

	// List Selection with Visible Text using Xpath - 040708
	public boolean selectVisibleTextByXpath(String Xpath, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		Select x = new Select(driver.findElement(By.xpath(Xpath)));
		x.selectByVisibleText(Text);
		return true;
	}

	// List Selection with Value using ID - 040801
	public boolean selectValueById(String Id, String Value) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		Select i = new Select(driver.findElement(By.id(Id)));
		i.selectByValue(Value);
		return true;
	}

	// List Selection with Value using Name - 040802
	public boolean selectValueByName(String Name, String Value) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		Select n = new Select(driver.findElement(By.name(Name)));
		n.selectByValue(Value);
		return true;
	}

	// List Selection with Value using Class Name - 040803
	public boolean selectValueByClassName(String Classname, String Value) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(Classname)));
		Select c = new Select(driver.findElement(By.className(Classname)));
		c.selectByValue(Value);
		return true;
	}

	// List Selection with Value using Xpath - 040808
	public boolean selectValueByXpath(String Xpath, String Value) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		Select x = new Select(driver.findElement(By.xpath(Xpath)));
		x.selectByValue(Value);
		return true;
	}

	// List Selection with Index using ID - 040601
	public boolean selectIndexById(String Id, int Index) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		Select i = new Select(driver.findElement(By.id(Id)));
		i.selectByIndex(Index);
		return true;
	}

	// List Selection with Index using Name - 040602
	public boolean selectIndexByName(String Name, int Index) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		Select n = new Select(driver.findElement(By.name(Name)));
		n.selectByIndex(Index);
		return true;
	}

	// List Selection with Index using Class Name - 040603
	public boolean selectIndexByClassName(String ClassName, int Index) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		Select c = new Select(driver.findElement(By.className(ClassName)));
		c.selectByIndex(Index);
		return true;
	}

	// List Selection with Index using Xpath - 040608
	public boolean selectIndexByXpath(String Xpath, int Index) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		Select x = new Select(driver.findElement(By.xpath(Xpath)));
		x.selectByIndex(Index);
		return true;
	}

	// List De-Selection with Visible Text using ID - 040701
	public boolean deSelectVisibleTextById(String Id, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		Select i = new Select(driver.findElement(By.id(Id)));
		i.deselectByVisibleText(Text);
		return true;
	}

	// List De-Selection with Visible Text using Name - 040702
	public boolean deSelectVisibleTextByName(String Name, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		Select n = new Select(driver.findElement(By.name(Name)));
		n.deselectByVisibleText(Text);
		return true;
	}

	// List De-Selection with Visible Text using Class Name - 040703
	public boolean deSelectVisibleTextByClassName(String Classname, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(Classname)));
		Select c = new Select(driver.findElement(By.className(Classname)));
		c.deselectByVisibleText(Text);
		return true;
	}

	// List De-Selection with Visible Text using Xpath - 040708
	public boolean deSelectVisibleTextByXpath(String Xpath, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		Select x = new Select(driver.findElement(By.xpath(Xpath)));
		x.deselectByVisibleText(Text);
		return true;
	}

	// List De-Selection with Value using ID - 040801
	public boolean deSelectValueById(String Id, String Value) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		Select i = new Select(driver.findElement(By.id(Id)));
		i.deselectByValue(Value);
		return true;
	}

	// List De-Selection with Value using Name - 040802
	public boolean deSelectValueByName(String Name, String Value) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		Select n = new Select(driver.findElement(By.name(Name)));
		n.deselectByValue(Value);
		return true;
	}

	// List De-Selection with Value using Class Name - 040803
	public boolean deSelectValueByClassName(String Classname, String Value) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(Classname)));
		Select c = new Select(driver.findElement(By.className(Classname)));
		c.deselectByValue(Value);
		return true;
	}

	// List De-Selection with Value using Xpath - 040808
	public boolean deSelectValueByXpath(String Xpath, String Value) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		Select x = new Select(driver.findElement(By.xpath(Xpath)));
		x.deselectByValue(Value);
		return true;
	}

	// List De-Selection with Index using ID - 040601
	public boolean deSelectIndexById(String Id, int Index) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		Select i = new Select(driver.findElement(By.id(Id)));
		i.deselectByIndex(Index);
		return true;
	}

	// List De-Selection with Index using Name - 040602
	public boolean deSelectIndexByName(String Name, int Index) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		Select n = new Select(driver.findElement(By.name(Name)));
		n.deselectByIndex(Index);
		return true;
	}

	// List De-Selection with Index using Class Name - 040603
	public boolean deSelectIndexByClassName(String ClassName, int Index) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		Select c = new Select(driver.findElement(By.className(ClassName)));
		c.deselectByIndex(Index);
		return true;
	}

	// List De-Selection with Index using Xpath - 040608
	public boolean deSelectIndexByXpath(String Xpath, int Index) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		Select x = new Select(driver.findElement(By.xpath(Xpath)));
		x.selectByIndex(Index);
		return true;
	}

	public boolean deSelectAllById(String Id) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		Select i = new Select(driver.findElement(By.id(Id)));
		i.deselectAll();
		return true;
	}

	public boolean deSelectAllByName(String Name, int Index) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		Select n = new Select(driver.findElement(By.name(Name)));
		n.deselectAll();
		return true;
	}

	public boolean deSelectAllByClassName(String ClassName, int Index) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		Select c = new Select(driver.findElement(By.className(ClassName)));
		c.deselectAll();
		return true;
	}

	public boolean deSelectAllByXpath(String Xpath, int Index) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		Select x = new Select(driver.findElement(By.xpath(Xpath)));
		x.selectByIndex(Index);
		return true;
	}

	public String getSelectedOptionByID(String Id) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		String Text = null;
		Select i = new Select(driver.findElement(By.id(Id)));
		Text = i.getFirstSelectedOption().getText();
		return Text;
	}

	public String getSelectedOptionByName(String Name) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		String Text = null;
		Select n = new Select(driver.findElement(By.name(Name)));
		Text = n.getFirstSelectedOption().getText();
		return Text;
	}

	public String getSelectedOptionByClassName(String ClassName) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		String Text = null;
		Select c = new Select(driver.findElement(By.className(ClassName)));
		Text = c.getFirstSelectedOption().getText();
		return Text;
	}

	public String getSelectedOptionByXpath(String Xpath) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		String Text = null;
		Select x = new Select(driver.findElement(By.xpath(Xpath)));
		Text = x.getFirstSelectedOption().getText();
		return Text;
	}

	public boolean verifySelectedOptionByID(String Id, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		String Text1 = null;
		Select i = new Select(driver.findElement(By.id(Id)));
		Text1 = i.getFirstSelectedOption().getText();
		if (Text1.equals(Text))
			return true;
		else
			return false;
	}

	public boolean verifySelectedOptionByName(String Name, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		String Text1 = null;
		Select n = new Select(driver.findElement(By.name(Name)));
		Text1 = n.getFirstSelectedOption().getText();
		if (Text1.equals(Text))
			return true;
		else
			return false;
	}

	public boolean verifySelectedOptionByClassName(String ClassName, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		String Text1 = null;
		Select c = new Select(driver.findElement(By.className(ClassName)));
		Text1 = c.getFirstSelectedOption().getText();
		if (Text1.equals(Text))
			return true;
		else
			return false;
	}

	public boolean verifySelectedOptionByXpath(String Xpath, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		String Text1 = null;
		Select x = new Select(driver.findElement(By.xpath(Xpath)));
		Text1 = x.getFirstSelectedOption().getText();
		if (Text1.equals(Text))
			return true;
		else
			return false;
	}

	public int getListBoxOptionsCountByID(String Id) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		int size = 0;
		Select i = new Select(driver.findElement(By.id(Id)));
		size = i.getOptions().size();
		return size;
	}

	public int getListBoxOptionsCountByName(String Name) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		int size = 0;
		Select n = new Select(driver.findElement(By.name(Name)));
		size = n.getOptions().size();
		return size;
	}

	public int getListBoxOptionsCountByClassName(String ClassName) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		int size = 0;
		Select c = new Select(driver.findElement(By.className(ClassName)));
		size = c.getOptions().size();
		return size;
	}

	public int getListBoxOptionsCountByXpath(String Xpath) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		int size = 0;
		Select x = new Select(driver.findElement(By.xpath(Xpath)));
		size = x.getOptions().size();
		return size;
	}

	public boolean verifyListBoxOptionsCountByID(String Id, int Size) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		int size = 0;
		Select i = new Select(driver.findElement(By.id(Id)));
		size = i.getOptions().size();
		if (size == Size)
			return true;
		else
			return false;
	}

	public boolean verifyListBoxOptionsCountByName(String Name, int Size) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		int size = 0;
		Select n = new Select(driver.findElement(By.name(Name)));
		size = n.getOptions().size();
		if (size == Size)
			return true;
		else
			return false;
	}

	public boolean verifyListBoxOptionsCountByClassName(String ClassName, int Size) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		int size = 0;
		Select c = new Select(driver.findElement(By.className(ClassName)));
		size = c.getOptions().size();
		if (size == Size)
			return true;
		else
			return false;
	}

	public boolean verifyListBoxOptionsCountByXpath(String Xpath, int Size) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		int size = 0;
		Select x = new Select(driver.findElement(By.xpath(Xpath)));
		size = x.getOptions().size();
		if (size == Size)
			return true;
		else
			return false;
	}
// Simple Text Entry

	// Enter Text using ID - 030101
	public boolean enterTextById(String Id, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		driver.findElement(By.id(Id)).click();
		driver.findElement(By.id(Id)).clear();
		driver.findElement(By.id(Id)).sendKeys(Text);
		return true;
	}
	
	public boolean enterTextWithJSExecutorById(String Id, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		WebElement data = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(Id)));
		((JavascriptExecutor)driver).executeScript("arguments[0].value = '"+Text+"'", data);
		return true;
	}

	
	public boolean enterTabById(String Id) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		driver.findElement(By.id(Id)).click();
		driver.findElement(By.id(Id)).clear();
		driver.findElement(By.id(Id)).sendKeys(Keys.TAB);
		return true;
	}

	public boolean enterTextByIdTab(String Id, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		driver.findElement(By.id(Id)).click();
		driver.findElement(By.id(Id)).clear();
		driver.findElement(By.id(Id)).sendKeys(Text);
		driver.findElement(By.id(Id)).sendKeys(Keys.TAB);
		return true;
	}

	//only Clear
	public boolean clearTextById(String Id) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		driver.findElement(By.id(Id)).clear();
		return true;
	}
	
	public boolean clearTextByName(String Name) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		driver.findElement(By.name(Name)).clear();
		return true;
	}
	public boolean clearTextByXpath(String Xpath) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		driver.findElement(By.xpath(Xpath)).clear();
		return true;
	}
	// Enter Text using Name -030102
	public boolean enterTextByName(String Name, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		driver.findElement(By.name(Name)).clear();
		driver.findElement(By.name(Name)).sendKeys(Text);
		return true;
	}

	// Enter Text using Class name - 030103
	public boolean enterTextByClassName(String ClassName, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		driver.findElement(By.className(ClassName)).clear();
		driver.findElement(By.className(ClassName)).sendKeys(Text);
		return true;
	}

	// Enter Text using Xpath - 030108
	public boolean enterTextByXpath(String Xpath, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		driver.findElement(By.xpath(Xpath)).clear();
		driver.findElement(By.xpath(Xpath)).sendKeys(Text);
		return true;
	}

	public boolean pressEnterById(String Id) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		driver.findElement(By.id(Id)).sendKeys(Keys.ENTER);
		return true;
	}

	
	public boolean pressEnterByName(String Name) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		driver.findElement(By.name(Name)).sendKeys(Keys.ENTER);
		return true;
	}

	
	public boolean pressEnterByClassName(String ClassName) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		driver.findElement(By.className(ClassName)).sendKeys(Keys.ENTER);
		return true;
	}

	
	public boolean pressEnterByXpath(String Xpath) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		driver.findElement(By.xpath(Xpath)).sendKeys(Keys.ENTER);
		return true;
	}
	
	public String getAttrTextById(String Id, String AttName) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		String Text = driver.findElement(By.id(Id)).getAttribute(AttName);
		return Text;
	}

	public String getAttrTextByName(String Name, String AttName) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		String Text = driver.findElement(By.name(Name)).getAttribute(AttName).trim();
		return Text;
	}

	public String getAttrTextByClassName(String ClassName, String AttName) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		String Text = driver.findElement(By.className(ClassName)).getAttribute(AttName);
		return Text;
	}

	public String getAttrTextByXpath(String Xpath, String AttName) {
	
		WebDriverWait wait = new WebDriverWait(driver, 30);
		 wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		String Text = driver.findElement(By.xpath(Xpath)).getAttribute(AttName);
		//System.out.println("Text4"+ Text);
		return Text;
	}
	
/*	public String getAttrTextByXpath2(String Xpath, String AttName) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		String Text = driver.findElement(By.xpath(Xpath)).getAttribute(AttName);
		//System.out.println("Text4"+ Text);
		
		if (Text.equals(null))
		{
			return Text;
		}
		else{
		}
		return Text;
		
	}*/
	
	
	
	public String getAttrTextByXpath1(String Xpath, String AttName) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		String Text = driver.findElement(By.xpath(Xpath)).getAttribute(AttName);
		//System.out.println("Text4"+ Text);
		return "";
	}

	public boolean verifyAttrTextById(String Id, String AttName, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		String text = driver.findElement(By.id(Id)).getAttribute(AttName);
		if (text.equals(Text))
			return true;
		else
			return false;
	}

	public boolean verifyAttrTextByName(String Name, String AttName, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		String text = driver.findElement(By.name(Name)).getAttribute(AttName);
		if (text.equals(Text))
			return true;
		else
			return false;
	}

	public boolean verifyAttrTextByClassName(String ClassName, String AttName, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		String text = driver.findElement(By.className(ClassName)).getAttribute(AttName);
		if (text.equals(Text))
			return true;
		else
			return false;
	}

	public boolean verifyAttrTextByXpath(String Xpath, String AttName, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		String text = driver.findElement(By.xpath(Xpath)).getAttribute(AttName);
		if (text.equals(Text))
			return true;
		else
			return false;
	}

	public boolean containsAttrTextById(String Id, String AttName, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		String text = driver.findElement(By.id(Id)).getAttribute(AttName);
		if (text.contains(Text))
			return true;
		else
			return false;
	}

	public boolean containsAttrTextByName(String Name, String AttName, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		String text = driver.findElement(By.name(Name)).getAttribute(AttName);
		if (text.contains(Text))
			return true;
		else
			return false;
	}

	public boolean containsAttrTextByClassName(String ClassName, String AttName, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		String text = driver.findElement(By.className(ClassName)).getAttribute(AttName);
		if (text.contains(Text))
			return true;
		else
			return false;
	}

	public boolean containsAttrTextByXpath(String Xpath, String AttName, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		String text = driver.findElement(By.xpath(Xpath)).getAttribute(AttName);
		if (text.contains(Text))
			return true;
		else
			return false;
	}
	
	public int getAttrTextLengthById(String Id, String AttName) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		String Text = driver.findElement(By.id(Id)).getAttribute(AttName);
		int length = Text.length();
		return length;
	}

	public int getAttrTextLengthByName(String Name, String AttName) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		String Text = driver.findElement(By.name(Name)).getAttribute(AttName);
		int length = Text.length();
		return length;
	}

	public int getAttrTextLengthByClassName(String ClassName, String AttName) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		String Text = driver.findElement(By.className(ClassName)).getAttribute(AttName);
		int length = Text.length();
		return length;
	}

	public int getAttrTextLengthByXpath(String Xpath, String AttName) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		String Text = driver.findElement(By.xpath(Xpath)).getAttribute(AttName);
		int length = Text.length();
		return length;
	}

	public boolean verifyAttrTextLengthById(String Id, String AttName, int Length) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		String Text = driver.findElement(By.id(Id)).getAttribute(AttName);
		int length = Text.length();
		if (length == Length)
			return true;
		else
			return false;
	}

	public boolean verifyAttrTextLengthByName(String Name, String AttName, int Length) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		String Text = driver.findElement(By.name(Name)).getAttribute(AttName);
		int length = Text.length();
		if (length == Length)
			return true;
		else
			return false;
	}

	public boolean verifyAttrTextLengthByClassName(String ClassName, String AttName, int Length) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		String Text = driver.findElement(By.className(ClassName)).getAttribute(AttName);
		int length = Text.length();
		if (length == Length)
			return true;
		else
			return false;
	}

	public boolean verifyAttrTextLengthByXpath(String Xpath, String AttName, int Length) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		String Text = driver.findElement(By.xpath(Xpath)).getAttribute(AttName);
		int length = Text.length();
		if (length == Length)
			return true;
		else
			return false;
	}

	// Click Button / Click Check Box

	// Click using ID - 010401/010201
	public boolean clickById(String Id) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		driver.findElement(By.id(Id)).click();
		return true;
	}
	public boolean clickByIdNewtab(String Id) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		WebElement e=driver.findElement(By.id(Id));
		e.sendKeys(Keys.CONTROL,"t");
		return true;
	}
	
	public boolean clickJSExecuteById(String Id) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		WebElement element = driver.findElement(By.id(Id));
		JavascriptExecutor executor = (JavascriptExecutor)driver;
		executor.executeScript("arguments[0].click();", element);
		return true;
	}

	public boolean clickJSExecuteByXpath(String Xpath) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		WebElement element = driver.findElement(By.xpath(Xpath));
		JavascriptExecutor executor = (JavascriptExecutor)driver;
		executor.executeScript("arguments[0].click();", element);
		return true;
	}

	
	
	// Click using Name - 010402/010202
	public boolean clickByName(String Name) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		driver.findElement(By.name(Name)).click();
		return true;
	}

	// Click using Class name - 010403/010203
	public boolean clickByClassName(String ClassName) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		driver.findElement(By.className(ClassName)).click();
		return true;
	}

	// Click using Xpath - 010408/010208
	public boolean clickByXpath(String Xpath) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		driver.findElement(By.xpath(Xpath)).click();
		return true;
	}

	// List count verification

	// Verify List count & excel count is matched using ID - 090301
	public boolean listCountVerificationById(String Id, String Excel_file, String sheet_name) throws IOException {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		boolean a = false;
		Select s = new Select(driver.findElement(By.id(Id)));
		List<WebElement> list = s.getOptions();
		int count = list.size();
		String[] arrayObject = getColumnDataInSheet(Excel_file, sheet_name);
		if (count == arrayObject.length) {
			a = true;
		}
		return a;
	}

	// Verify List count & excel count is matched using Name - 090302
	public boolean listCountVerificationByName(String Name, String Excel_file, String sheet_name) throws IOException {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		boolean a = false;
		Select s = new Select(driver.findElement(By.name(Name)));
		List<WebElement> list = s.getOptions();
		int count = list.size();
		String[] arrayObject = getColumnDataInSheet(Excel_file, sheet_name);
		if (count == arrayObject.length) {
			a = true;
		}
		return a;
	}

	// Verify List count & excel count is matched using ClassName - 090303
	public boolean listCountVerificationByClassName(String ClassName, String Excel_file, String sheet_name)
			throws IOException {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		boolean a = false;
		Select s = new Select(driver.findElement(By.className(ClassName)));
		List<WebElement> list = s.getOptions();
		int count = list.size();
		String[] arrayObject = getColumnDataInSheet(Excel_file, sheet_name);
		if (count == arrayObject.length) {
			a = true;
		}
		return a;
	}

	// Verify List count & excel count is matched using Xpath - 090308
	public boolean listCountVerificationByXpath(String Xpath, String Excel_file, String sheet_name) throws IOException {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		boolean a = false;
		Select s = new Select(driver.findElement(By.xpath(Xpath)));
		List<WebElement> list = s.getOptions();
		int count = list.size();
		String[] arrayObject = getColumnDataInSheet(Excel_file, sheet_name);
		if (count == arrayObject.length) {
			a = true;
		}
		return a;
	}

	// Matched value entry verification

	// Value present verification using ID - 080801
	public boolean valuePresentById(String Id, String value) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		boolean a = false;
		Select s = new Select(driver.findElement(By.id(Id)));
		List<WebElement> list = s.getOptions();
		int count = list.size();
		for (int i = 0; i < count; i++) {
			String option = driver.findElement(By.xpath("//*[@id='" + Id + "']/option[" + (i + 1) + "]")).getText();
			if (option.equals(value)) {
				a = true;
			}
		}
		return a;
	}

	// Value present verification using Name - 080802
	public boolean valuePresentByName(String Name, String value) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		boolean a = false;
		Select s = new Select(driver.findElement(By.name(Name)));
		List<WebElement> list = s.getOptions();
		int count = list.size();
		for (int i = 0; i < count; i++) {
			String option = driver.findElement(By.xpath("//*[@name='" + Name + "']/option[" + (i + 1) + "]")).getText();
			if (option.equals(value)) {
				a = true;
			}
		}
		return a;
	}

	// Value present verification using Class Name - 080803
	public boolean valuePresentByClassName(String ClassName, String value) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		boolean a = true;
		Select s = new Select(driver.findElement(By.className(ClassName)));
		List<WebElement> list = s.getOptions();
		int count = list.size();
		for (int i = 0; i < count; i++) {
			String option = driver.findElement(By.xpath("//*[@class='" + ClassName + "']/option[" + (i + 1) + "]"))
					.getText();
			if (option.equals(value)) {
				a = true;
			}
		}
		return a;
	}

	// Value present verification using Xpath - 080808
	public boolean valuePresentByXpath(String Xpath, String value) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		boolean a = true;
		Select s = new Select(driver.findElement(By.xpath(Xpath)));
		List<WebElement> list = s.getOptions();
		int count = list.size();
		for (int i = 0; i < count; i++) {
			String option = driver.findElement(By.xpath(Xpath + "/option[" + (i + 1) + "]")).getText();
			if (option.equals(value)) {
				a = true;
			}
		}
		return a;
	}

	// To count the list values

	// To count the list options using ID - 070301
	public int countListById(String Id) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		int count = 0;
		Select s = new Select(driver.findElement(By.id(Id)));
		List<WebElement> list = s.getOptions();
		count = list.size();
		return count;
	}

	// To count the list options using Name - 070302
	public int countListByName(String Name) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		int count = 0;
		Select s = new Select(driver.findElement(By.name(Name)));
		List<WebElement> list = s.getOptions();
		count = list.size();
		return count;
	}

	// To count the list options using ClassName - 070303
	public int countListByClassName(String ClassName) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		int count = 0;
		Select s = new Select(driver.findElement(By.className(ClassName)));
		List<WebElement> list = s.getOptions();
		count = list.size();
		return count;
	}

	// To count the list options using Xpath - 070308
	public int countListByXpath(String Xpath) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		int count = 0;
		Select s = new Select(driver.findElement(By.xpath(Xpath)));
		List<WebElement> list = s.getOptions();
		count = list.size();
		return count;
	}

	// To count the rows in Excel Data - 070900
	public int excelCount(String Excel_file, String sheet_name) throws IOException {
		String[] arrayObject = getColumnDataInSheet(Excel_file, sheet_name);
		return arrayObject.length;
	}

	// List value verification

	// List value verification using ID - 080301
	public boolean verifyListById(String List_id, String Excel_file, String sheet_name) throws IOException {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(List_id)));
		boolean a = false;
		int verify = 0;
		int count = countListById(List_id);
		String[] arrayObject = getColumnDataInSheet(Excel_file, sheet_name);
		int dataLength = arrayObject.length;
		for (int i = 0; i < dataLength; i++) {
			String excel = arrayObject[i];
			for (int j = 0; j < count; j++) {
				String option = driver.findElement(By.xpath("//*[@id='" + List_id + "']/option[" + (j + 1) + "]"))
						.getText();
				if (option.equals(excel)) {
					verify = verify + 1;
				} else {
				}
			}
		}
		if (verify == dataLength) {
			a = true;
		}
		return a;
	}

	// List value verification using Name - 080302
	public boolean verifyListByName(String List_name, String Excel_file, String sheet_name) throws IOException {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(List_name)));
		boolean a = false;
		int verify = 0;
		int count = countListByName(List_name);
		String[] arrayObject = getColumnDataInSheet(Excel_file, sheet_name);
		int dataLength = arrayObject.length;
		for (int i = 0; i < dataLength; i++) {
			String excel = arrayObject[i];
			for (int j = 0; j < count; j++) {
				String option = driver.findElement(By.xpath("//*[@name='" + List_name + "']/option[" + (j + 1) + "]"))
						.getText();
				if (option.equals(excel)) {
					verify = verify + 1;
				} else {
				}
			}
		}
		if (verify == dataLength) {
			a = true;
		}
		return a;
	}

	// List value verification using Class Name - 080303
	public boolean verifyListByClassName(String List_ClassName, String Excel_file, String sheet_name)
			throws IOException {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(List_ClassName)));
		boolean a = false;
		int verify = 0;
		int count = countListByClassName(List_ClassName);
		String[] arrayObject = getColumnDataInSheet(Excel_file, sheet_name);
		int dataLength = arrayObject.length;
		for (int i = 0; i < dataLength; i++) {
			String excel = arrayObject[i];
			for (int j = 0; j < count; j++) {
				String option = driver.findElement(
						By.xpath("//*[@class='" + List_ClassName + "']/option[" + (j + 1) + "]")).getText();
				if (option.equals(excel)) {
					verify = verify + 1;
				} else {
				}
			}
		}
		if (verify == dataLength) {
			a = true;
		}
		return a;
	}

	// List value verification using Xpath - 080308
	public boolean verifyListByXpath(String List_Xpath, String Excel_file, String sheet_name) throws IOException {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(List_Xpath)));
		boolean a = false;
		int verify = 0;
		int count = countListByXpath(List_Xpath);
		String[] arrayObject = getColumnDataInSheet(Excel_file, sheet_name);
		int dataLength = arrayObject.length;
		for (int i = 0; i < dataLength; i++) {
			String excel = arrayObject[i];
			for (int j = 0; j < count; j++) {
				String option = driver.findElement(By.xpath(List_Xpath + "/option[" + (j + 1) + "]")).getText();
				if (option.equals(excel)) {
					verify = verify + 1;
				} else {
				}
			}
		}
		if (verify == dataLength) {
			a = true;
		}
		return a;
	}

	// Start and End character Verification from Textbox

	// Prefix & Suffix verification using ID - 081001
	public boolean prefixSuffixVerifyById(String Id, String attr_value, String prefix, String suffix) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		boolean a = false;
		String value = driver.findElement(By.id(Id)).getAttribute(attr_value);
		if ((value.startsWith(prefix)) && (value.endsWith(suffix))) {
			a = true;
		}
		return a;
	}

	// Prefix & Suffix verification using Name - 081002
	public boolean prefixSuffixVerifyByName(String Name, String attr_value, String prefix, String suffix) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		boolean a = false;
		String value = driver.findElement(By.name(Name)).getAttribute(attr_value);
		if ((value.startsWith(prefix)) && (value.endsWith(suffix))) {
			a = true;
		}
		return a;
	}

	// Prefix & Suffix verification using Class Name - 081003
	public boolean prefixSuffixVerifyByClassName(String ClassName, String attr_value, String prefix, String suffix) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		boolean a = false;
		String value = driver.findElement(By.className(ClassName)).getAttribute(attr_value);
		if ((value.startsWith(prefix)) && (value.endsWith(suffix))) {
			a = true;
		}
		return a;
	}

	// Prefix & Suffix verification using Xpath - 081008
	public boolean prefixSuffixVerifyByXpath(String Xpath, String attr_value, String prefix, String suffix) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		boolean a = false;
		String value = driver.findElement(By.xpath(Xpath)).getAttribute(attr_value);
		if ((value.startsWith(prefix)) && (value.endsWith(suffix))) {
			a = true;
		}
		return a;
	}

	// Screen Text verification

	// Screen Text verification using ID - 080501
	public boolean verifyTextById(String Id, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		boolean a = false;
		String B = driver.findElement(By.id(Id)).getText();
		if (B.equals(Text)) {
			a = true;
		}
		return a;
	}

	// Screen Text verification using Name - 080502
	public boolean verifyTextByName(String Name, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		boolean a = false;
		String B = driver.findElement(By.name(Name)).getText();
		if (B.equals(Text)) {
			a = true;
		}
		return a;
	}

	// Screen Text verification using Class Name - 080503
	public boolean verifyTextByClassName(String ClassName, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		boolean a = false;
		String B = driver.findElement(By.className(ClassName)).getText();
		if (B.equals(Text)) {
			a = true;
		}
		return a;
	}

	// Screen Text verification using Xpath - 080508
	public boolean verifyTextByXpath(String Xpath, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		boolean a = false;
		String B = driver.findElement(By.xpath(Xpath)).getText();
		if (B.equals(Text)) {
			a = true;
		}
		return a;
	}
	
	public boolean containsTextById(String Id, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		boolean a = false;
		String B = driver.findElement(By.id(Id)).getText();
		if (B.contains(Text)) {
			a = true;
		}
		return a;
	}

	// Screen Text verification using Name - 080502
	public boolean containsTextByName(String Name, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		boolean a = false;
		String B = driver.findElement(By.name(Name)).getText();
		if (B.contains(Text)) {
			a = true;
		}
		return a;
	}

	// Screen Text verification using Class Name - 080503
	public boolean containsTextByClassName(String ClassName, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		boolean a = false;
		String B = driver.findElement(By.className(ClassName)).getText();
		if (B.contains(Text)) {
			a = true;
		}
		return a;
	}

	// Screen Text verification using Xpath - 080508
	public boolean containsTextByXpath(String Xpath, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		boolean a = false;
		String B = driver.findElement(By.xpath(Xpath)).getText();
		if (B.contains(Text)) {
			a = true;
		}
		return a;
	}
	
	// Button Enabled/Disabled Verification

	// Button Enabled/Disabled Verification using ID - 100401
	public boolean IsEnabledById(String Id) {
		boolean id = false;
		try {
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
			id = driver.findElement(By.id(Id)).isEnabled();
		} catch (Exception e) {
		}
		return id;
	}

	// Button Enabled/Disabled Verification using Name - 100402
	public boolean IsEnabledByName(String Name) {
		boolean name = false;
		try {
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
			name = driver.findElement(By.name(Name)).isEnabled();
		} catch (Exception e) {
			
		}
		return name;
	}

	// Button Enabled/Disabled Verification using Class Name - 100403
	public boolean IsEnabledByClassName(String ClassName) {
		boolean classname = false;
		try {
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
			classname = driver.findElement(By.className(ClassName)).isEnabled();
		} catch (Exception e) {
		}
		return classname;
	}

	// Button Enabled/Disabled Verification using Xpath - 100408
	public boolean IsEnabledByXpath(String Xpath) {
		boolean xpath = false;
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
			xpath = driver.findElement(By.xpath(Xpath)).isEnabled();
		} catch (Exception e) {
		}
		return xpath;
	}
	
	
	public boolean IsEnabledByLinkText(String LinkText) {
		boolean xpath = false;
		try {
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(LinkText)));
			xpath = driver.findElement(By.linkText(LinkText)).isEnabled();
		} catch (Exception e) {
		}
		return xpath;
	}

	// Link text verification - 080504
	public boolean linkTextVerification(String Linktext, String text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(Linktext)));
		boolean a = false;
		String linkTxt = driver.findElement(By.linkText(Linktext)).getText();
		if (linkTxt.equals(text)) {
			a = true;
		}
		return a;
	}

	// CheckBox Verification

	// CheckBox Enabled/Disabled Verification using ID - 080201
	public boolean IsSelectedById(String Id) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		boolean id = false;
		id = driver.findElement(By.id(Id)).isSelected();
		return id;
	}

	// CheckBox Enabled/Disabled Verification using Name - 080202
	public boolean IsSelectedByName(String Name) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		boolean name = false;
		name = driver.findElement(By.name(Name)).isSelected();
		return name;
	}

	// CheckBox Enabled/Disabled Verification using Class Name - 080203
	public boolean IsSelectedByClassName(String ClassName) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		boolean classname = false;
		classname = driver.findElement(By.className(ClassName)).isSelected();
		return classname;
	}

	// CheckBox Enabled/Disabled Verification using Xpath - 080208
	public boolean IsSelectedByXpath(String Xpath) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		boolean xpath = false;
		xpath = driver.findElement(By.xpath(Xpath)).isSelected();
		return xpath;
	}

	public boolean IsDisplayedById(String Id) {
		boolean id = false;
		try {
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
			id = driver.findElement(By.id(Id)).isDisplayed();
		} catch (Exception e) {
		}
		return id;
	}

	public boolean IsDisplayedByName(String Name) {
		boolean name = false;
		try {
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
			name = driver.findElement(By.name(Name)).isDisplayed();
		} catch (Exception e) {	
		}
		return name;
	}

	public boolean IsDisplayedByClassName(String ClassName) {
		boolean classname = false;
		try {
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
			classname = driver.findElement(By.className(ClassName)).isDisplayed();
		} catch (Exception e) {
		}
		return classname;
	}

	public boolean IsDisplayedByXpath(String Xpath) {
		boolean xpath = false;
		try {
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
			xpath = driver.findElement(By.xpath(Xpath)).isDisplayed();
		} catch (Exception e) {
		}
		return xpath;
	}
	
	public boolean IsDisplayedByLinkText(String LinkText) {
		boolean xpath = false;
		try {
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(LinkText)));
			xpath = driver.findElement(By.linkText(LinkText)).isDisplayed();
		} catch (Exception e) {
		}
		return xpath;
	}

	// Text box content verification

	// Text box content verification using ID - 080101
	public boolean verifyAttributeById(String Id, String attribute, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		boolean a = false;
		String A = driver.findElement(By.id(Id)).getAttribute(attribute);
		if (A.equals(Text)) {
			a = true;
		}
		return a;
	}

	// Text box content verification using Name - 080102
	public boolean verifyAttributeByName(String Name, String attribute, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		boolean a = false;
		String A = driver.findElement(By.name(Name)).getAttribute(attribute);
		if (A.equals(Text)) {
			a = true;
		}
		return a;
	}

	// Text box content verification using Class Name - 080103
	public boolean verifyAttributeByClassName(String ClassName, String attribute, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		boolean a = false;
		String A = driver.findElement(By.className(ClassName)).getAttribute(attribute);
		if (A.equals(Text)) {
			a = true;
		}
		return a;
	}

	// Text box content verification using Xpath - 080108
	public boolean verifyAttributeByXpath(String Xpath, String attribute, String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
	//	wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		boolean a = false;
		String A = driver.findElement(By.xpath(Xpath)).getAttribute(attribute);
		
		if (A != null){		
			if (A.equals(Text)) {
			a = true;
			return a;}	
		}else{return a;}
		return a;
	}

	// Database Verification - 081100
	public boolean verifyDataFromDB(String ServerIp, int portNo, String userName, String password, String select,
			String tableName, String primaryKey, String primaryKeyValue, String Text) {
		boolean a = false;
		Connection con = null;
		ResultSet rs = null;
		Statement stmt = null;
		String Val = null;
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con = DriverManager.getConnection("jdbc:oracle:thin:@" + ServerIp + ":" + portNo + "", "" + userName + "",
					"" + password + "");
			stmt = con.createStatement();
			rs = stmt.executeQuery("select " + select + " from " + tableName + " where " + primaryKey + " = '"
					+ primaryKeyValue + "'");
			while (rs.next()) {
				Val = rs.getString(1);
			}
			stmt.close();
			stmt = null;
			rs.close();

			// Close the local connection
			if ((con != null)) {
				con.close();
				con = null;
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}
		if (Val.equals(Text)) {
			a = true;
		}
		return a;
	}
	
	
	public boolean executeQueryInDB(String ServerIp, int portNo, String userName, String password) {
		boolean a = true;
		Connection con = null;
		ResultSet rs = null;
		Statement stmt = null;
		String Val = null;
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con = DriverManager.getConnection("jdbc:oracle:thin:@" + ServerIp + ":" + portNo + ":PGDEV", "" + userName + "",
					"" + password + "");
			stmt = con.createStatement();
			rs=stmt.executeQuery("update USER_INFO set LOGFLAG='N' where user_id in ('fsslead01','fsstest02' ,'fsstest01','mahachecker1','fsstest03','fsstest04')");
			/*while (rs.next()) {
				Val = rs.getString(1);
			}*/
			stmt.close();
			stmt = null;
			rs.close();

			// Close the local connection
			if ((con != null)) {
				con.close();
				con = null;
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}
		/*if (Val.equals(Text)) {
			a = true;
		}*/
		return a;
	}
	
	public String executeGivenQueryInDB(String ServerIp, int portNo, String userName, String password,String SSID,String Query) {
		boolean a = true;
		Connection con = null;
		ResultSet rs = null;
		Statement stmt = null;
		String Val = null;
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con = DriverManager.getConnection("jdbc:oracle:thin:@" + ServerIp + ":" + portNo + ":ORATSTPSG", "" + userName + "",
					"" + password + "");
			stmt = con.createStatement();
			rs=stmt.executeQuery(Query);
			while (rs.next()) {
				Val = rs.getString(1);
			}
			stmt.close();
			stmt = null;
			rs.close();

			// Close the local connection
			if ((con != null)) {
				con.close();
				con = null;
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}
		/*if (Val.equals(Text)) {
			a = true;
		}*/
		return Val;
	}
	


	// Verify Hex values - 081200
	public boolean verifyIptoHex(String ip, String Hex) {
		boolean aa = false;
		String b = "";
		String[] data = ip.split("\\.");
		for (int i = 0; i < 4; i++) {
			String a = Integer.toHexString(Integer.parseInt(data[i]));
			if (a.length() < 2) {
				b = b.concat(0 + a).toUpperCase();
			} else {
				b = b.concat(a).toUpperCase();
			}
		}
		if (b.equals(Hex)) {
			aa = true;
		}
		return aa;
	}

	// DataBase Table reading - 051100

	public String getDataFromDB(String ServerIp, int portNo, String userName, String password, String select,
			String tableName, String primaryKey, String primaryKeyValue) {

		Connection con = null;
		ResultSet rs = null;
		Statement stmt = null;
		String Val = null;

		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con = DriverManager.getConnection("jdbc:oracle:thin:@" + ServerIp + ":" + portNo + "", "" + userName + "",
					"" + password + "");
			stmt = con.createStatement();
			rs = stmt.executeQuery("select " + select + " from " + tableName + " where " + primaryKey + " = '"
					+ primaryKeyValue + "'");
			while (rs.next()) {
				Val = rs.getString(1);
			}
			stmt.close();
			stmt = null;
			rs.close();

			// Close the local connection
			if ((con != null)) {

				con.close();
				con = null;
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return Val;

	}

	// Verify title - 081300
	public boolean verifyTitle(String Text) {
		boolean tit = false;
		String tit1 = driver.getTitle();
		if (tit1.equals(Text)) {

			tit = true;
		}
		return tit;
	}
	
	public String getTitle() {
		String tit1 = driver.getTitle();
		return tit1;
	}
	public void ClickByXpathNew() throws InterruptedException, AWTException {
		driver.findElement(By.xpath("//select[@id='prefixId']")).click();
		Thread.sleep(3000);
		Robot r =new Robot();
		r.keyPress(KeyEvent.VK_DOWN);
		r.keyPress(KeyEvent.VK_DOWN);
		r.keyRelease(KeyEvent.VK_DOWN);
		r.keyPress(KeyEvent.VK_ENTER);
		r.keyRelease(KeyEvent.VK_ENTER);
		//driver.findElement(By.xpath("//option[@title='100 ']")).click();
		////option[@title='100 ']
	}

	// TextBox Length Verification

	// TextBox Length Verification using ID - 081401
	public boolean textboxLengthVerifyById(String Id, String att_name, int Length) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		boolean a = false;
		int len = driver.findElement(By.id(Id)).getAttribute(att_name).length();
		if (len == Length) {
			a = true;
		}
		return a;
	}

	// TextBox Length Verification using Name - 081402
	public boolean textboxLengthVerifyByName(String Name, String att_name, int Length) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		boolean a = false;
		int len = driver.findElement(By.name(Name)).getAttribute(att_name).length();
		if (len == Length) {
			a = true;
		}
		return a;
	}

	// TextBox Length Verification using Class Name - 081403
	public boolean textboxLengthVerifyByClassName(String ClassName, String att_name, int Length) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		boolean a = false;
		int len = driver.findElement(By.className(ClassName)).getAttribute(att_name).length();
		if (len == Length) {
			a = true;
		}
		return a;
	}

	// TextBox Length Verification using Xpath - 081408
	public boolean textboxLengthVerifyByXpath(String Xpath, String att_name, int Length) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		boolean a = false;
		int len = driver.findElement(By.xpath(Xpath)).getAttribute(att_name).length();
		if (len == Length) {
			a = true;
		}
		return a;
	}

	// Text box content retrieval

	// Text box content verification using ID - 080101
	public String getAtributeById(String Id, String attribute) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		return driver.findElement(By.id(Id)).getAttribute(attribute);
	}

	// Text box content verification using Name - 080102
	public String getAtributeByName(String Name, String attribute) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		return driver.findElement(By.name(Name)).getAttribute(attribute);

	}

	// Text box content verification using Class Name - 080103
	public String getAtributeByClassName(String ClassName, String attribute) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		return driver.findElement(By.className(ClassName)).getAttribute(attribute);

	}

	// Text box content verification using Xpath - 080108
	public String getAtributeByXpath(String Xpath, String attribute) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		return driver.findElement(By.xpath(Xpath)).getAttribute(attribute);
	}

	// Text content retrieval

	// Text box content verification using ID - 080101
	public String getTextById(String Id) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		return driver.findElement(By.id(Id)).getText();
	}

	// Text box content verification using Name - 080102
	public String getTextByName(String Name) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(Name)));
		return driver.findElement(By.name(Name)).getText();

	}

	// Text box content verification using Class Name - 080103
	public String getTextByClassName(String ClassName) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(ClassName)));
		return driver.findElement(By.className(ClassName)).getText();

	}

	// Text box content verification using Xpath - 080108
	public String getTextByXpath(String Xpath) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		return driver.findElement(By.xpath(Xpath)).getText();
	}
	
	public String getTextByXpath1(String Xpath) {
		try{
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		return driver.findElement(By.xpath(Xpath)).getText();
	}
		catch (Exception  e) {
			CommonLogger.log("getText failed - getText Failed in Exception Block");
			return "";

		}
		}
	// Other Wrapper

	public void switchToFrameByXpath(String Xpath) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		driver.switchTo().frame(driver.findElement(By.xpath(Xpath)));
	}

	public void switchToDefault() {
		driver.switchTo().defaultContent();
	}

	public void mouseOver(String Xpath, String Linktext) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(Linktext)));
		Actions actions = new Actions(driver);
		WebElement Personal = driver.findElement(By.xpath(Xpath));
		waitTillVisibleByXpath(Xpath);
		actions.moveToElement(Personal).build().perform();
		waitTillVisibleByLinkText(Linktext);
		actions.moveToElement(driver.findElement(By.linkText(Linktext))).click().build().perform();
	}
	
	public void mouseOverByXpath(String Xpath) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		Actions actions = new Actions(driver);
		WebElement Personal = driver.findElement(By.xpath(Xpath));
		waitTillVisibleByXpath(Xpath);
		actions.moveToElement(Personal).build().perform();
	}
	
	public void mouseOverByPosition(int xOffset, int yOffset) {
		//WebDriverWait wait = new WebDriverWait(driver, 30);
		//wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
		Actions actions = new Actions(driver);
		//WebElement Personal = driver.findElement(By.xpath(Xpath));
		//waitTillVisibleByXpath(Xpath);
		actions.moveByOffset(xOffset, yOffset).build().perform();
	}
	
	public void switchToFrameById(String Text) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Text)));
		driver.switchTo().frame(driver.findElement(By.id(Text)));
	}

	// Get the selected option
	public String getSelectedInListById(String Id) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
		String a = null;
		try {
			Select s = new Select(driver.findElement(By.id(Id)));
			WebElement option = s.getFirstSelectedOption();
			a = option.getText();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return a;
	}

	public String getDate() {
		Date now = new Date();
		SimpleDateFormat dateFormat = new SimpleDateFormat("DD/MM/YYYY");
		return dateFormat.format(now);
	}

	public String getTime() {
		Date now = new Date();
		SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm");
		return dateFormat.format(now);
	}

	public String getAlertText() {
		String text = driver.switchTo().alert().getText();
		return text;
	}

	public boolean verifyAlertText(String Text) {
		sleep(2000);
		boolean a = false;
		String text = driver.switchTo().alert().getText();
		if (text.equals(Text))
			a = true;
		else
			a = false;
		return a;
	}

	public boolean acceptAlert() {
		driver.switchTo().alert().accept();
		return true;
	}

	public boolean dismissAlert() {
		driver.switchTo().alert().dismiss();
		return true;
	}
	
	

	public static void setClipboardData(String string) {
		StringSelection stringSelection = new StringSelection(string);
		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(stringSelection, null);
	}

	public static void uploadFile(String fileLocation) {
		try {
			StringSelection stringSelection = new StringSelection(fileLocation);
			Toolkit.getDefaultToolkit().getSystemClipboard().setContents(stringSelection, null);
			sleep(1000);
			Robot robot = new Robot();
			robot.keyPress(KeyEvent.VK_CONTROL);
			robot.keyPress(KeyEvent.VK_V);
			robot.keyRelease(KeyEvent.VK_V);
			robot.keyRelease(KeyEvent.VK_CONTROL);
			robot.keyPress(KeyEvent.VK_ENTER);
			robot.keyRelease(KeyEvent.VK_ENTER);
		} catch (Exception exp) {
			exp.printStackTrace();
		}
	}

	public static void takeScreenShot(String DesPath) {
		try {
			File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
			FileUtils.copyFile(scrFile, new File(DesPath));
		} catch (WebDriverException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public int getSizeByXpath(String Xpath){
		scrollingToElementByXpath(Xpath);
		List<WebElement> element = driver.findElements(By.xpath(Xpath));
		return element.size();
	}
	
	public boolean verifySizeByXpath(String Xpath,int size){
		List<WebElement> element = driver.findElements(By.xpath(Xpath));
		int Size =  element.size();
		if(Size == size)
			return true;
		else
			return false;
	}
	
	public boolean switchToLastWindow(){
		Set<String> window = driver.getWindowHandles();
		for (String string : window) {
			driver.switchTo().window(string);
		}
		return true;
	}
	
	public boolean switchToFirstWindow(){
		Set<String> window = driver.getWindowHandles();
		for (String string : window) {
			driver.switchTo().window(string);
			break;
		}
		return true;
	}
	
	public static boolean sleep(int Msec){
		try {
			Thread.sleep(Msec);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return true;
	}

	public void close() {
		try {
			driver.quit();
		} catch (Exception e) {
		}
		
	}

	public Point getPositionUsingXpath(String Xpath){
		return driver.findElementByXPath(Xpath).getLocation();
	}
	
public void scrollingToElementByXpath(String xpath) {
		
		WebElement element = driver.findElement(By.xpath(xpath));
		((JavascriptExecutor) driver).executeScript(
                "arguments[0].scrollIntoView();", element);
	}
	
public void scrollingToElementById(String id) {
	
	WebElement element = driver.findElement(By.id(id));
	((JavascriptExecutor) driver).executeScript(
            "arguments[0].scrollIntoView();", element);
}

public void scrollingToElementByName(String name) {
	
	WebElement element = driver.findElement(By.name(name));
	((JavascriptExecutor) driver).executeScript(
            "arguments[0].scrollIntoView();", element);
}

public void scrollingToElementByClassName(String ClassName) {
	
	WebElement element = driver.findElement(By.className(ClassName));
	((JavascriptExecutor) driver).executeScript(
            "arguments[0].scrollIntoView();", element);
}

	public void scrollingToBottom() {
		 ((JavascriptExecutor) driver)
         .executeScript("window.scrollTo(0, document.body.scrollHeight)");
	}

	//
	public boolean clickByPartialLinkText(String Linktext) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(Linktext)));
		driver.findElement(By.partialLinkText(Linktext)).click();
		return true;
	}

	public String getMonthValueByXpath(String mon) {
		String value = "";
		switch (mon) {
		case "January":
			value = "01";
			break;

		case "February":
			value = "02";
			break;

		case "March":
			value = "03";
			break;
			
		case "April":
			value = "04";
			break;
			
		case "May":
			value = "05";
			break;
			
		case "June":
			value = "06";
			break;
			
		case "July":
			value = "07";
			break;
			
		case "August":
			value = "08";
			break;
			
		case "September":
			value = "09";
			break;
			
		case "October":
			value = "10";
			break;
			
		case "November":
			value = "11";
			break;
			
		case "December":
			value = "12";
			break;
		}
		return value;
	
	}
	
	public int getSizeByName(String Name){
		List<WebElement> element = driver.findElements(By.name(Name));
		return element.size();
	}
	
	public int getSizeById(String Id){
		List<WebElement> element = driver.findElements(By.id(Id));
		return element.size();
	}
	
	public int getSizeByClassName(String ClassName){
		List<WebElement> element = driver.findElements(By.className(ClassName));
		return element.size();
	}

	public boolean clickByXpathUsingAction(String xpath1) {
		WebElement element = driver.findElement(By.xpath(xpath1));
		Actions action = new Actions(driver);
		action.moveToElement(element).click().perform();
		return true;
		
	}
	
	public boolean clickByIdUsingAction(String Id) {
		WebElement element = driver.findElement(By.id(Id));
		Actions action = new Actions(driver);
		action.moveToElement(element).click().perform();
		return true;
		
	}
	
	public static void setBrowserInfo() {
		Capabilities localCapabilities = driver.getCapabilities();
		BROWSER_NAME = localCapabilities.getBrowserName();
		BROWSER_VERSION = localCapabilities.getVersion();
		/*atuReporter.ATUReportsListener_New.BROWSER_NAME = BROWSER_NAME;
		atuReporter.ATUReportsListener_New.BROWSER_VERSION = BROWSER_VERSION;*/
	}
	
	
	
	public String paste() throws InterruptedException {
		String text ="";
	    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
	    DataFlavor flavor = DataFlavor.stringFlavor;
	    if (clipboard.isDataFlavorAvailable(flavor)) {
	      try {
	         text = (String) clipboard.getData(flavor);
	        System.out.println(text);
	        String pattern =  ".\\properties\\Bulk.properties";
	    	String input = "Bulk.EmailSms.link=";
	    	 
	  	        // input the file content to the StringBuffer "input"
	  	        BufferedReader file = new BufferedReader(new FileReader(pattern));
	  	        StringBuffer inputBuffer = new StringBuffer();
	  	        String line;
	  	      String toreplace="";
		        while ((line = file.readLine()) != null) {
		        	
		        	if (line.contains("Bulk.EmailSms.link")){
	  	                
	  	        		toreplace=line;
	  	                System.out.println(""+toreplace);
	  	                }else {
	  	                
	  	                System.out.println("To replace not found");
	  	                
	  	                }
		            inputBuffer.append(line);
		           
		           inputBuffer.append('\n');
		        }
		        file.close();
		       
		        String inputStr = inputBuffer.toString();

		        System.out.println(inputStr); // display the original file for debugging

		        // logic to replace lines in the string (could use regex here to be generic)
		        Thread.sleep(2000);
		        
		        String newdata= input+text;
		            inputStr = inputStr.replace(toreplace, newdata); 
	  	       

	  	        // display the new file for debugging
	  	        System.out.println("----------------------------------\n" + inputStr);

	  	        // write the new string with the replaced line OVER the same file
	  	        FileOutputStream fileOut = new FileOutputStream(pattern);
	  	        fileOut.write(inputStr.getBytes());
	  	        fileOut.close();
	  	      ATUReports.add("Link is Pasted","","", text, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
	    	
	      } catch (UnsupportedFlavorException e) {
	        System.out.println(e);
	  	      ATUReports.add("Link not pasted", null, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

	      } catch (IOException e) {
	        System.out.println(e);
	  	      ATUReports.add("Link not pasted", null, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

	      }
	    }
		return text;
	  }
	public String pasteopenlink() throws InterruptedException {
		String text ="";
	    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
	    DataFlavor flavor = DataFlavor.stringFlavor;
	    if (clipboard.isDataFlavorAvailable(flavor)) {
	      try {
	         text = (String) clipboard.getData(flavor);
	        System.out.println(text);
	        String pattern =  ".\\properties\\Bulk.properties";
	    	String input = "Bulk.EmailSmsOpen.link=";
	    	 
	  	        // input the file content to the StringBuffer "input"
	  	        BufferedReader file = new BufferedReader(new FileReader(pattern));
	  	        StringBuffer inputBuffer = new StringBuffer();
	  	        String line;
	  	      String toreplace="";
		        while ((line = file.readLine()) != null) {
		        	
		        	if (line.contains("Bulk.EmailSmsOpen.link")){
	  	                
	  	        		toreplace=line;
	  	                System.out.println(""+toreplace);
	  	                }else {
	  	                
	  	                System.out.println("To replace not found");
	  	                
	  	                }
		        	 inputBuffer.append(line);
			            inputBuffer.append('\n');
		        }
		       
		        file.close();
		        String inputStr = inputBuffer.toString();

		        System.out.println(inputStr); // display the original file for debugging

		        // logic to replace lines in the string (could use regex here to be generic)
		    Thread.sleep(2000);
		            inputStr = inputStr.replace(toreplace, input+text); 
	  	       

	  	        // display the new file for debugging
	  	        System.out.println("----------------------------------\n" + inputStr);

	  	        // write the new string with the replaced line OVER the same file
	  	        FileOutputStream fileOut = new FileOutputStream(pattern);
	  	        fileOut.write(inputStr.getBytes());
	  	        fileOut.close();
	    	
	  	      ATUReports.add("Link is Pasted","","", text, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		    	
	      } catch (UnsupportedFlavorException e) {
	        System.out.println(e);
	  	      ATUReports.add("Link not pasted", null, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

	      } catch (IOException e) {
	        System.out.println(e);
	  	      ATUReports.add("Link not pasted", null, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

	      }}
		return text;
	  }
		
	
	
	
			}
Wrapper
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

package com.fss.aut.base.util;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Properties;

import org.apache.log4j.Logger;
/*import org.apache.log4j.PropertyConfigurator;*/
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
/*import org.openqa.selenium.WebDriver;*/
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Action;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
/*import java.lang.reflect.InvocationTargetException;*/
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

import atu.testng.reports.ATUReports;
import atu.testng.reports.logging.LogAs;
import atu.testng.selenium.reports.CaptureScreen;
import atu.testng.selenium.reports.CaptureScreen.ScreenshotOf;

import java.net.HttpURLConnection;
import java.net.ProtocolException;
import java.net.URL;
public class BasePage extends General {
	Properties prop;

	static Logger logger = Logger.getLogger("BasePage");
	static String oldotp = "000000";

	/*public BasePage() {

	//	PropertyConfigurator.configure("log4j.properties");

	}*/
	/*	 Index

	 1.launchBrowser

	 2.Text Entry Using ID, Name, ClassName, Xpath --> Count --> 4

	 a) By Id 					- 		enterTextByIdBase()
	 b) By Name 				- 		enterTextByNameBase()
	 c) By ClassName 			- 		enterTextByClassNameBase()
	 d) By Xpath 				- 		enterTextByXpathBase()

	 3. Attribute Text Verification against Excel Sheet Using ID, Name, ClassName, Xpath --> Count --> 4

	 a) By Id 					- 		verifyAttrTextByIdBase(String Value, String data)
	 b) By Name 				- 		verifyAttrTextByNameBase(String Value, String data)
	 c) By ClassName 			- 		verifyAttrTextByClassNameBase(String Value, String data)
	 d) By Xpath 				- 		verifyAttrTextByXpathBase(String Value, String data)

	 4. Attribute Text length verification against Excel sheet Using ID, Name, ClassName, Xpath --> Count --> 4

	 a) By Id 					- 		verifyAttributeTextLengthById(String Value, String data)
	 b) By Name 				- 		verifyAttributeTextLengthByName(String Value, String data)
	 c) By ClassName 			- 		verifyAttributeTextLengthByClassName(String Value, String data)
	 d) By Xpath 				- 		verifyAttributeTextLengthByXpath(String Value, String data)

	 5. Select List box Option Using Visible text entry from Excel Sheet By ID, Name, ClassName, Xpath --> Count --> 4

	 a) By Id 					- 		selectUsingVisibleTextById(String Value, String data)
	 b) By Name 				- 		selectUsingVisibleTextByName(String Value, String data)
	 c) By ClassName 			- 		selectUsingVisibleTextByClassName(String Value, String data)
	 d) By Xpath 				- 		selectUsingVisibleTextByXpath(String Value, String data)


	 6. Select List box Option Using Value entry from Excel Sheet By ID, Name, ClassName, Xpath --> Count --> 4

	 a) By Id 					- 		selectUsingValueById(String Value, String data)
	 b) By Name 				- 		selectUsingValueByName(String Value, String data)
	 c) By ClassName 			- 		selectUsingValueByClassName(String Value, String data)
	 d) By Xpath 				- 		selectUsingValueByXpath(String Value, String data)


	 7. Select List box Option Using Index entry from Excel Sheet By ID, Name, ClassName, Xpath --> Count --> 4

	 a) By Id 					- 		selectUsingIndexById(String Value, String data)
	 b) By Name 				- 		selectUsingIndexByName(String Value, String data)
	 c) By ClassName 			- 		selectUsingIndexByClassName(String Value, String data)
	 d) By Xpath 				- 		selectUsingIndexByXpath(String Value, String data)


	 8. Verification of List Box Options Count against Excel sheet Using ID, Name, ClassName, Xpath --> Count --> 4

	 a) By Id 					- 		verifyListOptionsCountByIdBase(String Value, String data)
	 b) By Name 				- 		verifyListOptionsCountByNameBase(String Value, String data)
	 c) By ClassName 			- 		verifyListOptionsCountByClassNameBase(String Value, String data)
	 d) By Xpath 				- 		verifyListOptionsCountByXpathBase(String Value, String data)

	 9. Verification of List Box Default Selection Text against Excel sheet Using ID, Name ,ClassName, Xpath --> Count --> 4

	 a) By Id 					- 		verifyListBoxDefaultTextByIdBase(String Value, String data)
	 b) By Name 				- 		verifyListBoxDefaultTextByNameBase(String Value, String data)
	 c) By ClassName 			- 		verifyListBoxDefaultTextByClassNameBase(String Value, String data)
	 d) By Xpath 				- 		verifyListBoxDefaultTextByXpathBase(String Value, String data)

	 10. Alert Box functions --> Count --> 5

	 a) Accept 														- 	acceptAlertBox()
	 b) Reject 														- 	rejectAlertBox()
	 c) Alert Msg verification against Excel sheet 					- 	verifyAlertTextBox(String alertText)
	 d) Alert Msg Verification with accept against Excel sheet	 	- 	verifyAcceptAlertTextBox(String alertText)
	 e) Alert Msg Verification with reject against Excel sheet	 	- 	verifyRejectAlertTextBox(String alertText)


	 11. Buttons Click with attribute text Using ID, Name, ClassName, Xpath --> Count --> 4

	 a) By Id 					- 		clickButtonById(String Value, String data)
	 b) By Name 				- 		clickButtonByName(String Value, String data)
	 c) By ClassName 			- 		clickButtonByClassName(String Value, String data)
	 d) By Xpath 				- 		clickButtonByXpath(String Value, String data)

	 12. Select Radio Button from Excel sheet Using Xpath --> Count --> 1

	 a) By Xpath 				- 		selectRadioButtonByXpath(String Value, String data)

	 13. Select Check Box from Excel sheet Using Xpath --> Count --> 1

	 a) By Xpath 				- 		selectCheckBoxByXpath(String Value, String data)

	 14. General and Default Verification --> Count --> 18

	 b) Page Title Verification against excel sheet 	- 	verifyPageTitle(String data)

	 15. Page Heading Verification against Excel Sheet Using ID, Name, ClassName, Xpath

	 a) By Id 					- 		verifyPageHeadingById(String Value, String data)
	 b) By Name 				- 		verifyPageHeadingByName(String Value, String data)
	 c) By ClassName 			- 		verifyPageHeadingByClassName(String Value, String data)
	 d) By Xpath 				- 		verifyPageHeadingByXpath(String Value, String data)

	 16. Page Text Verification against Excel Sheet Using ID, Name, ClassName, Xpath ---> Count ---> 4

	 e) By Id 					- 		verifyPageTextByIdBase(String Value, String data)
	 f) By Name 				- 		verifyPageTextByNameBase(String Value, String data)
	 g) By ClassName 			- 		verifyPageTextByClassNameBase(String Value, String data)
	 h) By Xpath 				- 		verifyPageTextByXpathBase(String Value, String data)

	 17. Verification of Text against Excel Sheet Using Id, Name, ClassName, Xpath --> Count --> 4

	 a) By Id 					- 		verifyTextByIdBase(String Value, String data)
	 b) By Name 				- 		verifyTextByNameBase(String Value, String data)
	 c) By ClassName 			- 		verifyTextByClassNameBase(String Value, String data)
	 d) By Xpath 				- 		verifyTextByXpathBase(String Value, String data)

	 18. Click Using Link Text and Partial Link Text ---> Count --> 2

	 a) clickLinkByLinkText(String data)
	 b) clickLinkByPartialLinkText(String data)

	 19. Click the date by sending the value in excel sheet as dd/mm/yyyy --> Count --> 1

	 a) By Xpath 				- 		clickDatePicker(String Value, String Value1, String Value2, String Value3, String Value4,
										String Value5, String Value6, String Value7, String Value8, String Value9, String Value10, String data)

	 20. Click Button Using Id, Name, ClassName, Xpath --> Count --> 4

	 a) clickByIdBase(String Value, String data)
	 b) clickByNameBase(String Value, String data)
	 c) clickByClassNameBase(String Value, String data)
	 d) clickByXpathBase(String Value, String data)

	 21. Click Menus Using MouseOver

	 a) clickMenusByXpathUsingMouseOver(String Value, String data)
	 b) clickMenusByXpathValueUsingMouseOver(String Value,String xpathVlaue, String data)

	 22. Click Menus Options

	 a) clickMenusOptionByXpath(String Value,String data)
	 b) clickMenusOptionByXpathValue(String Value, String XpathValue, String data)

	 23. Click Menus without Using MouseOver

	 a) selectMenusByXpathValue(String Value,String XpathValue,String data)
	 b) selectMenusByXpath(String Value,String data)

	 24. Selection of List with Div Tag

	 a) selectListWithDivTagByXpath(String Value,String Value1,String Value2,String Value3)

	 25. Selection of Table with value
	 a) selectTableWithValue(String Value,String xpathValue,String xpathValue1,String data)
	 b) selectListInLoopByXpath(String Value,String Value1,String Locator,String data)

	 26. Select Radio Button with loop 
	 a) selectRadioButton(String Value,String Value1,String Value2)
	 b) selectRadioButtonWithXpath(String Value,String Value1,String xpathValue,String Value2)
	 c) selectRadioButtonXpathSelection(String Value,String Value1,String xpathValue,String Value2)

	 27. Verify Text by Fetching the text
	 a) getAndVerifyText(String Value, String data,String Value1)

	 28. Table size count fetching
	 a) getTableSizeListCount(String Value,String Count)
	 b) IsElementsEnabled(String Id)

	 29. Closing the browser
	 a) closeBrowser()

	 */
	public String launchnew(String value1, String value2, String value3,String PageDesc, String Authorname,
            String ProjectName) {
	    try {
            CommonLogger.log("launchBrowser invoked");
            launchLogin(value1, value2, value3);
            setBrowserInfo();
            setATUreportConfig(PageDesc, Authorname, ProjectName);
            ATUReports.add("Browser opened ", LogAs.INFO, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
            CommonLogger.log("launchBrowser - Browser Launched");
        } catch (Exception e) {
            CommonLogger.log("launchBrowser - Browser Launch Failed in Exception Block");
            ATUReports.add("Launch Browser failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
            CommonLogger.errorLog(e);
        }
        return value1;
    }

	public String launchBrowser(String value1, String value2, String value3, String PageDesc, String Authorname,
			String ProjectName) {
		try {
			CommonLogger.log("launchBrowser invoked");
			launchLogin(value1, value2, value3);
			setBrowserInfo();
			setATUreportConfig(PageDesc, Authorname, ProjectName);
			ATUReports.add("Browser opened ", LogAs.INFO, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("launchBrowser - Browser Launched");
		} catch (Exception e) {
			CommonLogger.log("launchBrowser - Browser Launch Failed in Exception Block");
			ATUReports.add("Launch Browser failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return value1;
	}
	//img Upload Aravindan
    public String selectUploadFileWithSendKeysBase(String Value, String data, String Caption){
        try {
            CommonLogger.log("UploadFile invoked");
            WebElement browse = driver.findElement(By.xpath(Value));
            //click on ‘Choose file’ to upload the desired file
            browse.sendKeys(data);
            System.out.println("Uploaded");
            ATUReports.add(Caption +" selected", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
            CommonLogger.log("UploadFile - File Uploaded successfully");
        } catch (Exception e) {
            CommonLogger.log("UploadFile - File Upload Failed in Exception Block");
            ATUReports.add(Caption+"   selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
            CommonLogger.errorLog(e);
        }
        return Caption;
    }

	// Text Entry Using ID, Name, ClassName, Xpath

	// Text entry by Id
	public String enterTextByIdBase(String value, String data) {
		try {
			CommonLogger.log("enterTextByIdBase invoked");
			if (enterTextById(value, data))
				ATUReports.add("Text Entered", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Text not entered","hghgf" , data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("enterTextByIdBase - Text entered successfully");
		} catch (Exception e) {
			CommonLogger.log("enterTextByIdBase - Text Entry Failed in Exception Block");
			ATUReports.add("Text entry failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return value;
	}

	public String enterTextWithJSExecutorByIdBase(String value, String data) {
		try {
			CommonLogger.log("enterTextByIdBase invoked");
			try {
				enterTextWithJSExecutorById(value, data);
			} catch (Exception e1) {
			}
			ATUReports.add("Text Entered", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("enterTextByIdBase - Text entered successfully");
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return value;
	}

	public String textnotenteredByIdBase(String value, String data) {
		try {
			CommonLogger.log("textnotenteredByIdBase invoked");
			if (enterTextById(value, data))
				ATUReports.add("Text not Entered", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Text entered", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("textnotenteredByIdBase - Text not entered successfully");
		} catch (Exception e) {
			CommonLogger.log("textnotenteredByIdBase - Text Entry successful in Exception Block");
			ATUReports.add("Text entry sucessfull", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return value;
	}

	// Text entry By Name
	public String enterTextByNameBase(String value, String data) {
		try {
			CommonLogger.log("enterTextByNameBase invoked");
			if (enterTextByName(value, data))
				ATUReports.add("Text Entered", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Text not entered", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("enterTextByNameBase - Text Entered successfully");
		} catch (Exception e) {
			CommonLogger.log("enterTextByNameBase - Text Entry Failed in Exception Block");
			ATUReports.add("Text entry failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return value;
	}

	// Text entry By ClassName
	public String enterTextByClassNameBase(String value, String data) {
		try {
			CommonLogger.log("enterTextByClassNameBase invoked");
			if (enterTextByClassName(value, data))
				ATUReports.add("Text Entered", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Text not entered", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("enterTextByClassNameBase - Text Entered successfully");
		} catch (Exception e) {
			CommonLogger.log("enterTextByClassNameBase - Text Entry Failed in Exception Block");
			ATUReports.add("Text entry failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return value;
	}

	// Text entry By Xpath
	public String enterTextByXpathBase(String value, String data) {
		try {
			CommonLogger.log("enterTextByXpathBase invoked");
			if (enterTextByXpath(value, data))
				ATUReports.add("Text Entered", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Text not entered", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("enterTextByXpathBase - Text Entered successfully");
		} catch (Exception e) {
			CommonLogger.log("enterTextByXpathBase - Text Entry Failed in Exception Block");
			ATUReports.add("Text entry failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return value;
	}
	
	public String enterTextByXpathBase(String value, String data, String value1) {
		try {
			CommonLogger.log("enterTextByXpathBase invoked");
			if (enterTextByXpath(value, data))
				ATUReports.add("Text Entered", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Text not entered", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("enterTextByXpathBase - Text Entered successfully");
		} catch (Exception e) {
			CommonLogger.log("enterTextByXpathBase - Text Entry Failed in Exception Block");
			ATUReports.add("Text entry failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return value;
	}

	// Attribute Text Verification against Excel Sheet Using ID, Name,
	// ClassName, Xpath

	// Attribute text verification By Id
	public String verifyAttrTextByIdBase(String Value, String data) {
		try {
			CommonLogger.log("verifyAttributeTextByIdBase invoked");
			if (verifyAttrTextById(Value, "value", data)) {
				ATUReports.add("Text matched", "", data, getAttrTextById(Value, "value"), LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Text not matched", "", data, getAttrTextById(Value, "value"), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyAttributeTextByIdBase - Text Matched successfully");
		} catch (Exception e) {
			CommonLogger.log("verifyAttributeTextByIdBase - Text Match Failed in Exception Block");
			ATUReports.add("Text Verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}
	// Text box content verification using ID - 080101
		public String getTextById(String Id) {
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Id)));
			return driver.findElement(By.id(Id)).getText();
		}
		//Textby xpath
		public String getTextByXpathNew(String Xpath) {
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Xpath)));
			return driver.findElement(By.xpath(Xpath)).getText();
		}
	// Attribute text verification By Name
	public String verifyAttrTextByNameBase(String Value, String data) {
		try {
			CommonLogger.log("verifyAttrTextByNameBase invoked");
			if (verifyAttrTextByName(Value, "value", data)) {
				ATUReports.add("Text matched", "", data, getAttrTextByName(Value, "value"), LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Text not matched", "", data, getAttrTextByName(Value, "value"), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyAttrTextByNameBase Text Matched");
		} catch (Exception e) {
			CommonLogger.log("verifyAttrTextByNameBase Text Match Failed in Exception Block");
			ATUReports.add("Text Verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Attribute text verification By ClassName
	public String verifyAttrTextByClassNameBase(String Value, String data) {
		try {
			CommonLogger.log("verifyAttrTextByClassNameBase invoked");
			if (verifyAttrTextByClassName(Value, "value", data)) {
				ATUReports.add("Text matched", "", data, getAttrTextByClassName(Value, "value"), LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Text not matched", "", data, getAttrTextByClassName(Value, "value"), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyAttrTextByClassNameBase Text Matched");
		} catch (Exception e) {
			CommonLogger.log("verifyAttrTextByClassNameBase Text Match Failed in Exception Block");
			ATUReports.add("Text Verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Attribute text verification By Xpath
	public String verifyAttrTextByXpathBase(String Value, String data) {
		try {
			CommonLogger.log("verifyAttrTextByXpathBase invoked");
			if (verifyAttrTextByXpath(Value, "value", data)) {
				ATUReports.add("Text matched", "", data, getAttrTextByXpath(Value, "value"), LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Text not matched", "", data, getAttrTextByXpath(Value, "value"), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyAttrTextByXpathBase - Text Matched");
		} catch (Exception e) {
			CommonLogger.log("verifyAttrTextByXpathBase - Text Match Failed in Exception Block");
			ATUReports.add("Text Verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Attribute Text length verification against Excel sheet Using ID, Name,
	// ClassName, Xpath

	// Attribute text length verification By Id
	public String verifyAttributeTextLengthById(String Value, String data) {
		try {
			CommonLogger.log("verifyAttributeTextLengthById invoked");
			if (verifyAttrTextLengthById(Value, "value", Integer.parseInt(data))) {
				ATUReports.add("Text Length matched", "", data + "", getAttrTextLengthById(Value, "value") + "",
						LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Text Length not matched", "", data + "", getAttrTextLengthById(Value, "value") + "",
						LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			}
			CommonLogger.log("verifyAttributeTextLengthById - Text Length Matched");
		} catch (Exception e) {
			CommonLogger.log("verifyAttributeTextLengthById - Text Length Match Failed in Exception Block");
			ATUReports.add("Text Length verification failed", LogAs.FAILED,
					new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Attribute text length verification By Name
	public String verifyAttributeTextLengthByName(String Value, String data) {
		try {
			CommonLogger.log("verifyAttributeTextLengthByName invoked");
			if (verifyAttrTextLengthByName(Value, "value", Integer.parseInt(data))) {
				ATUReports.add("Text Length matched", "", data + "", getAttrTextLengthByName(Value, "value") + "",
						LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Text Length not matched", "", data + "", getAttrTextLengthByName(Value, "value") + "",
						LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			}
			CommonLogger.log("verifyAttributeTextLengthByName - Text Length Matched");
		} catch (Exception e) {
			CommonLogger.log("verifyAttributeTextLengthByName - Text Length Match Failed in Exception Block");
			ATUReports.add("Text Length verification failed", LogAs.FAILED,
					new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Attribute text length verification By ClassName
	public String verifyAttributeTextLengthByClassName(String Value, String data) {
		try {
			CommonLogger.log("verifyAttributeTextLengthByClassName invoked");
			if (verifyAttrTextLengthByClassName(Value, "value", Integer.parseInt(data))) {
				ATUReports.add("Text Length matched", "", data + "", getAttrTextLengthByClassName(Value, "value") + "",
						LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Text Length not matched", "", data + "", getAttrTextLengthByClassName(Value, "value")
						+ "", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			}
			CommonLogger.log("verifyAttributeTextLengthByClassName - Text Length Matched");
		} catch (Exception e) {
			CommonLogger.log("verifyAttributeTextLengthByClassName - Text Length Match Failed in Exception Block");
			ATUReports.add("Text Length verification failed", LogAs.FAILED,
					new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Attribute text length verification By Xpath
	public String verifyAttributeTextLengthByXpath(String Value, String data) {
		try {
			CommonLogger.log("verifyAttributeTextLengthByXpath invoked");
			if (verifyAttrTextLengthByXpath(Value, "value", Integer.parseInt(data))) {
				ATUReports.add("Text Length matched", "", data + "", getAttrTextLengthByXpath(Value, "value") + "",
						LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Text Length not matched", "", data + "", getAttrTextLengthByXpath(Value, "value") + "",
						LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			}
			CommonLogger.log("verifyAttributeTextLengthByXpath - Text Length Matched");
		} catch (Exception e) {
			CommonLogger.log("verifyAttributeTextLengthByXpath - Text Length Match Failed in Exception Block");
			ATUReports.add("Text Length verification failed", LogAs.FAILED,
					new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}
	
	//New Select dropdown
	public String selectUsingVisibleTextByXpathNew(String Value, String Value1,String data,String Caption) {
		try {
			CommonLogger.log("selectListInLoopByxpath invoked");
			if(getTextByXpath(Value1).equals(data)) {
				ATUReports.add(Caption+"Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}else {
				clickByXpath(Value1);
				int size =getSizeByXpath(Value);
				for(int i=1;i <=size;i++) {
					String value = getTextByXpath(Value + "[" + i + "]").trim();
					if(value.equalsIgnoreCase(data)) {
						clickByXpath(Value + "[" + i + "]");
						ATUReports.add(Caption+"Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
						break;
					}
					scrollingToElementByXpath(Value + "[" + i + "]");
				}
			}
			
		}catch(Exception e) {
			CommonLogger.log("selectListInLoopByxpath- Option Selection Failed in Exception Block");
			ATUReports.add(Caption+"Option not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		
		
		return Value;
		
	}

	// Select List box Option Using Visible text By ID, Name, ClassName, Xpath

	// Selection Using Visible Text By Id
	public String selectUsingVisibleTextById(String Value, String data) {
		try {
			scrollingToElementById(data);
			CommonLogger.log("selectUsingVisibleTextById invoked");
			if (selectVisibleTextById(Value, data)) {
				ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Option not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectUsingVisibleTextById - Option Selected");
		} catch (Exception e) {
			CommonLogger.log("selectUsingVisibleTextById - Option Selection Failed in Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Selection Using Visible Text By Name
	public String selectUsingVisibleTextByName(String Value, String data) {
		try {
			//scrollingToElementByName(Value);
			CommonLogger.log("selectUsingVisibleTextByName invoked");
			if (selectVisibleTextByName(Value, data)) {
				ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			} else {
				ATUReports.add("Option not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			}
			CommonLogger.log("selectUsingVisibleTextByName - Option Selected");
		} catch (Exception e) {
			CommonLogger.log("selectUsingVisibleTextByName - Option Selection Failed in Exception Block");

			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Selection Using Visible Text By ClassName
	public String selectUsingVisibleTextByClassName(String Value, String data) {
		try {
			CommonLogger.log("selectUsingVisibleTextByClassName invoked");
			if (selectVisibleTextByClassName(Value, data)) {
				ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Option not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectUsingVisibleTextByClassName - Option Selected");
		} catch (Exception e) {
			CommonLogger.log("selectUsingVisibleTextByClassName - Option Selection Failed in Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Selection Using Visible Text By Xpath
	public String selectUsingVisibleTextByXpath(String Value, String data) {
		try {
			CommonLogger.log("selectUsingVisibleTextByXpath invoked");
			if (selectVisibleTextByXpath(Value, data)) {
				ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Option not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectUsingVisibleTextByXpath - Option Selected");
		} catch (Exception e) {
			CommonLogger.log("selectUsingVisibleTextByXpath - Option Selection Failed in Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;

	}

	public String selectListInLoopdownByXpath(String Value, String Value1, String data) {
		try {
			CommonLogger.log("selectListInLoopByXpath invoked");
			if (getTextByXpath(Value1).equals(data)) {
				ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				clickByXpath(Value1);
				int size = getSizeByXpath(Value);
				for (int i = 1; i <= size; i++) {
					String value = getTextByXpath(Value + "[" + i + "]").trim();
					if (value.equalsIgnoreCase(data)) {
						clickByXpath(Value + "[" + i + "]");
						ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(
								ScreenshotOf.BROWSER_PAGE));
						break;
					} else {
						scrollingToElementByXpath(Value + "[" + i + "]");
					}
				}
				CommonLogger.log("selectListInLoopByXpath - Option Selected");
			}
		} catch (Exception e) {
			CommonLogger.log("selectListInLoopByXpath - Option Selection Failed iin Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}
	
	public String selectListInLoopdownByXpath(String Value, String data) {
		try {
			CommonLogger.log("selectListInLoopByXpath invoked");
			if (getTextByXpath(Value).equals(data)) {
				ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				clickByXpath(Value);
				int size = getSizeByXpath(Value);
				for (int i = 1; i <= size; i++) {
					String value = getTextByXpath(Value + "[" + i + "]").trim();
					if (value.equalsIgnoreCase(data)) {
						clickByXpath(Value + "[" + i + "]");
						ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(
								ScreenshotOf.BROWSER_PAGE));
						break;
					} else {
						scrollingToElementByXpath(Value + "[" + i + "]");
					}
				}
				CommonLogger.log("selectListInLoopByXpath - Option Selected");
			}
		} catch (Exception e) {
			CommonLogger.log("selectListInLoopByXpath - Option Selection Failed iin Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String selectListInLoopdownByXpath(String Value, String Value1, String data, String data1) {
		try {
			CommonLogger.log("selectListInLoopByXpath invoked");
			if (getTextByXpath(Value1).equals(data)) {
				ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				clickByXpath(Value1);
				int size = getSizeByXpath(Value);
				for (int i = 1; i <= size; i++) {
					String value = getTextByXpath(Value + "[" + i + "]").trim();
					if (value.equalsIgnoreCase(data)) {
						clickByXpath(Value + "[" + i + "]");
						ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(
								ScreenshotOf.BROWSER_PAGE));
						break;
					} else {
						scrollingToElementByXpath(Value + "[" + i + "]");
					}
				}
				CommonLogger.log("selectListInLoopByXpath - Option Selected");
			}
		} catch (Exception e) {
			CommonLogger.log("selectListInLoopByXpath - Option Selection Failed iin Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}
	
	// Select List box Option Using Value entry from Excel Sheet By ID, Name,
	// ClassName, Xpath

	// Selection Using Value By Id
	public String selectUsingValueById(String Value, String data) {
		try {
			CommonLogger.log("selectUsingValueById invoked");
			if (selectValueById(Value, data)) {
				ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Option not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectUsingValueById - Option Selected");
		} catch (Exception e) {
			CommonLogger.log("selectUsingValueById - Option Selection Failed in Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Selection Using Value By Name
	public String selectUsingValueByName(String Value, String data) {
		try {
			CommonLogger.log("selectUsingValueByName invoked");
			if (selectValueByName(Value, data)) {
				ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			} else {
				ATUReports.add("Option not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			}
			CommonLogger.log("selectUsingValueByName - Option Selected");
		} catch (Exception e) {
			CommonLogger.log("selectUsingValueByName - Option Selection Failed in Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Selection Using Value By ClassName
	public String selectUsingValueByClassName(String Value, String data) {
		try {
			CommonLogger.log("selectUsingValueByClassName invoked");
			if (selectValueByClassName(Value, data)) {
				ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Option not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectUsingValueByClassName - Option Selected");
		} catch (Exception e) {
			CommonLogger.log("selectUsingValueByClassName - Option Selection Failed in Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Selection Using Value By Xpath
	public String selectUsingValueByXpath(String Value, String data) {
		try {
			CommonLogger.log("selectUsingValueByXpath invoked");
			if (selectValueByXpath(Value, data)) {
				ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Option not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectUsingValueByClassName - Option Selected");
		} catch (Exception e) {
			CommonLogger.log("selectUsingValueByClassName - Option Selection Failed in Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;

	}

	// Select List box Option Using Index entry from Excel Sheet By ID, Name,
	// ClassName, Xpath

	// Selection Using Index By Id
	public String selectUsingIndexById(String Value, String data) {
		try {
			CommonLogger.log("selectUsingIndexById invoked");
			if (selectIndexById(Value, Integer.parseInt(data))) {
				ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Option not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectUsingIndexById - Option Selected");
		} catch (Exception e) {
			CommonLogger.log("selectUsingIndexById - Option Selection Failed in Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Selection Using Index By Name
	public String selectUsingIndexByName(String Value, String data) {
		try {
			CommonLogger.log("selectUsingIndexByName invoked");
			if (selectIndexByName(Value, Integer.parseInt(data))) {
				ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			} else {
				ATUReports.add("Option not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			}
			CommonLogger.log("selectUsingIndexByName - Option Selected");
		} catch (Exception e) {
			CommonLogger.log("selectUsingIndexByName - Option Selection Failed in Exception Block");

			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Selection Using Index By ClassName
	public String selectUsingIndexByClassName(String Value, String data) {
		try {
			CommonLogger.log("selectUsingIndexByClassName invoked");
			if (selectIndexByClassName(Value, Integer.parseInt(data))) {
				ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Option not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectUsingIndexByClassName - Option Selected");
		} catch (Exception e) {
			CommonLogger.log("selectUsingIndexByClassName - Option Selection Failed in Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Selection Using Index By Xpath
	public String selectUsingIndexByXpath(String Value, String data) {
		try {
			CommonLogger.log("selectUsingIndexByXpath invoked");
			if (selectIndexByXpath(Value, Integer.parseInt(data))) {
				ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Option not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectUsingIndexByXpath - Option Selected");
		} catch (Exception e) {
			CommonLogger.log("selectUsingIndexByXpath - Option Selection Failed in Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Verification of List Box Options Count against Excel sheet Using ID,
	// Name, ClassName, Xpath

	// List Box Options Count verification By Id
	public String verifyListOptionsCountByIdBase(String Value, String data) {
		try {
			CommonLogger.log("verifyListOptionsCountByIdBase invoked");
			if (verifyListBoxOptionsCountByID(Value, Integer.parseInt(data))) {
				ATUReports.add("Options Count matched", "", data, getListBoxOptionsCountByID(Value) + "", LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Options Count not matched", "", data, getListBoxOptionsCountByName(Value) + "",
						LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyListOptionsCountByIdBase - List Options Count Matched");
		} catch (NumberFormatException e) {
			CommonLogger.log("verifyListOptionsCountByIdBase - List Options Count Failed in NumberFormat Exception");
			ATUReports.add("Options Count Verification failed", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;

	}

	// List Box Options Count verification By Name
	public String verifyListOptionsCountByNameBase(String Value, String data) {
		try {
			CommonLogger.log("verifyListOptionsCountByNameBase invoked");
			if (verifyListBoxOptionsCountByName(Value, Integer.parseInt(data))) {
				ATUReports.add("Options Count matched", "", data, getListBoxOptionsCountByName(Value) + "",
						LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Options Count not matched", "", data, getListBoxOptionsCountByName(Value) + "",
						LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyListOptionsCountByNameBase - List Options Count Matched");
		} catch (NumberFormatException e) {
			CommonLogger.log("verifyListOptionsCountByNameBase - List Options Count Failed in NumberFormat Exception");
			ATUReports.add("Options Count Verification failed", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
		}

		return Value;
	}

	// List Box Options Count verification By ClassName
	public String verifyListOptionsCountByClassNameBase(String Value, String data) {
		try {
			CommonLogger.log("verifyListOptionsCountByClassNameBase invoked");
			if (verifyListBoxOptionsCountByClassName(Value,
					Integer.parseInt(prop.getProperty("PageName.FieldName.Count")))) {
				ATUReports.add("Options Count matched", "", data, getListBoxOptionsCountByClassName(Value) + "",
						LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Options Count not matched", "", data, getListBoxOptionsCountByClassName(Value) + "",
						LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyListOptionsCountByClassNameBase - List Options Count Matched");
		} catch (NumberFormatException e) {
			CommonLogger
			.log("verifyListOptionsCountByClassNameBase - List Options Count Failed in NumberFormat Exception");
			ATUReports.add("Options Count Verification failed", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
		}

		return Value;
	}

	// List Box Options Count verification By Xpath
	public String verifyListOptionsCountByXpathBase(String Value, String data) {
		try {
			CommonLogger.log("verifyListOptionsCountByXpathBase invoked");
			if (verifyListBoxOptionsCountByXpath(Value, Integer.parseInt(data))) {
				ATUReports.add("Options Count matched", "", data, getListBoxOptionsCountByXpath(Value) + "",
						LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Options Count not matched", "", data, getListBoxOptionsCountByXpath(Value) + "",
						LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyListOptionsCountByXpathBase - List Options Count Matched");
		} catch (NumberFormatException e) {
			CommonLogger.log("verifyListOptionsCountByXpathBase - List Options Count Failed in NumberFormat Exception");
			ATUReports.add("Options Count Verification failed", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
		}

		return Value;
	}

	// Verification of List Box Default Selection Text against Excel sheet Using
	// ID, Name ,ClassName, Xpath

	// List Box Default Text Verify By Id
	public String verifyListBoxDefaultTextByIdBase(String Value, String data) {
		try {
			CommonLogger.log("verifyListBoxDefaultTextByIdBase invoked");
			if (verifySelectedOptionByID(Value, data)) {
				ATUReports.add("Default Selection matched  ", "", data, getSelectedOptionByID(Value), LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Default Selection not matched ", "", data, getSelectedOptionByID(Value), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyListBoxDefaultTextByIdBase - Default Selection Matched");
		} catch (Exception e) {
			CommonLogger.log("verifyListBoxDefaultTextByIdBase - Default Selection Failed in Exception Block");
			ATUReports.add("Default Selection verification failed  ", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));

		}
		return Value;
	}

	// List Box Default Text Verify By Name
	public String verifyListBoxDefaultTextByNameBase(String Value, String data) {
		try {
			CommonLogger.log("verifyListBoxDefaultTextByNameBase invoked");
			if (verifySelectedOptionByName(Value, data)) {
				ATUReports.add("Default Selection matched  ", "", data, getSelectedOptionByName(Value), LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Default Selection not matched ", "", data, getSelectedOptionByName(Value),
						LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyListBoxDefaultTextByNameBase - Default Selection Matched");
		} catch (Exception e) {
			CommonLogger.log("verifyListBoxDefaultTextByNameBase - Default Selection Failed in Exception Block");
			ATUReports.add("Default Selection verification failed  ", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));

		}
		return Value;
	}

	// List Box Default Text Verify By ClassName
	public String verifyListBoxDefaultTextByClassNameBase(String Value, String data) {
		try {
			CommonLogger.log("verifyListBoxDefaultTextByClassNameBase invoked");
			if (verifySelectedOptionByClassName(Value, data)) {
				ATUReports.add("Default Selection matched  ", "", data, getSelectedOptionByClassName(Value),
						LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Default Selection not matched ", "", data, getSelectedOptionByClassName(Value),
						LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyListBoxDefaultTextByClassNameBase - Default Selection Matched");
		} catch (Exception e) {
			CommonLogger.log("verifyListBoxDefaultTextByClassNameBase - Default Selection Failed in Exception Block");
			ATUReports.add("Default Selection verification failed  ", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// List Box Default Text Verify By Xpath
	public String verifyListBoxDefaultTextByXpathBase(String Value, String data) {
		try {
			CommonLogger.log("verifyListBoxDefaultTextByXpathBase invoked");
			if (verifySelectedOptionByXpath(Value, data)) {
				ATUReports.add("Default Selection matched  ", "", data, getSelectedOptionByXpath(Value), LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Default Selection not matched ", "", data, getSelectedOptionByXpath(Value),
						LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyListBoxDefaultTextByXpathBase - Default Selection Matched");
		} catch (Exception e) {
			CommonLogger.log("verifyListBoxDefaultTextByXpathBase - Default Selection Failed in Exception Block");
			ATUReports.add("Default Selection verification failed  ", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Alert Box functions

	// Accept alert Box
	public boolean acceptAlertBox() {
		try {
			CommonLogger.log("acceptAlertBox invoked");
			if (acceptAlert()) {
				ATUReports.add("Alert accepted", LogAs.PASSED, new CaptureScreen(ScreenshotOf.DESKTOP));
			} else {
				ATUReports.add("Alert not accepted", LogAs.FAILED, new CaptureScreen(ScreenshotOf.DESKTOP));
			}
			CommonLogger.log("acceptAlertBox - Alert Accepted");
		} catch (Exception e) {
			CommonLogger.log("acceptAlertBox - Alert AcceptFailed in Exception Block");
			ATUReports.add("Alert handling failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.DESKTOP));
		}
		return true;
	}

	// Reject alert Box
	public boolean rejectAlertBox() {
		try {
			CommonLogger.log("rejectAlertBox invoked");
			if (dismissAlert()) {
				ATUReports.add("Alert dismissed", LogAs.PASSED, new CaptureScreen(ScreenshotOf.DESKTOP));
			} else {
				ATUReports.add("Alert not dismissed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.DESKTOP));
			}
			CommonLogger.log("rejectAlertBox - Alert Box Rejected");
		} catch (Exception e) {
			CommonLogger.log("rejectAlertBox - Alert Box Rejection Failed in Exception Block");
			ATUReports.add("Alert handling failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.DESKTOP));
		}
		return true;
	}

	// Alert Msg verification against Excel sheet
	public boolean verifyAlertTextBox(String alertText) {
		try {
			CommonLogger.log("verifyAlertTextBox invoked");
			if (verifyAlertText(alertText)) {
				ATUReports.add("Alert message matched", "", alertText, getAlertText(), LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.DESKTOP));
			} else {
				ATUReports.add("Alert message not matched", "", alertText, getAlertText(), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.DESKTOP));
			}
			CommonLogger.log("verifyAlertTextBox - Alert Text Verified");
		} catch (Exception e) {
			CommonLogger.log("verifyAlertTextBox - Alert Text Verification Failed in Exception Block");
			ATUReports.add("Alert message verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.DESKTOP));
		}
		return true;
	}

	// Alert Msg Verification with accept against Excel Sheet
	public boolean verifyAcceptAlertTextBox(String alertText) {
		try {
			System.out.println(getAlertText());
			CommonLogger.log("verifyAcceptAlertTextBox invoked");
			if (verifyAlertText(alertText)) {
				ATUReports.add("Alert message matched", "", alertText, getAlertText(), LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.DESKTOP));
			} else {
				ATUReports.add("Alert message not matched", "", alertText, getAlertText(), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.DESKTOP));
			}
			CommonLogger.log("verifyAcceptAlertTextBox - Alert Message Matched and accepted the alert box");
		} catch (Exception e) {
			CommonLogger.log("verifyAcceptAlertTextBox - Alert Message Match Failed in Exception Block");
			ATUReports.add("Alert message verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.DESKTOP));
		}
		acceptAlert();
		return true;
	}

	// Alert Msg Verification with reject against Excel Sheet
	public boolean verifyRejectAlertTextBox(String alertText) {
		try {
			CommonLogger.log("verifyRejectAlertTextBox invoked");
			if (verifyAlertText(alertText)) {
				ATUReports.add("Alert message matched", "", alertText, getAlertText(), LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.DESKTOP));
			} else {
				ATUReports.add("Alert message not matched", "", alertText, getAlertText(), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.DESKTOP));
			}
			CommonLogger.log("verifyRejectAlertTextBox - Alert Text Matched and Rejected the Alert Box");
		} catch (Exception e) {
			CommonLogger.log("verifyRejectAlertTextBox - Alert Text Match Failed in Exception Block");
			ATUReports.add("Alert message verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.DESKTOP));
		}
		dismissAlert();
		return true;
	}

	// Buttons Click Using ID, Name, ClassName, Xpath

	// Button Click By Id
	public String clickButtonById(String Value, String data) {
		try {
			CommonLogger.log("clickButtonById invoked");

			String Text = getAttrTextById(Value, "value").trim();
			if (Text.equalsIgnoreCase(data)) {
				if (clickById(Value)) {
					ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				} else {
					ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(
							ScreenshotOf.BROWSER_PAGE));
				}
			}
			CommonLogger.log("clickButtonById - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickButtonById - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}
	public String clickButtonByIdAlert(String Value, String data) {
		try {
			CommonLogger.log("clickButtonById invoked");

			String Text = getAttrTextById(Value, "value").trim();
			if (Text.equalsIgnoreCase(data)) {
				if (clickById(Value)) {
					ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.DESKTOP));
					
					
				} else {
					ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(
							ScreenshotOf.DESKTOP));
				}
			}
			CommonLogger.log("clickButtonById - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickButtonById - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.DESKTOP));
		}
		return Value;
	}
	
	public String clickButtonByNameAlert(String Value, String data) {
		try {
			CommonLogger.log("clickButtonByName invoked");
			String value = getAttrTextByName(Value, "value");
			if (value.equalsIgnoreCase(data)) {
				if (clickByName(Value)) {
					ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.DESKTOP));
				} else {
					ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(
							ScreenshotOf.DESKTOP));
				}
			}
			CommonLogger.log("clickButtonByName - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickButtonByName - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.DESKTOP));
		}
		return Value;
	}
	public String clickButtonWithJSExecutorById(String Value, String data) {
		try {
			CommonLogger.log("clickButtonWithJSExecutorById invoked");
				try {
					clickJSExecuteById(Value);
				} catch (Exception e) {
				}
				ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
//			}
			CommonLogger.log("clickButtonWithJSExecutorById - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickButtonWithJSExecutorById - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	public String clickButtonWithJSExecutorByXpath(String Value, String data) {
		try {
			CommonLogger.log("clickButtonWithJSExecutorById invoked");
				try {
					clickJSExecuteByXpath(Value);
				} catch (Exception e) {
				}
				ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
//			}
			CommonLogger.log("clickButtonWithExecutorById - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickButtonWithExecutorByXpath - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Button Click By Name
	public String clickButtonByName(String Value, String data) {
		try {
			CommonLogger.log("clickButtonByName invoked");
			String value = getAttrTextByName(Value, "value");
			if (value.equalsIgnoreCase(data)) {
				if (clickByName(Value)) {
					ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				} else {
					ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(
							ScreenshotOf.BROWSER_PAGE));
				}
			}
			CommonLogger.log("clickButtonByName - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickButtonByName - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Button Click By ClassName
	public String clickButtonByClassName(String Value, String data) {
		try {
			CommonLogger.log("clickButtonByClassName invoked");
			String value = getAttrTextByClassName(Value, "value");
			if (value.equalsIgnoreCase(data)) {
				if (clickByClassName(Value)) {
					ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				} else {
					ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(
							ScreenshotOf.BROWSER_PAGE));
				}
			}
			CommonLogger.log("clickButtonByClassName - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickButtonByClassName - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Button Click By Xpath
	public String clickButtonByXpath(String Value, String data) {
		try {
			scrollingToElementByXpath(Value);
			CommonLogger.log("clickButtonByXpath invoked");
			String value = getAttrTextByXpath(Value, "value");
			//String value = getTextById(Value);
			
			if (value.equalsIgnoreCase(data)) {
				if (clickByXpath(Value)) {
					ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				} else {
					ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(
							ScreenshotOf.BROWSER_PAGE));
				}
			}
			CommonLogger.log("clickButtonByXpath - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickButtonByXpath - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}
	//clicktextbyvalue aravind
	public String clickButtonByXpathNew(String Value, String data) {
		try {
			//scrollingToElementByXpath(Value);
			CommonLogger.log("clickButtonByXpath invoked");
			//String value = getAttrTextByXpath(Value, "value");
			String value = getTextByXpathNew(Value);
			
			if (value.equalsIgnoreCase(data)) {
				if (clickByXpath(Value)) {
					ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				} else {
					ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(
							ScreenshotOf.BROWSER_PAGE));
				}
			}
			CommonLogger.log("clickButtonByXpath - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickButtonByXpath - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}
	public String clickButtonByXpathAlert(String Value, String data) {
		try {
			scrollingToElementByXpath(Value);
			CommonLogger.log("clickButtonByXpath invoked");
			String value = getAttrTextByXpath(Value, "value");
			if (value.equalsIgnoreCase(data)) {
				if (clickByXpath(Value)) {
					ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.DESKTOP));
				} else {
					ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(
							ScreenshotOf.DESKTOP));
				}
			}
			CommonLogger.log("clickButtonByXpath - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickButtonByXpath - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.DESKTOP));
		}
		return Value;
	}
	
	// Button click By Xpath with loop
	public String clickButtonInLoopByXpath(String Value, String data) {
		try {
			CommonLogger.log("clickButtonInLoopByXpath invoked");
			int size = getSizeByXpath(Value);
			for (int i = 1; i <= size; i++) {
				String value = getAttrTextByXpath(Value + "[" + i + "]", "value");
				if (value.equalsIgnoreCase(data)) {
					if (clickByXpath(Value + "[" + i + "]")) {
						ATUReports.add("Button clicked", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					} else {
						ATUReports
						.add("Button not clicked", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					}
				}
			}
			CommonLogger.log("clickButtonInLoopByXpath - Button clicked");
		} catch (Exception e) {
			CommonLogger.log("clickButtonInLoopByXpath - Button click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Radio Button Default Selection Using ID, Name, ClassName, Xpath

	// Radio Button Default selection By Id
	public String verifyRadioBtnDefaultSelectionById(String Value) {
		try {
			CommonLogger.log("verifyRadioBtnDefaultSelectionById invoked");
			if (IsSelectedById(Value)) {
				ATUReports
				.add("Default selection verified", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Default selection not verified", LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyRadioBtnDefaultSelectionById - Radio Button Default Selection Verified");
		} catch (Exception e) {
			CommonLogger
			.log("verifyRadioBtnDefaultSelectionById - Radio Button Default Selection Failed in Exception Block");
			ATUReports.add("Default selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Radio Button Default selection By Name
	public String verifyRadioBtnDefaultSelectionByName(String Value) {
		try {
			CommonLogger.log("verifyRadioBtnDefaultSelectionByName invoked");
			if (IsSelectedByName(Value)) {
				ATUReports
				.add("Default selection verified", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Default selection not verified", LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyRadioBtnDefaultSelectionByName - Radio Button Default Selection Verified");
		} catch (Exception e) {
			CommonLogger
			.log("verifyRadioBtnDefaultSelectionByName - Radio Button Default Selection Failed in Exception Block");
			ATUReports.add("Default selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Radio Button Default selection By ClassName
	public String verifyRadioBtnDefaultSelectionByClassName(String Value) {
		try {
			CommonLogger.log("verifyRadioBtnDefaultSelectionByClassName invoked");
			if (IsSelectedByClassName(Value)) {
				ATUReports
				.add("Default selection verified", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Default selection not verified", LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyRadioBtnDefaultSelectionByClassName - Radio Button Default Selection Verified");
		} catch (Exception e) {
			CommonLogger
			.log("verifyRadioBtnDefaultSelectionByClassName - Radio Button Default Selection Failed in Exception Block");
			ATUReports.add("Default selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Radio Button Default selection By Xpath
	public String verifyRadioBtnDefaultSelectionByXpath(String Value) {
		try {
			CommonLogger.log("verifyRadioBtnDefaultSelectionByXpath invoked");
			if (IsSelectedByXpath(Value)) {
				ATUReports
				.add("Default selection verified", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Default selection not verified", LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyRadioBtnDefaultSelectionByXpath - Radio Button Default Selection Verified");
		} catch (Exception e) {
			CommonLogger
			.log("verifyRadioBtnDefaultSelectionByXpath - Radio Button Default Selection Failed in Exception Block");
			ATUReports.add("Default selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Radio Button Default selection By Id
	public String verifyCheckBoxDefaultSelectionById(String Value) {
		try {
			CommonLogger.log("verifyCheckBoxDefaultSelectionById invoked");
			if (IsSelectedById(Value)) {
				ATUReports
				.add("Default selection verified", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Default selection not verified", LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyCheckBoxDefaultSelectionById - Check Box Default Selection Verified");
		} catch (Exception e) {
			CommonLogger
			.log("verifyCheckBoxDefaultSelectionById - Check Box Default Selection Failed in Exception Block");
			ATUReports.add("Default selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Radio Button Default selection By Name
	public String verifyCheckBoxDefaultSelectionByName(String Value) {
		try {
			CommonLogger.log("verifyCheckBoxDefaultSelectionByName invoked");
			if (IsSelectedByName(Value)) {
				ATUReports
				.add("Default selection verified", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Default selection not verified", LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyCheckBoxDefaultSelectionByName - Check Box Default Selection Verified");
		} catch (Exception e) {
			CommonLogger
			.log("verifyCheckBoxDefaultSelectionByName - Check Box Default Selection Failed in Exception Block");
			ATUReports.add("Default selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Radio Button Default selection By ClassName
	public String verifyCheckBoxDefaultSelectionByClassName(String Value) {
		try {
			CommonLogger.log("verifyCheckBoxDefaultSelectionByClassName invoked");
			if (IsSelectedByClassName(Value)) {
				ATUReports
				.add("Default selection verified", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Default selection not verified", LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyCheckBoxDefaultSelectionByClassName - Check Box Default Selection Verified");
		} catch (Exception e) {
			CommonLogger
			.log("verifyCheckBoxDefaultSelectionByClassName - Check Box Default Selection Failed in Exception Block");
			ATUReports.add("Default selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Radio Button Default selection By Xpath
	public String verifyCheckBoxDefaultSelectionByXpath(String Value) {
		try {
			CommonLogger.log("verifyCheckBoxDefaultSelectionByXpath invoked");
			if (IsSelectedByXpath(Value)) {
				ATUReports
				.add("Default selection verified", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Default selection not verified", LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyCheckBoxDefaultSelectionByXpath - Check Box Default Selection Verified");
		} catch (Exception e) {
			CommonLogger
			.log("verifyCheckBoxDefaultSelectionByXpath - Check Box Default Selection Failed in Exception Block");
			ATUReports.add("Default selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Select Radio Button from Excel sheet Using ID, Name, ClassName, Xpath

	// Select Radio Button By Xpath
	public String selectRadioButtonByXpath(String Value, String data) {
		try {
			CommonLogger.log("selectRadioButtonByXpath invoked");
			int size = getSizeByXpath(Value);
			for (int i = 1; i <= size; i++) {
				String value = getTextByXpath(Value + "[" + i + "]");
				if (value.equalsIgnoreCase(data)) {
					if (clickByXpath(Value + "[" + i + "]")) {
						ATUReports.add("Button Clicked", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					} else {
						ATUReports
						.add("Button not Clicked", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					}
					break;
				}
			}
			CommonLogger.log("selectRadioButtonByXpath - Check Box Selected");
		} catch (Exception e) {
			CommonLogger.log("selectRadioButtonByXpath - Check Box Selection Failed in Exception Block");
			ATUReports.add("Button Click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}
	
	public String selectRadioButtonByXpath(String Value, String data, String data2) {
		try {
			CommonLogger.log("selectRadioButtonByXpath invoked");
			int size = getSizeByXpath(Value);
			for (int i = 1; i <= size; i++) {
				String value = getTextByXpath(Value + "[" + i + "]");
				if (value.equalsIgnoreCase(data)) {
					if (clickByXpath(Value + "[" + i + "]")) {
						ATUReports.add("Button Clicked", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					} else {
						ATUReports
						.add("Button not Clicked", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					}
					break;
				}
			}
			CommonLogger.log("selectRadioButtonByXpath - Check Box Selected");
		} catch (Exception e) {
			CommonLogger.log("selectRadioButtonByXpath - Check Box Selection Failed in Exception Block");
			ATUReports.add("Button Click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Select Check Box from Excel sheet Using ID, Name, ClassName, Xpath

	// Select Check Box Using Xpath
	public String selectCheckBoxByXpath(String Value, String data) {
		try {
			CommonLogger.log("selectCheckBoxByXpath invoked");
			int size = getSizeByXpath(Value);
			for (int i = 1; i <= size; i++) {
				String value = getTextByXpath(Value + "[" + i + "]");
				if (value.equalsIgnoreCase(data)) {
					if (clickByXpath(Value + "[" + i + "]")) {
						ATUReports
						.add("Check Box Selected", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					} else {
						ATUReports.add("Check Box not Selected", LogAs.FAILED, new CaptureScreen(
								ScreenshotOf.BROWSER_PAGE));
					}
					break;
				}
			}
			CommonLogger.log("selectCheckBoxByXpath - Check Box Selected");
		} catch (Exception e) {
			CommonLogger.log("selectCheckBoxByXpath - Check Box Selection Failed in Exception Block");
			ATUReports.add("Check Box selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// General and Default Verification

	// Page Title Verification against excel sheet
	public String verifyPageTitle(String data) {
		try {
			CommonLogger.log("verifyPageTitle invoked");
			if (verifyTitle(data)) {
				ATUReports.add("Page Title verified", "", data, getTitle(), LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Page Title not verified", "", data, getTitle(), LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyPageTitle - Page Title Verified");
		} catch (Exception e) {
			CommonLogger.log("verifyPageTitle - Page Title Verification Failed in Exception Block");
			ATUReports
			.add("Page Title verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return data;
	}

	// Page Heading Verification against Excel Sheet Using ID, Name, ClassName,
	// Xpath

	// Page Heading Verification By Id
	public String verifyPageHeadingById(String Value, String data) {
		try {
			CommonLogger.log("verifyPageHeadingById invoked");
			if (verifyTextById(Value, data)) {
				ATUReports.add("Page Heading verified", "", data, getTextById(Value), LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Page Heading not verified", "", data, getTextById(Value), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyPageHeadingById - Page Heading Verified");
		} catch (Exception e) {
			CommonLogger.log("verifyPageHeadingById - Page Heading Verification Failed in Exception Block");
			ATUReports.add("Page Heading verification failed", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Page Heading Verification By Name
	public String verifyPageHeadingByName(String Value, String data) {
		try {
			CommonLogger.log("verifyPageHeadingByName invoked");
			if (verifyTextByName(Value, data)) {
				ATUReports.add("Page Heading verified", "", data, getTextByName(Value), LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Page Heading not verified", "", data, getTextByName(Value), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyPageHeadingByName - Page Heading Verified");
		} catch (Exception e) {
			CommonLogger.log("verifyPageHeadingByName - Page Heading Verification Failed in Exception Block");
			ATUReports.add("Page Heading verification failed", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Page Heading Verification By ClassName
	public String verifyPageHeadingByClassName(String Value, String data) {
		try {
			CommonLogger.log("verifyPageHeadingByClassName invoked");
			if (verifyTextByClassName(Value, data)) {
				ATUReports.add("Page Heading verified", "", data, getTextByClassName(Value), LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Page Heading not verified", "", data, getTextByClassName(Value), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyPageHeadingByClassName - Page Heading Verified");
		} catch (Exception e) {
			CommonLogger.log("verifyPageHeadingByClassName - Page Heading Verification Failed in Exception Block");
			ATUReports.add("Page Heading verification failed", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Page Heading Verification By Xpath
	public String verifyPageHeadingByXpath(String Value, String data) {
		try {
			CommonLogger.log("verifyPageHeadingByXpath invoked");
			if (verifyTextByXpath(Value, data)) {
				ATUReports.add("Page Heading verified", "", data, getTextByXpath(Value), LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Page Heading not verified", "", data, getTextByXpath(Value), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyPageHeadingByXpath - Page Heading Verified");
		} catch (Exception e) {
			CommonLogger.log("verifyPageHeadingByXpath - Page Heading Verification Failed in Exception Block");
			ATUReports.add("Page Heading verification failed", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Page Text Verification against Excel Sheet Using ID, Name, ClassName,
	// Xpath

	// Page Text Verification By Id
	public String verifyPageTextByIdBase(String Value, String data) {
		try {
			CommonLogger.log("verifyPageTextByIdBase invoked");
			if (verifyTextById(Value, data)) {
				ATUReports.add("Page Text verified ", "", data, getTextById(Value), LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Page Text not verified", "", data, getTextById(Value), LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyPageTextByIdBase - Page Text Verified");
		} catch (Exception e) {
			CommonLogger.log("verifyPageTextByIdBase - Page Text Verification Failed in Exception Block");
			ATUReports.add("Page Text verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Page Text Verification By Name
	public String verifyPageTextByNameBase(String Value, String data) {
		try {
			CommonLogger.log("verifyPageTextByNameBase invoked");
			if (verifyTextByName(Value, data)) {
				ATUReports.add("Page Text verified ", "", data, getTextByName(Value), LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Page Text not verified", "", data, getTextByName(Value), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyPageTextByNameBase - Page Text Verified");
		} catch (Exception e) {
			CommonLogger.log("verifyPageTextByNameBase - Page Text Verification Failed in Exception Block");
			ATUReports.add("Page Text verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Page Text Verification By ClassName
	public String verifyPageTextByClassNameBase(String Value, String data) {
		try {
			CommonLogger.log("verifyPageTextByClassNameBase invoked");
			if (verifyTextByClassName(Value, data)) {
				ATUReports.add("Page Text matched ", "", data, getTextByClassName(Value), LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Page Text not matched", "", data, getTextByClassName(Value), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyPageTextByClassNameBase - Page Text Verified");
		} catch (Exception e) {
			CommonLogger.log("verifyPageTextByClassNameBase - Page Text Verification Failed in Exception Block");
			ATUReports.add("Page Text verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Page Text Verification By Xpath
	public String verifyPageTextByXpathBase(String Value, String data) {
		try {
			CommonLogger.log("verifyPageTextByXpathBase invoked");
			if (verifyTextByXpath(Value, data)) {
				ATUReports.add("Page Text matched ", "", data, getTextByXpath(Value), LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Page Text not matched", "", data, getTextByXpath(Value), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyPageTextByXpathBase - Page Text Verified");
		} catch (Exception e) {
			CommonLogger.log("verifyPageTextByXpathBase - Page Text Verification Failed in Exception Block");
			ATUReports.add("Page Text verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Click By Link Text
	public String clickLinkByLinkText(String data) {
		try {
			CommonLogger.log("clickLinkByLinkText invoked");
			if (clickByLinkText(data)) {
				ATUReports.add("Link clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Link not clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("clickLinkByLinkText - Link Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickLinkByLinkText - Link Click Failed in Exception Block");
			ATUReports.add("Link click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return data;
	}

	// Click By Partial Link Text
	public String clickLinkByPartialLinkText(String data) {
		try {
			CommonLogger.log("clickLinkByPartialLinkText invoked");
			if (clickByPartialLinkText(data)) {
				ATUReports.add("Partial Link clicked", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Partial Link not clicked", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("clickLinkByPartialLinkText - Partial Link Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickLinkByPartialLinkText - Partial Link Click Failed in Exception Block");
			ATUReports.add("Partial Link click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return data;
	}

	// Verification of Text against Excel Sheet Using Id, Name, ClassName, Xpath

	// Verification of Text by Id
	public String verifyTextByIdBase(String Value, String data) {
		try {
			CommonLogger.log("verifyTextByIdBase invoked");
			if (verifyTextById(Value, data)) {
				ATUReports.add("Text verified ", "", data, getTextById(Value), LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Text not verified", "", data, getTextById(Value), LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyTextByIdBase - Text Verified");
		} catch (Exception e) {
			CommonLogger.log("verifyTextByIdBase - Text Verification Failed in Exception Block");
			ATUReports.add("Text verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Verification of Text by Name
	public String verifyTextByNameBase(String Value, String data) {
		try {
			CommonLogger.log("verifyTextByNameBase invoked");
			if (verifyTextByName(Value, data)) {
				ATUReports.add("Text verified ", "", data, getTextByName(Value), LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Text not verified", "", data, getTextByName(Value), LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyTextByNameBase - Text Verifed");
		} catch (Exception e) {
			CommonLogger.log("verifyTextByNameBase - Text Verification Failed in Exception Block");
			ATUReports.add("Text verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Verification of Text by ClassName
	public String verifyTextByClassNameBase(String Value, String data) {
		try {
			CommonLogger.log("verifyTextByClassNameBase invoked");
			if (verifyTextByClassName(Value, data)) {
				ATUReports.add("Text verified ", "", data, getTextByClassName(Value), LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Text not verified", "", data, getTextByClassName(Value), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyTextByClassNameBase - Text Verifed");
		} catch (Exception e) {
			CommonLogger.log("verifyTextByClassNameBase - Text Verification Failed in Exception Block");
			ATUReports.add("Text verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Verification of Text by Xpath
	public String verifyTextByXpathBase(String Value, String data) {
		try {
			CommonLogger.log("verifyTextByXpathBase invoked");
			if (verifyTextByXpath(Value, data)) {
				ATUReports.add("Text verified ", "", data, getTextByXpath(Value), LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Text not verified", "", data, getTextByXpath(Value), LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyTextByXpathBase - Text Verifed");
		} catch (Exception e) {
			CommonLogger.log("verifyTextByXpathBase - Text Verification Failed in Exception Block");
			ATUReports.add("Text verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Click the date by sending the value in excel sheet as dd/mm/yyyy
	public String clickDatePicker(String Value, String Value1, String Value2, String Value3, String Value4,
			String Value5, String Value6, String Value7, String Value8, String Value9, String Value10, String data) {

		// Splitting the date from excel sheet
		String arr[] = data.split("/");

		// Getting the month text from calendar
		String mon = getMonthValueByXpath(Value);

		// Click the particular month by verifying the value
		int month = Integer.parseInt(mon) - Integer.parseInt(arr[1]);
		if (month < 0) {
			for (int i = 1; i <= month * (-1); i++) {
				clickByXpath(Value1);
			}
		} else if (month > 0) {
			for (int i = 1; i <= month; i++) {
				clickByXpath(Value3);
			}
		}

		// Getting the Year text from calendar
		String yr = getTextByXpath(Value4);

		// Click the particular year by verifying the value
		int year = Integer.parseInt(yr) - Integer.parseInt(arr[2]);
		if (year < 0) {
			for (int i = 1; i <= year * (-1); i++) {
				clickByXpath(Value5);
			}
		} else if (year > 0) {
			for (int i = 1; i <= year; i++) {
				clickByXpath(Value6);
			}
		}

		// Getting the day text from calendar
		String dayText = getTextByXpath(Value7);

		// Click the particular day by verifying the value in loop
		int size = getSizeByXpath(Value8); // table
		// row
		// loop
		// size
		int size1 = getSizeByXpath(Value9); // table
		// col
		// loop
		// size
		for (int i = 1; i <= size; i++) {
			for (int j = 1; j < size1; j++) {
				if (dayText.equals(arr[0])) {
					clickByXpath(Value10);
				}
			}
		}
		return Value;
	}

	public String clickByIdBase(String Value, String data) {
		try {
			CommonLogger.log("clickByIdBase invoked");
			String value = getTextById(Value);
			if (value.equals(data)) {
				clickById(Value);
				ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("clickByIdBase - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickByIdBase - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String clickByNameBase(String Value, String data) {
		try {
			CommonLogger.log("clickByNameBase invoked");
			String value = getTextByName(Value);
			if (value.equals(data)) {
				clickByName(Value);
				ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("clickByNameBase - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickByNameBase - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String clickByClassNameBase(String Value, String data) {
		try {
			CommonLogger.log("clickByClassNameBase invoked");
			String value = getTextByClassName(Value);
			if (value.equals(data)) {
				clickByClassName(Value);
				ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("clickByClassNameBase - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickByClassNameBase - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}
	
	public String clickByXpathBase(String data)  {
		try {
			CommonLogger.log("clickByXpathBase invoked");
			scrollingToElementByXpath(data);
			WebDriverWait wait = new WebDriverWait(driver, 30);
			Thread.sleep(2000);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(data)));
			String value = getTextByXpath(data);
			if (value.equals(data)) {
				clickByXpath(data);
				ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("clickByXpathBase - Button Clicked successfully");
		} catch (Exception e) {
			CommonLogger.log("clickByXpathBase - Button click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return data;
	}

	public String clickByXpathBase(String Value, String data)  {
		try {
			CommonLogger.log("clickByXpathBase invoked");
			scrollingToElementByXpath(Value);
			WebDriverWait wait = new WebDriverWait(driver, 30);
			Thread.sleep(2000);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Value)));
			String value = getTextByXpath(Value);
			if (value.equals(data)) {
				clickByXpath(Value);
				ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("clickByXpathBase - Button Clicked successfully");
		} catch (Exception e) {
			CommonLogger.log("clickByXpathBase - Button click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Select the Menus with Mouse Over
	public String clickMenusByXpathUsingMouseOver(String Value, String data) {
		boolean success = false;
		int size = getSizeByXpath(Value);
		try {
			CommonLogger.log("clickMenusByXpathUsingMouseOver invoked");
			Thread.sleep(2000);
			for (int i = 1; i <= size; i = i + 2) {
				String value = getTextByXpath(Value + "[" + i + "]").trim();
				// System.out.println(value);
				if (value.equalsIgnoreCase(data)) {
					if (clickByXpath(Value + "[" + i + "]")) {
						mouseOverByXpath(Value + "[" + i + "]");
						ATUReports.add("Menu selected", data, LogAs.PASSED,
								new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					}
					success = true;
					break;
				}
			}
			if (success == false) {
				ATUReports.add("Menu not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("clickMenusByXpathUsingMouseOver - Menu Clicked successfully");
		} catch (Exception e) {
			CommonLogger.log("clickMenusByXpathUsingMouseOver - Menu Click Failed");
			ATUReports.add("Menu selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Select the Menus with Mouse Over
	public String clickMenusByXpathValueUsingMouseOver(String Value, String xpathVlaue, String data) {
		boolean success = false;
		int size = getSizeByXpath(Value);
		try {
			CommonLogger.log("clickMenusByXpathValueUsingMouseOver with Three String Value invoked");
			Thread.sleep(2000);
			for (int i = 1; i <= size; i = i + 2) {
				String value = getTextByXpath(Value + "[" + i + "]" + xpathVlaue).trim();
				// System.out.println(value);
				if (value.equalsIgnoreCase(data)) {
					if (clickByXpath(Value + "[" + i + "]" + xpathVlaue)) {
						mouseOverByXpath(Value + "[" + i + "]" + xpathVlaue);
						ATUReports.add("Menu selected", data, LogAs.PASSED,
								new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					}
					success = true;
					break;
				}
			}
			if (success == false) {
				ATUReports.add("Menu not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("clickMenusByXpathValueUsingMouseOver - Menu Clicked successfully");
		} catch (Exception e) {
			CommonLogger.log("clickMenusByXpathValueUsingMouseOver - Menu Click Failed");
			ATUReports.add("Menu selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Select the MenusOptions
	public String clickMenusOptionByXpath(String Value, String data) {
		// clickInstitutionMenusByXpath(Menus);
		boolean success = false;
		int size = getSizeByXpath(Value);
		// System.out.println("Size" + size);
		try {
			CommonLogger.log("clickMenusOptionByXpath with Two String Value invoked");
			Thread.sleep(1000);
			for (int i = 1; i <= size; i++) {
				String value = getTextByXpath(Value + "[" + i + "]");
				// System.out.println(value);
				if (value.equalsIgnoreCase(data)) {
					clickByXpath(Value + "[" + i + "]");
					ATUReports.add("Menu Option selected", data, LogAs.PASSED, new CaptureScreen(
							ScreenshotOf.BROWSER_PAGE));
					success = true;
					break;
				}
			}
			if (success == false) {
				ATUReports.add("Menu Option not selected", data, LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("clickMenusOptionByXpath - Menu Options Clicked successfully");
		} catch (Exception e) {
			CommonLogger.log("clickMenusOptionByXpath - Menu Options Click Failed");
			ATUReports.add("Menu Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Select the MenusOptions
	public String clickMenusOptionByXpathValue(String Value, String XpathValue, String data) {
		// clickInstitutionMenusByXpath(Menus);
		boolean success = false;
		int size = getSizeByXpath(Value);
		// System.out.println("Size" + size);
		try {
			CommonLogger.log("clickMenusOptionByXpathValue with Three String Value invoked");
			Thread.sleep(1000);
			for (int i = 1; i <= size; i++) {
				String value = getTextByXpath(Value + "[" + i + "]" + XpathValue);
				// System.out.println(value);
				if (value.equalsIgnoreCase(data)) {
					clickByXpath(Value + "[" + i + "]" + XpathValue);
					ATUReports.add("Menu Option selected", data, LogAs.PASSED, new CaptureScreen(
							ScreenshotOf.BROWSER_PAGE));
					success = true;
					break;
				}
			}
			if (success == false) {
				ATUReports.add("Menu Option not selected", data, LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("clickMenusOptionByXpathValue - Menu Options Clicked successfully");
		} catch (Exception e) {
			CommonLogger.log("clickMenusOptionByXpathValue - Menu Options Click Failed");
			ATUReports.add("Menu Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}
	//mouse over new clickByXpath
	public String SelectMenuNew() {
		clickByXpath(prop.getProperty("InstitutionLogin.Userrole.Xpath"));
		return null;
		
	}

	// Select the Menus without mouse over
	public String selectMenusByXpathValue(String Value, String XpathValue, String data) {
		boolean success = false;
		int size = getSizeByXpath(Value);
		// System.out.println("Size" + size);
		try {
			CommonLogger.log("selectMenusByXpathValue with Three String Value invoked");
			for (int i = 1; i <= size; i++) {
				String value1 = getTextByXpath(Value + "[" + i + "]" + XpathValue);
				if (value1.equalsIgnoreCase(data)) {
					clickByXpath(Value + "[" + i + "]" + XpathValue);
					sleep(1000);
					ATUReports
					.add(data + " selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					success = true;
					break;
				}
			}
			if (success == false) {
				ATUReports
				.add(data + " not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectMenusByXpathValue - Menus Clicked successfully");
		} catch (Exception e) {
			CommonLogger.log("selectMenusByXpathValue - Menus Click Failed");
			ATUReports.add(data + " selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Select the Menus without mouse over
	public String selectMenusByXpath(String Value, String data) {
		boolean success = false;
		int size = getSizeByXpath(Value);
		// System.out.println("Size" + size);
		try {
			CommonLogger.log("selectMenusByXpath with Two String Value invoked");
			for (int i = 1; i <= size; i++) {
				String value = getTextByXpath(Value + "[" + i + "]");
				if (value.equalsIgnoreCase(data)) {
					clickByXpath(Value + "[" + i + "]");
					sleep(1000);
					ATUReports
					.add(data + " selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					success = true;
					break;
				}
			}
			if (success == false) {
				ATUReports
				.add(data + " not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectMenusByXpath - Menus Clicked successfully");
		} catch (Exception e) {
			CommonLogger.log("selectMenusByXpath - Menus Click Failed");
			ATUReports.add(data + " selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Select Box Selection with div Tag
	// Value - Size, Value1 - Already present Text,Value2 - Click the Arrow of
	// Select Box, Value3 - data to be selected
	public String selectListWithDivTagByXpath(String Value, String Value1, String Value2, String Value3) {
		scrollingToElementByXpath(Value2);
		int size = getSizeByXpath(Value);
		try {
			CommonLogger.log("selectListWithDivTagByXpath invoked");
			String data = getTextByXpath(Value1).trim();
			if (!data.equalsIgnoreCase(Value3)) {
				if (clickByXpath(Value2)) {
					for (int i = 1; i <= size; i++) {
						String value = getTextByXpath(Value + "[" + (i) + "]");
						if (value.equalsIgnoreCase(Value3)) {
							clickByXpath(Value + "[" + (i) + "]");
							ATUReports.add("Option selected", Value3, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
							break;
						}
					}
				}
			} else {
				ATUReports.add("Option selected", Value3, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectListWithDivTagByXpath - Option Selected");
		} catch (Exception e) {
			CommonLogger.log("selectListWithDivTagByXpath - Option selection Failed in Exception Block");
			ATUReports.add("Option selection failed", Value3, LogAs.FAILED,
					new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Select the Table Value by validating on value which is passed from Excel.
	// Value - Locator, xpathValue - To click the particular item, data - Value
	// to be selected to verify and click
	public String selectTableWithValue(String Value, String xpathValue, String xpathValue1, String data) {
		boolean success = false;
		int size = getSizeByXpath(Value);
		// System.out.println("Size" + size);
		try {
			CommonLogger.log("selectTableWithValue invoked");
			for (int i = 1; i <= size; i++) {
				String table = getTextByXpath(Value + "[" + (i) + "]" + xpathValue);
				// System.out.println("Table" + table);
				if (table.equalsIgnoreCase(data)) {
					clickByXpath(Value + "[" + (i) + "]" + xpathValue1);
					ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					success = true;
					break;
				}
			}
			if (success == false) {
				ATUReports.add("Value not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectTableWithValue - Value Selected");
		} catch (Exception e) {
			CommonLogger.log("selectTableWithValue - Value selection Failed in Exception Block");
			ATUReports.add("Value selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}
	
	// Select the Table Value by validating on value which is passed from Excel.
	// Value - Locator, xpathValue - To click the particular item, data - Value
	// to be selected to verify and click
	public String selectAndVerifyTableWithValue(String Value, String xpathValue, String xpathValue1,String verifyVal,String data) {
		boolean success = false;
		int size = getSizeByXpath(Value);
		// System.out.println("Size" + size);
		try {
			CommonLogger.log("selectAndVerifyTableWithValue invoked");
			for (int i = 1; i <= size; i++) {
				String table = getTextByXpath(Value + "[" + (i) + "]" + xpathValue);
				// System.out.println("Table" + table);
				if (table.equalsIgnoreCase(data)) {
					if(getTextByXpath(Value + "[" + (i) + "]" + xpathValue1).trim().contains(verifyVal))
					clickByXpath(Value + "[" + (i) + "]" + xpathValue1);
					ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					success = true;
					break;
				}
			}
			if (success == false) {
				ATUReports.add("Value not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectAndVerifyTableWithValue - Value Selected");
		} catch (Exception e) {
			CommonLogger.log("selectAndVerifyTableWithValue - Value selection Failed in Exception Block");
			ATUReports.add("Value selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Select Radio Button with value check
	// Value- Locator of the Text , Value1 - Locator of the Radio Button ,
	// Value2 - Value to be selected for Verification
	public String selectRadioButton(String Value, String Value1, String Value2) {
		try {
			CommonLogger.log("selectRadioButton invoked");
			int size = getSizeByXpath(Value);
			for (int i = 1; i <= size; i++) {
				String data = getTextByXpath(Value + "[" + (i) + "]");
				if (data.equals(Value2)) {
					clickByXpath(Value1 + "[" + (i) + "]");
					ATUReports
					.add("Value selected", Value2, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				}
			}
			CommonLogger.log("selectRadioButton - Value Selected");
		} catch (Exception e) {
			CommonLogger.log("selectRadioButton - Value selection Failed in Exception Block");
			ATUReports.add("Value click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Select Radio Button with value check
	// Value- Locator of the Text , Value1 - Locator of the Radio Button ,
	// Value2 - Value to be selected for Verification,xpathValue - Xpath value
	public String selectRadioButtonWithXpath(String Value, String Value1, String xpathValue, String Value2) {
		try {
			CommonLogger.log("selectRadioButtonWithXpath invoked");
			int size = getSizeByXpath(Value);
			for (int i = 1; i <= size; i++) {
				String data = getTextByXpath(Value + "[" + (i) + "]" + xpathValue);
				if (data.equals(Value2)) {
					clickByXpath(Value1 + "[" + (i) + "]" + xpathValue);
					ATUReports
					.add("Value selected", Value2, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				}
			}
			CommonLogger.log("selectRadioButtonWithXpath - Value Selected");
		} catch (Exception e) {
			CommonLogger.log("selectRadioButtonWithXpath - Value selection Failed in Exception Block");
			ATUReports.add("Value click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}
	
	// Select Radio Button with value check
	// Value- Locator of the Text , Value1 - Value to be selected for Verification,xpathValue - Xpath value
	public String selectRadioBtnWithXpath(String Value, String xpathValue, String Value1) {
		try {
			CommonLogger.log("selectRadioButtonWithXpath invoked");
			int size = getSizeByXpath(Value);
			for (int i = 1; i <= size; i++) {
				String data = getTextByXpath(Value + "[" + (i) + "]" + xpathValue);
				if (data.equals(Value1)) {
					clickByXpath(Value + "[" + (i) + "]" + xpathValue);
					ATUReports
					.add("Value selected", Value1, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				}
			}
			CommonLogger.log("selectRadioButtonWithXpath - Value Selected");
		} catch (Exception e) {
			CommonLogger.log("selectRadioButtonWithXpath - Value selection Failed in Exception Block");
			ATUReports.add("Value click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}
	
	public String selectCheckBoxAndButtonByXpath(String Value,String data,String xpathValue,
			String attrType,String attrText,String Value1) {
	
 		int size = getSizeByXpath(Value);
//		 System.out.println(size);
		try {
			CommonLogger.log("selectCheckBoxAndButtonByXpath invoked");
			for (int i = 1; i <= size; i++) {
				String Text = getTextByXpath(Value + "[" + i + "]");
//				System.out.println("Text" + Text);
				if (Text.equalsIgnoreCase(data)) {
//					System.out.println("Entered");
					String val = getAttrTextByXpath(Value + "[" + i + "]" + xpathValue, attrType);
//					System.out.println("Attr val " + val);
					if (val.equals(attrText)) {
//						System.out.println("2 Entered");
						clickByXpath(Value1);
					} 
					else {
						clickByXpath(Value + "[" + i + "]" + xpathValue);
						clickByXpath(Value1);
					}
					
					 ATUReports.add("Button clicked", data, LogAs.PASSED, new
					 CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					break;
				}
			}
		} catch (Exception e) {
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}
	
	

	// Select Radio Button with value check
	// Value- Locator of the Text , Value1 - Locator of the Radio Button ,
	// Value2 - Value to be selected for Verification,xpathValue - Xpath value
	public String selectRadioButtonXpathSelection(String Value, String Value1, String xpathValue, String Value2) {
		try {
			CommonLogger.log("selectRadioButtonXpathSelection invoked");
			int size = getSizeByXpath(Value);
			for (int i = 1; i <= size; i++) {
				String data = getTextByXpath(Value + "[" + (i) + "]");
				if (data.equals(Value2)) {
					clickByXpath(Value1 + "[" + (i) + "]" + xpathValue);
					ATUReports.add("Value selected", Value2, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					break;
				}
			}

			CommonLogger.log("selectRadioButtonXpathSelection - Value selected");
		} catch (Exception e) {
			CommonLogger.log("selectRadioButtonXpathSelection - Value selection Failed in Exception Block");
			ATUReports.add("Value click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}
	public String selectRadioButtonXpathSelectionNew(String Value, String Value1, String xpathValue, String data) {
		try {
			CommonLogger.log("selectRadioButtonXpathSelection invoked");
			int size = getSizeByXpath(Value);
			for (int i = 1; i <= size; i++) {
				String data1 = getTextByXpath(Value1 + "[" + (i) + "]");
				if (data1.equals(data)) {
					clickByXpath(xpathValue + "[" + (i) + "]");
					ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					break;
				}
			}

			CommonLogger.log("selectRadioButtonXpathSelection - Value selected");
		} catch (Exception e) {
			CommonLogger.log("selectRadioButtonXpathSelection - Value selection Failed in Exception Block");
			ATUReports.add("Value click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	
	// Select Check Box with value check
	// Value- Locator of the Text , Value1 - Locator of the Radio Button ,
	// Value2 - Value to be selected for Verification,xpathValue - Xpath value
	public String selectCheckBoxXpathSelection(String Value, String Value1,
			String xpathValue, String Value2,String AttrType , String attrValue) {
		try {
			CommonLogger.log("selectRadioButtonXpathSelection invoked");
			int size = getSizeByXpath(Value);
//			System.out.println(size);
			for (int i = 1; i <= size; i++) {
				String data = getTextByXpath(Value + "[" + (i) + "]");
//				System.out.println(data);
				if (data.equals(Value2)) {
					String attrVal= getAttrTextByXpath(Value1 + "[" + (i) + "]" + xpathValue, AttrType);
//					System.out.println(attrVal);
					if(attrVal.equalsIgnoreCase(attrValue)){
						ATUReports.add("Value selected", Value2, LogAs.PASSED,new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					}
					else{
						clickByXpath(Value1 + "[" + (i) + "]" + xpathValue);
						ATUReports.add("Value selected", Value2, LogAs.PASSED,new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					}
				}
			}

			CommonLogger.log("selectRadioButtonXpathSelection - Value selected");
		} catch (Exception e) {
			CommonLogger.log("selectRadioButtonXpathSelection - Value selection Failed in Exception Block");
			ATUReports.add("Value click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value;
	}

	// Verify Text by getting the Text from Excel
	public String getAndVerifyText(String Value, String data, String Value1) {
		try {
			CommonLogger.log("getAndVerifyText invoked");
			String Text = getTextByXpath(Value + data + Value1);
			if (Text.equalsIgnoreCase(data)) {
				ATUReports.add("Text verified ", "", data, Text, LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Text not verified", "", data, Text, LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("getAndVerifyText - Text Verifed");
		} catch (Exception e) {
			CommonLogger.log("getAndVerifyText - Text Verification Failed in Exception Block");
			ATUReports.add("Text verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// Select List in Loop by clicking the arrow in list box
	public String selectListInLoopByXpath(String Value, String Value1, String Locator, String data) {
		try {
			CommonLogger.log("selectListInLoopByXpath invoked");
			if (getTextByXpath(Value1).equals(data)) {
				ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				int size = getSizeByXpath(Value);
				clickByXpath(Value1);
				for (int i = 1; i <= size; i++) {
					String value = getTextByXpath(Value + "[" + i + "]").trim();
					if (value.equalsIgnoreCase(data)) {
						clickByXpath(Value + "[" + i + "]");
						ATUReports.add("Option selected", data, LogAs.PASSED, new CaptureScreen(
								ScreenshotOf.BROWSER_PAGE));
						break;
					} else {
						driver.findElement(By.className(Locator)).click();
					}
				}
				CommonLogger.log("selectListInLoopByXpath - Option Selected");
			}
		} catch (Exception e) {
			CommonLogger.log("selectListInLoopByXpath - Option Selection Failed iin Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// To get the Table Size List Count
	public String getTableSizeListCount(String Value, String Count) {
		int size = getSizeByXpath(Value);
		try {
			CommonLogger.log("getTableSizeListCount invoked");
			if (size == Integer.parseInt(Count)) {
				ATUReports.add("Count Matched", "", Count + "", size + "", LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Count not Matched", "", Count + "", size + "", LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}

			CommonLogger.log("getTableSizeListCount - Count Matched");
		} catch (Exception e) {
			CommonLogger.log("getTableSizeListCount - Count Match Failed in Exception Block");
			ATUReports.add("Count Match failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// To check the elements enabled
	public String IsElementsEnabledById(String Id, String data) {
		try {
			CommonLogger.log("IsElementsEnabledById invoked");
			if (IsEnabledById(Id))
				ATUReports.add("Element Enabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Element not Enabled", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsEnabledById - Elements Enabled");
		} catch (Exception e) {
			CommonLogger.log("IsElementsEnabledById - Elements Enable Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Id;
	}

	public String IsElementsEnabledByName(String Name, String data) {
		try {
			CommonLogger.log("IsElementsEnabledByName invoked");
			if (IsEnabledByName(Name))
				ATUReports.add("Element Enabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Element not Enabled", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsEnabledByName - Elements Enabled");
		} catch (Exception e) {
			CommonLogger.log("IsElementsEnabledByName - Elements Enable Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Name;
	}

	public String IsElementsEnabledByClassName(String ClassName, String data) {
		try {
			CommonLogger.log("IsElementsEnabledByClassName invoked");
			if (IsEnabledByClassName(ClassName))
				ATUReports.add("Element Enabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Element not Enabled", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsEnabledByClassName - Elements Enabled");
		} catch (Exception e) {
			CommonLogger.log("IsElementsEnabledByClassName - Elements Enable Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return ClassName;
	}

	public String IsElementsEnabledByXpath(String Xpath, String data) {
		try {
			CommonLogger.log("IsElementsEnabledByXpath invoked");
			if (IsEnabledByXpath(Xpath))
				ATUReports.add("Element Enabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Element not Enabled", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsEnabledByXpath - Elements Enabled");
		} catch (Exception e) {
			CommonLogger.log("IsElementsEnabledByXpath - Elements Enable Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Xpath;
	}

	// To check the elements displayed
	public String IsElementsDisplayedById(String Id, String data) {
		try {
			CommonLogger.log("IsElementsDisplayedById invoked");
			if (IsDisplayedById(Id))
				ATUReports.add("Element Displayed", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Element not Displayed", data, LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsDisplayedById - Elements Displayed");
		} catch (Exception e) {
			CommonLogger.log("IsElementsDisplayedById - Elements Display Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Id;
	}

	public String IsNotElementsDisplayedById(String Id, String data) {
		try {
			CommonLogger.log("IsNotElementsDisplayedById invoked");
			if (IsDisplayedById(Id)){
				ATUReports.add("Element Displayed", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			else{
				ATUReports.add("Element not Displayed", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
		} catch (Exception e) {
			CommonLogger.log("IsNotElementsDisplayedById - Elements Display Verification Passed in Exception Block");
			ATUReports.add("Element Not Displayed", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Id;
	}

	public String IsElementsDisplayedByName(String Name, String data) {
		try {
			CommonLogger.log("IsElementsDisplayedByName invoked");
			if (IsDisplayedByName(Name))
				ATUReports.add("Element Displayed", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Element not Displayed", data, LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsDisplayedByName - Elements Displayed");
		} catch (Exception e) {
			CommonLogger.log("IsElementsDisplayedByName - Elements Display Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Name;
	}

	public String IsElementsDisplayedByClassName(String ClassName, String data) {
		try {
			CommonLogger.log("IsElementsDisplayedByClassName invoked");
			if (IsDisplayedByClassName(ClassName))
				ATUReports.add("Element Displayed", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Element not Displayed", data, LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsDisplayedByClassName - Elements Displayed");
		} catch (Exception e) {
			CommonLogger
			.log("IsElementsDisplayedByClassName - Elements Display Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return ClassName;
	}

	public String IsElementsDisplayedByXpath(String Xpath, String data) {
		try {
			CommonLogger.log("IsElementsDisplayedByXpath invoked");
			if (IsDisplayedByXpath(Xpath))
				ATUReports.add("Element Displayed", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Element not Displayed", data, LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsDisplayedByXpath - Elements Displayed");
		} catch (Exception e) {
			CommonLogger.log("IsElementsDisplayedByXpath - Elements Display Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Xpath;
	}

	public BasePage closeBrowser() {
		try {
			CommonLogger.log("closeBrowser invoked");
			close();
			ATUReports.add("Browser closed", LogAs.INFO, new CaptureScreen(ScreenshotOf.DESKTOP));
			CommonLogger.log("closeBrowser - Browser Closed");
		} catch (Exception e) {
			CommonLogger.log("closeBrowser - Browser Close Failed in Exception Block");
			ATUReports.add("Launch Browser failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return this;
	}

	// Select the Table Value by validating on value which is passed from Excel.
	// Value - Locator, xpathValue - To click the particular item, data - Value
	// to be selected to verify and click,
	// xpathValue1 - To click the specific radio button,xpathValu2 - Xpath Value
	// To enter Text in Table ,Text - Text to be entered in text box
	public String selectTableWithEnterValue(String Value, String xpathValue, String xpathValue1, String xpathValue2,
			String data, String Text) {
		boolean success = false;
		int size = getSizeByXpath(Value);
		// System.out.println("Size" + size);
		try {
			CommonLogger.log("selectTableWithEnterValue invoked");
			for (int i = 1; i <= size; i++) {
				String table = getTextByXpath(Value + "[" + (i) + "]" + xpathValue);
				// System.out.println("Table" + table);
				if (table.equalsIgnoreCase(data)) {
					clickByXpathUsingAction(Value + "[" + (i) + "]" + xpathValue1);
					enterTextByXpath(Value + "[" + (i) + "]" + xpathValue2, Text);
					ATUReports.add("Value selected and Text Entered", data, Text, LogAs.PASSED, new CaptureScreen(
							ScreenshotOf.BROWSER_PAGE));
					success = true;
					break;
				}
			}
			if (success == false) {
				ATUReports.add("Value not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectTableWithEnterValue - Value Selected");
		} catch (Exception e) {
			CommonLogger.log("selectTableWithEnterValue - Value selection Failed in Exception Block");
			ATUReports.add("Value selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}


	// Select the Table Value by validating on value which is passed from Excel.
	// Value - Locator, xpathValue - To click the particular item, data - Value
	// to be selected to verify and click,
	// xpathValue1 - To click the specific radio button, Text - Text to be
	// entered in text box
	public String selectTableWithOnlyEnterValue(String Value, String xpathValue, String xpathValue1, String data,
			String Text) {
		boolean success = false;
		int size = getSizeByXpath(Value);
		// System.out.println("Size" + size);
		try {
			CommonLogger.log("selectTableWithEnterValue invoked");
			for (int i = 1; i <= size; i++) {
				String table = getTextByXpath(Value + "[" + (i) + "]" + xpathValue);
				// System.out.println("Table" + table);
				if (table.equalsIgnoreCase(data)) {
					enterTextByXpath(Value + "[" + (i) + "]" + xpathValue1, Text);
					ATUReports.add("Value selected and Text Entered", data, Text, LogAs.PASSED, new CaptureScreen(
							ScreenshotOf.BROWSER_PAGE));
					success = true;
					break;
				}
			}
			if (success == false) {
				ATUReports.add("Value not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectTableWithEnterValue - Value Selected");
		} catch (Exception e) {
			CommonLogger.log("selectTableWithEnterValue - Value selection Failed in Exception Block");
			ATUReports.add("Value selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String clickByID(String Value, String data) {
		try {
			CommonLogger.log("clickByID invoked");
			if (clickById(Value)) {
				ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("clickByID - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickByID - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String clickByName(String Value, String data) {
		try {
			CommonLogger.log("clickByName invoked");
			if (clickByName(Value)) {
				ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("clickByName - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickByName - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String clickByClassName(String Value, String data) {
		try {
			CommonLogger.log("clickByClassName invoked");
			if (clickByClassName(Value)) {
				ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("clickByClassName - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickByClassName - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}
	

	public String clickByXpath1(String Value, String data) {
		try {
			CommonLogger.log("clickByXpath invoked");
			if (clickByXpath(Value)) {
				ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("clickByXpath - Button Clicked successfully");
		} catch (Exception e) {
			CommonLogger.log("clickByXpath - Button click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String verfiyClickByID(String Value, String Value1, String data) {
		try {
			CommonLogger.log("verfiyClickByID invoked");
			String Text = getTextById(Value1);
			if (Text.equals(Value1)) {
				clickById(Value);
				ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verfiyClickByID - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("verfiyClickByID - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String verfiyClickByName(String Value, String Value1, String data) {
		try {
			CommonLogger.log("verfiyClickByName invoked");
			String Text = getTextByName(Value1);
			if (Text.equals(Value1)) {
				clickByName(Value);
				ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verfiyClickByName - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("verfiyClickByName - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String verfiyClickByClassName(String Value, String Value1, String data) {
		try {
			CommonLogger.log("verfiyClickByClassName invoked");
			String Text = getTextByClassName(Value1);
			if (Text.equals(Value1)) {
				clickByClassName(Value);
				ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verfiyClickByClassName - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("verfiyClickByClassName - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String verfiyClickByXpath(String Value, String Value1, String data) {
		try {
			CommonLogger.log("verfiyClickByXpath invoked");
			String Text = getTextByXpath(Value1);
			if (Text.equals(Value1)) {
				clickByXpath(Value);
				ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Button not clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verfiyClickByXpath - Button Clicked successfully");
		} catch (Exception e) {
			CommonLogger.log("verfiyClickByXpath - Button click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String tspLogin(String Login, String userNameLocValue, String userName, String passwordLocValue,
			String password, String submitLocValue, String submit) {
		try {
			CommonLogger.log("tspLogin invoked");
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Login)));
			String value = getTextByXpath(Login);
			if (value.equals("Login")) {
				clickByXpath(Login);
				ATUReports.add("Login button clicked", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Login button not clicked", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}

			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(userNameLocValue)));
			driver.findElement(By.id(userNameLocValue)).clear();
			driver.findElement(By.id(userNameLocValue)).sendKeys(userName);
			value = driver.findElement(By.id(userNameLocValue)).getAttribute("value");
			ATUReports.add("Text entered", userName, "", value, LogAs.PASSED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));

			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(passwordLocValue)));
			driver.findElement(By.id(passwordLocValue)).clear();
			driver.findElement(By.id(passwordLocValue)).sendKeys(password);
			value = driver.findElement(By.id(passwordLocValue)).getAttribute("value");
			ATUReports.add("Text entered", password, "", value, LogAs.PASSED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));

			wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(submitLocValue)));
			driver.findElement(By.name(submitLocValue)).click();
			ATUReports.add("Button clicked", submit, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

		} catch (Exception e) {
			CommonLogger.log("tspLogin Failed in Exception");
			ATUReports.add("Unable to enter Text", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}

		return userNameLocValue;
	}

	public String ipayLogin(String instIDLocValue, String instID, String userIDLocValue, String userID,
			String passwordLocValue, String password, String captchaLocValue, String captcha, String submitLocValue
			) {
		try {

			CommonLogger.log("ipayLogin selected");
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(instIDLocValue)));
			driver.findElement(By.id(instIDLocValue)).clear();
			driver.findElement(By.id(instIDLocValue)).sendKeys(instID);
			String value = driver.findElement(By.id(instIDLocValue)).getAttribute("value");
			ATUReports.add("Text entered", instID, "", value, LogAs.PASSED,
					new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(userIDLocValue)));
			driver.findElement(By.id(userIDLocValue)).clear();
			driver.findElement(By.id(userIDLocValue)).sendKeys(userID);
			value = driver.findElement(By.id(userIDLocValue)).getAttribute("value");
			ATUReports.add("Text entered", userID, "", value, LogAs.PASSED,
					new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(passwordLocValue)));
			driver.findElement(By.id(passwordLocValue)).clear();
			driver.findElement(By.id(passwordLocValue)).sendKeys(password);
			value = driver.findElement(By.id(passwordLocValue)).getAttribute("value");
			ATUReports.add("Text entered", password, "", value, LogAs.PASSED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));

			/*wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(captchaLocValue)));
			driver.findElement(By.id(captchaLocValue)).clear();
			driver.findElement(By.id(captchaLocValue)).sendKeys(captcha);
			value = driver.findElement(By.id(captchaLocValue)).getAttribute("value");
			ATUReports.add("Text entered", captcha, "", value, LogAs.PASSED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));*/

			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(submitLocValue)));
			clickButtonWithJSExecutorById(submitLocValue,"Submit");
			//ATUReports.add("Button clicked", submitLocValue, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

		} catch (Exception e) {
			CommonLogger.log("ipayLogin Failed in Exception");
			ATUReports.add("Unable to enter Text", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}

		return instIDLocValue;
	}
	
	
//	MrchLogin Added By Jay
	public String ipayLogin1(String instIDLocValue, String instID,String MrchIDLocValue, String MrchID, String MrchuserIDLocValue, String MrchuserID,
			String passwordLocValue, String password, String captchaLocValue, String captcha, String submitLocValue,
			String submit) {
		try {

			CommonLogger.log("ipayLogin selected");
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(instIDLocValue)));
			driver.findElement(By.id(instIDLocValue)).clear();
			driver.findElement(By.id(instIDLocValue)).sendKeys(instID);
			String value = driver.findElement(By.id(instIDLocValue)).getAttribute("value");
			ATUReports.add("Text entered", instID, "", value, LogAs.PASSED,
					new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(MrchIDLocValue)));
			driver.findElement(By.id(MrchIDLocValue)).clear();
			driver.findElement(By.id(MrchIDLocValue)).sendKeys(MrchID);
			value = driver.findElement(By.id(MrchIDLocValue)).getAttribute("value");
			ATUReports.add("Text entered", MrchID, "", value, LogAs.PASSED,
					new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(MrchuserIDLocValue)));
			driver.findElement(By.id(MrchuserIDLocValue)).clear();
			driver.findElement(By.id(MrchuserIDLocValue)).sendKeys(MrchuserID);
			value = driver.findElement(By.id(MrchuserIDLocValue)).getAttribute("value");
			ATUReports.add("Text entered", MrchuserID, "", value, LogAs.PASSED,
					new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(passwordLocValue)));
			driver.findElement(By.id(passwordLocValue)).clear();
			driver.findElement(By.id(passwordLocValue)).sendKeys(password);
			value = driver.findElement(By.id(passwordLocValue)).getAttribute("value");
			ATUReports.add("Text entered", password, "", value, LogAs.PASSED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));

			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(captchaLocValue)));
			driver.findElement(By.id(captchaLocValue)).clear();
			driver.findElement(By.id(captchaLocValue)).sendKeys(captcha);
			value = driver.findElement(By.id(captchaLocValue)).getAttribute("value");
			ATUReports.add("Text entered", captcha, "", value, LogAs.PASSED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));

		//	wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(submitLocValue)));
			driver.findElement(By.id(submitLocValue)).click();
			ATUReports.add("Button clicked", submit, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

		} catch (Exception e) {
			CommonLogger.log("ipayLogin Failed in Exception");
			ATUReports.add("Unable to enter Text", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}

		return instIDLocValue;
	}

//	Admin Login Added By Jay
	
	public String ipayLogin2(String instIDLocValue, String instID, String userIDLocValue, String userID,
			String passwordLocValue, String password, String captchaLocValue, String captcha, String submitLocValue,
			String submit) {
		try {

			CommonLogger.log("ipayLogin selected");
			//admin credentials
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(instIDLocValue)));
			driver.findElement(By.id("adminuserId")).sendKeys(userID);
			driver.findElement(By.id("adminpassword")).sendKeys(password);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(submitLocValue)));
			clickButtonWithJSExecutorById(submitLocValue,"Submit");
			
			//WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(instIDLocValue)));
			driver.findElement(By.id(instIDLocValue)).clear();
			driver.findElement(By.id(instIDLocValue)).sendKeys(instID);
			String value = driver.findElement(By.id(instIDLocValue)).getAttribute("value");
			ATUReports.add("Text entered", instID, "", value, LogAs.PASSED,
					new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(userIDLocValue)));
			driver.findElement(By.id(userIDLocValue)).clear();
			driver.findElement(By.id(userIDLocValue)).sendKeys(userID);
			value = driver.findElement(By.id(userIDLocValue)).getAttribute("value");
			ATUReports.add("Text entered", userID, "", value, LogAs.PASSED,
					new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(passwordLocValue)));
			driver.findElement(By.id(passwordLocValue)).clear();
			driver.findElement(By.id(passwordLocValue)).sendKeys(password);
			value = driver.findElement(By.id(passwordLocValue)).getAttribute("value");
			ATUReports.add("Text entered", password, "", value, LogAs.PASSED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));

			/*wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(captchaLocValue)));
			driver.findElement(By.id(captchaLocValue)).clear();
			driver.findElement(By.id(captchaLocValue)).sendKeys(captcha);
			value = driver.findElement(By.id(captchaLocValue)).getAttribute("value");
			ATUReports.add("Text entered", captcha, "", value, LogAs.PASSED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));*/

			wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(submitLocValue)));
			clickButtonWithJSExecutorById(submitLocValue,"Submit");
			ATUReports.add("Button clicked", submitLocValue, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));


		} catch (Exception e) {
			CommonLogger.log("ipayLogin Failed in Exception");
			ATUReports.add("Unable to enter Text", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}

		return instIDLocValue;
	}
	// To check the elements enabled
	public String IsElementsDisabledById(String Id, String data) {
		try {
			CommonLogger.log("IsElementsDisabledById invoked");
			if (verifyAttrTextById(Id, "readonly", "true"))
				ATUReports.add("Element Disabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports
				.add("Element not Disabled", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsDisabledById - Elements Disabled");
		} catch (Exception e) {
			CommonLogger.log("IsElementsDisabledById - Elements Enable Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Id;
	}

	public String IsElementsDisabledByName(String Name, String data) {
		try {
			CommonLogger.log("IsElementsDisabledByName invoked");
			if (verifyAttrTextByName(Name, "readonly", "true"))
				ATUReports.add("Element Disabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports
				.add("Element not Disabled", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsDisabledByName - Elements Disabled");
		} catch (Exception e) {
			CommonLogger.log("IsElementsDisabledByName - Elements Enable Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Name;
	}

	public String IsElementsDisabledByClassName(String ClassName, String data) {
		try {
			CommonLogger.log("IsElementsDisabledByClassName invoked");
			if (verifyAttrTextByClassName(ClassName, "readonly", "true"))
				ATUReports.add("Element Disabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports
				.add("Element not Disabled", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsDisabledByClassName - Elements Disabled");
		} catch (Exception e) {
			CommonLogger.log("IsElementsDisabledByClassName - Elements Enable Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return ClassName;
	}

	public String IsElementsDisabledByXpath(String Xpath, String data) {
		try {
			CommonLogger.log("IsElementsDisabledByXpath invoked");
			if (verifyAttrTextByXpath(Xpath, "readonly", "true"))
				ATUReports.add("Element Disabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports
				.add("Element not Disabled", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsDisabledByXpath - Elements Disabled");
		} catch (Exception e) {
			CommonLogger.log("IsElementsDisabledByXpath - Elements Enable Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Xpath;
	}

	public String verifyEnterTextById(String value, String data) {
		try {
			CommonLogger.log("verifyEnterTextById invoked");
			if (enterTextById(value, data))
				ATUReports.add("Text not Entered", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Text entered", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("verifyEnterTextById - completed");
		} catch (Exception e) {
			CommonLogger.log("verifyEnterTextById - Text Entry Failed in Exception Block");
			ATUReports.add("Text entry failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return value;
	}

	public String verifyTextUsingSplitByIdBase(String value, String split, String data) {
		try {
			CommonLogger.log("verifyTextUsingSplit invoked");
			String splitText = getTextById(value);
			String[] Text = splitText.split(split);
			if (Text[0].equals(data)) {
				ATUReports.add("Text matched", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else
				ATUReports.add("Text not matched", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("verifyTextUsingSplit - completed");
		} catch (Exception e) {
			CommonLogger.log("verifyTextUsingSplit - Text match check Failed in Exception Block");
			CommonLogger.errorLog(e);
		}
		return value;
	}

	public String MultipleSelectionRadioButtonByXpath(String Value1, String Value2) {
		try {
			CommonLogger.log("MultipleSelectionRadioButtonByXpath invoked");

			clickByXpathUsingAction(Value1);
			if (clickByXpathUsingAction(Value2)) {
				ATUReports.add("Multiple Selection Not Allowed", LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			} else
				ATUReports
				.add("Multiple Selection Allowed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("MultipleSelectionRadioButtonByXpath - Multiple Buttons Clicked");
		} catch (Exception e) {
			CommonLogger.log("MultipleSelectionRadioButtonByXpath - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Value1;
	}

	public String clearTextByIdBase(String value) {
		try {
			CommonLogger.log("clearTextByIdBase invoked");
			if (clearTextById(value))
				ATUReports.add("Text Cleared", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Text not Cleared", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("clearTextByIdBase - Text cleared successfully");
		} catch (Exception e) {
			CommonLogger.log("clearTextByIdBase - Text clear Failed in Exception Block");
			ATUReports.add("Text clear failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return value;
	}

	public String clearTextByNameBase(String value) {
		try {
			CommonLogger.log("clearTextByNameBase invoked");
			if (clearTextByName(value))
				ATUReports.add("Text Cleared", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Text not Cleared", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("clearTextByNameBase - Text cleared successfully");
		} catch (Exception e) {
			CommonLogger.log("clearTextByNameBase - Text clear Failed in Exception Block");
			ATUReports.add("Text clear failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return value;
	}

	public String clearTextByXpathBase(String value) {
		try {
			CommonLogger.log("clearTextByXpathBase invoked");
			if (clearTextByXpath(value))
				ATUReports.add("Text Cleared", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Text not Cleared", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("clearTextByXpathBase - Text cleared successfully");
		} catch (Exception e) {
			CommonLogger.log("clearTextByXpathBase - Text clear Failed in Exception Block");
			ATUReports.add("Text clear failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return value;
	}

	public List executeGivenQueryInDBforTSP(String serverIP, String port, String dbName, String username,
			String password, String Query) {

		try {
			Connection con = null;
			ResultSet rs = null;
			Statement stmt = null;
			List<String> Val = new ArrayList();
			// serverIP = "10.44.75.12";
			// port="3306";

			try {

				Class.forName("com.mysql.jdbc.Driver");
				con = DriverManager.getConnection("jdbc:mysql://" + serverIP + ":" + port + "/" + dbName, username,
						password);

				// jdbc:mysql://localhost:3306/sonoo
				stmt = con.createStatement();
				try {
					rs = stmt.executeQuery(Query);
				} catch (Exception e) {

				}

				while (rs.next()) {
					Val.add(rs.getString(1));
					Val.add(rs.getString(2));
					Val.add(rs.getString(3));
					Val.add(rs.getString(4));
					Val.add(rs.getString(5));
				}

				stmt.close();
				stmt = null;
				rs.close();

				// Close the local connection
				if ((con != null)) {
					con.close();
					con = null;
				}
				CommonLogger.log("Query executed in db");
			} catch (Exception ex) {
				CommonLogger.log("Query execution failed in Exception Block");
				ex.printStackTrace();
			}
			/*
			 * if (Val.equals(Text)) { a = true; }
			 */
			return Val;
		} catch (Exception e) {
			return null;
		}

	}

	public LocalDateTime localDateTime() {
		DateTimeFormatter dtf;
		LocalDateTime now = null;
		try {
			dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:0");
			now = LocalDateTime.now();
			ATUReports.add("LocalTime Fetched", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			CommonLogger.errorLog(e);
			ATUReports.add("LocalTime Not Fetched", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}

		return now;
	}

	public LocalDateTime verifyTextByXpathBaseforMC(String Value, String data) {
		DateTimeFormatter dtf;
		LocalDateTime now = null;
		try {
			CommonLogger.log("verifyTextByXpathBase invoked");
			if (verifyTextByXpath(Value, data)) {
				dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:0");

				now = LocalDateTime.now();

				ATUReports.add("Text verified ", "", data, getTextByXpath(Value), LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));

			} else {
				ATUReports.add("Text not verified", "", data, getTextByXpath(Value), LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyTextByXpathBase - Text Verifed");
		} catch (Exception e) {
			CommonLogger.log("verifyTextByXpathBase - Text Verification Failed in Exception Block");
			ATUReports.add("Text verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return now;
	}

	public void date() {
		try {
			Calendar newcalendar = Calendar.getInstance();
			DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			// System.out.println(df.parse(df.format(newcalendar.getTime())));
			Date currentDate = df.parse(df.format(newcalendar.getTime()));
			String dbDate = "2017-06-15 10:52:03.0";
			Date old = df.parse(dbDate);
			System.out.println(old.equals(currentDate));
		} catch (Exception e) {
			// TODO: handle exception
		}

	}

	// close expired session
	public String Expiredsession(String Xpath, String Xpath2, String Xpath3) {
		try {
			CommonLogger.log("Expiredsession invoked");
			if (IsDisplayedByXpath(Xpath)) {
				clickByXpath(Xpath2);
				ATUReports.add("Element Displayed", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				clickByXpath(Xpath3);
				ATUReports.add("Element not Displayed", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				CommonLogger.log("IsElementsDisplayedByXpath - Elements Displayed");
			}
		} catch (Exception e) {
			CommonLogger.log("IsElementsDisplayedByXpath - Elements Display Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Xpath;
	}

	// Value - Locator, xpathValue - To click the particular item, data - Value
	// to be selected to verify and click
	public String selectTableWithRadioBtn(String Value, String xpathValue, String xpathValue1, String xpathValue2,
			String data, String Text) {
		boolean success = false;
		int size = getSizeByXpath(Value);
		// System.out.println("Size" + size);
		try {
			CommonLogger.log("selectTableWithValue invoked");
			for (int i = 1; i <= size; i++) {
				String table = getTextByXpath(Value + "[" + (i) + "]" + xpathValue);
				// System.out.println("Table" + table);
				if (table.equalsIgnoreCase(data)) {
					if (Text.equalsIgnoreCase("Yes")) {
						clickByXpath(Value + "[" + (i) + "]" + xpathValue1);
						ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(
								ScreenshotOf.BROWSER_PAGE));
						break;
					} else if (Text.equalsIgnoreCase("No")) {
						clickByXpath(Value + "[" + (i) + "]" + xpathValue2);

						ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(
								ScreenshotOf.BROWSER_PAGE));
						break;
					}
					success = true;
					break;
				}
			}
			if (success == false) {
				ATUReports.add("Value not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectTableWithValue - Value Selected");
		} catch (Exception e) {
			CommonLogger.log("selectTableWithValue - Value selection Failed in Exception Block");
			ATUReports.add("Value selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String executeGivenQueryInDB(String serverIP, String port, String dbName, String username, String password,
			String Query) {

		try {
			Connection con = null;
			ResultSet rs = null;
			Statement stmt = null;
			String Val = "";
			// serverIP = "10.44.75.12";
			// port="3306";
			try {
				Class.forName("oracle.jdbc.driver.OracleDriver");
				con = DriverManager.getConnection("jdbc:oracle:thin:@" + serverIP + ":" + port + ":" + dbName, ""
						+ username + "", "" + password + "");
				// jdbc:mysql://localhost:3306/sonoo
				stmt = con.createStatement();
				try {
					rs = stmt.executeQuery(Query);
				} catch (Exception e) {

				}
				while (rs.next()) {
					Val = rs.getString(1);
									
				}
				stmt.close();
				stmt = null;
				rs.close();

				// Close the local connection
				if ((con != null)) {
					con.close();
					con = null;
				}
				CommonLogger.log("Query executed in db");
			} catch (Exception ex) {
				CommonLogger.log("Query execution failed in Exception Block");
				ex.printStackTrace();
			}
			/*
			 * if (Val.equals(Text)) { a = true; }
			 */
			return Val;
		} catch (Exception e) {
			return "";
		}

	}

	public String selectVisibleTextForSuccessById(String Value, String data) {
		try {
			CommonLogger.log("selectVisibleTextForSuccessById invoked");
			if (selectVisibleTextById(Value, data)) {
				ATUReports.add(data + " present in the dropdown menu", LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add(data + " not present in the dropdown menu", LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectVisibleTextForSuccessById - Option Selected");
		} catch (Exception e) {
			CommonLogger.log("selectVisibleTextForSuccessById - Option Selection Failed in Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String selectVisibleTextForFailureById(String Value, String data) {
		try {
			CommonLogger.log("selectVisibleTextForFailureById invoked");
			if (selectVisibleTextById(Value, data)) {
				ATUReports.add(data + " present in the dropdown menu", LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add(data + " not present in the dropdown menu", LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectVisibleTextForFailureById - Option Selected");
		} catch (Exception e) {
			CommonLogger.log("selectVisibleTextForFailureById - Option Selection Failed in Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String IsElementsDisplayedByLinkText(String LinkText) {
		try {
			CommonLogger.log("IsElementsDisplayedByLinkText invoked");
			if (IsDisplayedByLinkText(LinkText))
				ATUReports.add("Element Displayed", LinkText, LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Element not Displayed", LinkText, LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsDisplayedByLinkText - Elements Displayed");
		} catch (Exception e) {
			CommonLogger.log("IsElementsDisplayedByLinkText - Elements Display Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return LinkText;
	}

	public String mouseOverByXpathBase(String Value, String data) {
		try {
			CommonLogger.log("mouseOverByXpathBase invoked");
			mouseOverByXpath(Value);
			ATUReports.add("Menu clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			CommonLogger.log("mouseOverByXpathBase - Menu Clicked");
		} catch (Exception e) {
			CommonLogger.log("mouseOverByXpathBase - Menu Click Failed in Exception Block");
			ATUReports.add("Menu click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return data;
	}

	public String clickEnterUsingKeyboard(String Value, String data) {

		try {
			CommonLogger.log("clickEnterbyKeyboard invoked");
			pressEnterByXpath(Value);
			ATUReports.add("Enter clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			CommonLogger.log("clickEnterbyKeyboard - Enter Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickEnterbyKeyboard - Enter Click Failed in Exception Block");
			ATUReports.add("Enter click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return data;
	}

	public String verifyMenuEnabled(String xpath, String xpath1, String xpath2, String xpath3, String attrvalue,
			String data) {
		int size = getSizeByXpath(xpath);
		String value = null;
		try {
			CommonLogger.log("verifyMenuEnabled invoked");
			for (int i = 1; i <= size; i++) {

				value = getTextByXpath(xpath + "[" + (i) + "]" + xpath1);
				if (value.equalsIgnoreCase(data)) {

					String Text = getAttrTextByXpath((xpath + "[" + (i) + "]" + xpath2), attrvalue);

					if (Text.contains("checked")) {
						ATUReports.add("Option Enabled", data, LogAs.PASSED, new CaptureScreen(
								ScreenshotOf.BROWSER_PAGE));
						break;
					} else {
						clickByXpathUsingAction(xpath + "[" + (i) + "]" + xpath3);
						ATUReports.add("Option Enabled", data, LogAs.PASSED, new CaptureScreen(
								ScreenshotOf.BROWSER_PAGE));
						break;
					}
				}
			}

		} catch (Exception e) {
			CommonLogger.log("verifyMenuEnabled - Elements Enable Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return data;
	}

	public String verifyAttrTextBase(String Value, String attvalue, String data) {
		try {
			CommonLogger.log("verifyAttrTextBase invoked");
			String text = getAttrTextByXpath(Value, attvalue);
			if (text.contains("checked")) {
				ATUReports.add("Option selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Option deselected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
		} catch (Exception e) {
			CommonLogger.log("verifyAttrTextBase - Text Match Failed in Exception Block");
			ATUReports.add("Text Verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public void IsNotDisplayedById(String Id, String data) {
		try {
			if (!driver.findElement(By.id(Id)).isDisplayed())
				ATUReports.add("Element not Displayed", data, LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Element Displayed", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("Element not Displayed");
		} catch (Exception e) {
			CommonLogger.log("Element not Present Verification passed in Exception Block");
			;
			ATUReports.add("Element not Displayed", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
	}

	public void IsNotDisplayedByXpath(String Xpath, String data) {
		try {
			if (!driver.findElement(By.xpath(Xpath)).isDisplayed())
				ATUReports.add("Element not Displayed", data, LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Element Displayed", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("Element not Displayed");
		} catch (Exception e) {
			CommonLogger.log("Element not Present Verification passed in Exception Block");
			;
			ATUReports.add("Element not Displayed", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
	}

	public void IsNotDisplayedByLinkText(String LinkText) {
		try {
			if (!driver.findElement(By.linkText(LinkText)).isDisplayed())
				ATUReports.add("Element not Displayed", LinkText, LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Element Displayed", LinkText, LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("Element not Displayed");
		} catch (Exception e) {
			CommonLogger.log("Element not Present Verification passed in Exception Block");
			;
			ATUReports.add("Element not Displayed", LinkText, LogAs.PASSED,
					new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
	}

	public void ActionClickbyXpath(String Xpath, String data) {
		try {
			if (clickByXpathUsingAction(Xpath)) {
				sleep(2000);
				ATUReports.add("Button Clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else
				ATUReports.add("Button not Clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("Element not Displayed");
		} catch (Exception e) {
			CommonLogger.log("Element not Present Verification passed in Exception Block");
			;
			ATUReports.add("Button not Clicked", Xpath, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}

	}

	public String selectTableusingAction(String Value, String xpathValue, String xpathValue1, String data) {
		boolean success = false;
		int size = getSizeByXpath(Value);
		// System.out.println("Size" + size);
		try {
			CommonLogger.log("selectTableWithValue invoked");
			for (int i = 1; i <= size; i++) {
				String table = getTextByXpath(Value + "[" + (i) + "]" + xpathValue);
				// System.out.println("Table" + table);
				if (table.equalsIgnoreCase(data)) {
					clickByXpathUsingAction(Value + "[" + (i) + "]" + xpathValue1);
					ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					success = true;
					break;
				}
			}
			if (success == false) {
				ATUReports.add("Value not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectTableWithValue - Value Selected");
		} catch (Exception e) {
			CommonLogger.log("selectTableWithValue - Value selection Failed in Exception Block");
			ATUReports.add("Value selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public void ActioncheckClickbyXpath(String Xpath, String Xpath1, String data, String attvalue) {
		try {
			// String attvalue="class";
			String text = getAttrTextByXpath(Xpath, attvalue);
			if (text.contains("checked")) {
				sleep(2000);
				ATUReports.add("Button Clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				clickByXpathUsingAction(Xpath1);
				sleep(2000);
				ATUReports.add("Button Clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			}
			CommonLogger.log("Element not Displayed");
		} catch (Exception e) {
			CommonLogger.log("Element not Present Verification passed in Exception Block");
			;
			ATUReports.add("Button not Clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}

	}

	public void verifyCheckBoxSelect(String Xpath1, String data) {
		try {
			if (clickByXpathUsingAction(Xpath1)) {
				sleep(2000);
				ATUReports.add("Button Not Clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			} else
				ATUReports.add("Button Clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("Element not Displayed");
		} catch (Exception e) {
			CommonLogger.log("Element not Present Verification passed in Exception Block");
			;
			ATUReports.add("Button not Clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}

	}

	public String enterTextByIdandTabBase(String value, String data) {
		try {
			CommonLogger.log("enterTextByIdBase invoked");
			if (enterTextByIdTab(value, data))
				ATUReports.add("Text Entered and Tab Clicked", data, LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Text Not Entered and Tab Not Clicked", data, LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("enterTextByIdandTabBase - Text entered successfully");
		} catch (Exception e) {
			CommonLogger.log("enterTextByIdandTabBase - Text Entry Failed in Exception Block");
			ATUReports.add("Text entry failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return value;
	}

	public String enterTabByIdBase(String value) {
		try {
			CommonLogger.log("enterTextByIdBase invoked");
			if (enterTabById(value))
				ATUReports.add("Tab Entered", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Tab Not Entered", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("enterTabById - Tab entered successfully");
		} catch (Exception e) {
			CommonLogger.log("enterTabById - Tab Entry Failed in Exception Block");
			ATUReports.add("Text entry failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return value;
	}

	// Enable and disable functionality
	public String enable_disableradiobutton(String Xpathvalue, String Xpathvalue1, String data) {
		// boolean success = false;

		try {
			CommonLogger.log("enable_disableradiobutton with Three String Value invoked");
			Thread.sleep(1000);
			if (data.equalsIgnoreCase("Yes")) {
				String AttrValue = getAttrTextByXpath(Xpathvalue, "class");
				if (AttrValue.equalsIgnoreCase("checked")) {
					ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				} else {
					clickByXpath(Xpathvalue);
					ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				}
			} else if (data.equalsIgnoreCase("No")) {
				String AttrValue1 = getAttrTextByXpath(Xpathvalue1, "class");
				if (AttrValue1.equalsIgnoreCase("checked")) {
					ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				} else {
					clickByXpath(Xpathvalue1);
					ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				}
			}
			CommonLogger.log("clickradiobuttonByXpathValue -radio buttons Clicked successfully");
		} catch (Exception e) {
			CommonLogger.log("clickradiobuttonByXpathValue -radio button Click Failed");
			ATUReports.add("Radiobutton selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return data;
	}

	// Enable and disable status functionality
	public String enable_disablestatus(String Xpathvalue, String Xpathvalue1, String data) {
		// boolean success = false;

		try {
			CommonLogger.log("enable_disablestatus with Three String Value invoked");
			Thread.sleep(1000);
			if (data.equalsIgnoreCase("Active")) {
				String AttrValue = getAttrTextByXpath(Xpathvalue, "class");
				if (AttrValue.equalsIgnoreCase("checked")) {
					ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				} else {
					clickByXpath(Xpathvalue);
					ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				}
			} else if (data.equalsIgnoreCase("InActive")) {
				String AttrValue1 = getAttrTextByXpath(Xpathvalue1, "class");
				if (AttrValue1.equalsIgnoreCase("checked")) {
					ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				} else {
					clickByXpath(Xpathvalue1);
					ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				}
			}
			CommonLogger.log("clickstatusByXpathValue -radio buttons Clicked successfully");
		} catch (Exception e) {
			CommonLogger.log("clickstatusByXpathValue -radio button Click Failed");
			ATUReports.add("Radiobutton selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return data;
	}

	// Select the Table Value by validating on value which is passed from Excel.
	// Value - Locator, xpathValue - To click the particular item, data - Value
	// to be selected to verify and click
	public String EnablingTableWithRadioBtn(String Value, String xpathValue, String xpathValue1, String xpathValue2,
			String data, String Text) {
		boolean success = false;
		int size = getSizeByXpath(Value);
		// System.out.println("Size" + size);
		try {
			CommonLogger.log("selectTableWithValue invoked");
			for (int i = 1; i <= size; i++) {
				String table = getTextByXpath(Value + "[" + (i) + "]" + xpathValue);
				// System.out.println("Table" + table);
				if (table.equalsIgnoreCase(data)) {
					if (Text.equalsIgnoreCase("Yes")) {
						clickByXpath(Value + "[" + (i) + "]" + xpathValue1);
						ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(
								ScreenshotOf.BROWSER_PAGE));
						break;
					} else if (Text.equalsIgnoreCase("No")) {
						clickByXpath(Value + "[" + (i) + "]" + xpathValue2);

						ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(
								ScreenshotOf.BROWSER_PAGE));
						break;
					}
					success = true;
					break;
				}
			}
			if (success == false) {
				ATUReports.add("Value not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectTableWithValue - Value Selected");
		} catch (Exception e) {
			CommonLogger.log("selectTableWithValue - Value selection Failed in Exception Block");
			ATUReports.add("Value selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// redirecting to another url
	public String redirectToNewurl(String url, String PageDesc) {
		try {
			CommonLogger.log("redirectToNewurl invoked");
			driver.get(url);
			// launchBankLogin(value1, value2, value3);
			setATUreportConfig(PageDesc, "Varada", "I-Pay");
			ATUReports.add("Browser opened ", LogAs.INFO, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("launchBrowser - Browser Launched");
		} catch (Exception e) {
			CommonLogger.log("launchBrowser - Browser Launch Failed in Exception Block");
			ATUReports.add("Launch Browser failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return url;
	}

	// Value - Locator, xpathValue - To click the particular item, data - Value
	// to be selected to verify and click
	public String selectTableWithRadioBtn(String YesNoVavlue, String Value, String data) {
		int size = getSizeByXpath(Value);
		// System.out.println("Size : " + size);
		// System.out.println("Yes No Value " + YesNoVavlue);
		// System.out.println("Value :" + Value);
		// System.out.println("data :" + data);
		String val = YesNoVavlue;
		String a = YesNoVavlue.substring(0, 1);
		// System.out.println("a" + a);
		String b = YesNoVavlue.substring(1, 2);
		// System.out.println("b" + b);
		String c = YesNoVavlue.substring(2, 3);
		// System.out.println("c" + c);
		String d = YesNoVavlue.substring(3, 4);
		// System.out.println("d" + d);
		// String array[] = YesNoVavlue.split(".");

		try {
			for (int i = 1; i <= size; i++) {
				String table = getTextByXpath(Value + "[" + (i) + "]/td[1]");
				if (table.equalsIgnoreCase(data)) {
					if (a.equalsIgnoreCase("Y")) {
						String AttrValue = getAttrTextByXpath(Value + "[" + (i) + "]/td[2]/div[1]/a", "class");
						if (AttrValue.equalsIgnoreCase("checked")) {
							ATUReports.add("Value selected", a, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						} else {
							clickByXpath(Value + "[" + (i) + "]/td[2]/div[1]/a");
							ATUReports.add("Value selected", a, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						}
					} else if (a.equalsIgnoreCase("N")) {
						String AttrValue = getAttrTextByXpath(Value + "[" + (i) + "]/td[2]/div[2]/a", "class");
						if (AttrValue.equalsIgnoreCase("checked")) {
							ATUReports.add("Value selected", a, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						} else {
							clickByXpath(Value + "[" + (i) + "]/td[2]/div[2]/a");
							ATUReports.add("Value selected", a, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						}
					}
					if (b.equalsIgnoreCase("Y")) {
						String AttrValue = getAttrTextByXpath(Value + "[" + (i) + "]/td[3]/div[1]/a", "class");
						if (AttrValue.equalsIgnoreCase("checked")) {
							ATUReports.add("Value selected", b, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						} else {
							clickByXpath(Value + "[" + (i) + "]/td[3]/div[1]/a");
							ATUReports.add("Value selected", b, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						}
					} else if (b.equalsIgnoreCase("N")) {
						String AttrValue = getAttrTextByXpath(Value + "[" + (i) + "]/td[3]/div[2]/a", "class");
						if (AttrValue.equalsIgnoreCase("checked")) {
							ATUReports.add("Value selected", b, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						} else {
							clickByXpath(Value + "[" + (i) + "]/td[3]/div[2]/a");
							ATUReports.add("Value selected", b, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						}
					}

					if (c.equalsIgnoreCase("Y")) {
						String AttrValue = getAttrTextByXpath(Value + "[" + (i) + "]/td[4]/div[1]/a", "class");
						if (AttrValue.equalsIgnoreCase("checked")) {
							ATUReports.add("Value selected", c, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						} else {
							clickByXpath(Value + "[" + (i) + "]/td[4]/div[1]/a");
							ATUReports.add("Value selected", c, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						}
					} else if (c.equalsIgnoreCase("N")) {
						String AttrValue = getAttrTextByXpath(Value + "[" + (i) + "]/td[4]/div[2]/a", "class");
						if (AttrValue.equalsIgnoreCase("checked")) {
							ATUReports.add("Value selected", c, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						} else {
							clickByXpath(Value + "[" + (i) + "]/td[4]/div[2]/a");
							ATUReports.add("Value selected", c, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						}
					}

					if (d.equalsIgnoreCase("Y")) {
						String AttrValue = getAttrTextByXpath(Value + "[" + (i) + "]/td[5]/div[1]/a", "class");
						if (AttrValue.equalsIgnoreCase("checked")) {
							ATUReports.add("Value selected", d, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						} else {
							clickByXpath(Value + "[" + (i) + "]/td[5]/div[1]/a");
							ATUReports.add("Value selected", d, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						}
					} else if (d.equalsIgnoreCase("N")) {
						String AttrValue = getAttrTextByXpath(Value + "[" + (i) + "]/td[5]/div[2]/a", "class");
						if (AttrValue.equalsIgnoreCase("checked")) {
							ATUReports.add("Value selected", d, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						} else {
							clickByXpath(Value + "[" + (i) + "]/td[5]/div[2]/a");
							ATUReports.add("Value selected", d, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						}
					}
					break;
				}

			}
		} catch (Exception e) {
			ATUReports.add("Value selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String posLogin(/* String browser,String path,String url, */String PageDesc, String ProjectName,
			String Login, String userNameLocValue, String userName, String passwordLocValue, String password,
			String submitLocValue) {
		try {
			CommonLogger.log("posLogin invoked");
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Login)));
			// launchBankLogin(browser, path, url);
			setATUreportConfig(PageDesc, "Raghavi", ProjectName);
			String value = getTextByXpath(Login);
			if (value.equals("Login")) {
				clickByXpath(Login);
			} else {
				ATUReports.add("Login button not clicked", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			sleep(1000);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(userNameLocValue)));
			clearTextByName(userNameLocValue);
			enterTextByName(userNameLocValue, userName);

			wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(passwordLocValue)));
			clearTextByName(passwordLocValue);
			enterTextByName(passwordLocValue, password);

			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(submitLocValue)));
			clickByXpath(submitLocValue);
			ATUReports.add("Login completed successfully", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

		} catch (Exception e) {
			CommonLogger.log("posLogin Failed in Exception");
			ATUReports.add("Unable to Login", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}

		return userNameLocValue;
	}

	public String ScrollUpdropdownByXpath(String value3, String Value, String Value1, String data) {
		try {
			String temp = getTextByXpath(value3);
			// System.out.println("Temp is: " + temp);
			clickByXpath(Value1);
			int temp1 = Integer.parseInt(temp);
			// System.out.println("tmp1 " + temp1);
			int index = temp1 / 2;
			// System.out.println("index " + index);
			WebElement b = driver.findElement(By.xpath(Value1));
			Actions action = new Actions(driver);
			action.moveToElement(b);

			for (int i = 0; i <= temp1; i++) {

				action.sendKeys(Keys.ARROW_UP).sendKeys(Keys.ARROW_UP).build().perform();
				// action.click().perform();

			}
			// System.out.println(Value1);
			clickByXpath(Value1);
		} catch (Exception e) {

			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public void ActionClickbyId(String Id, String data) {
		try {
			if (clickByIdUsingAction(Id))
				ATUReports.add("Button Clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Button Not Clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("Element not Displayed");
		} catch (Exception e) {
			CommonLogger.log("Element not Present Verification passed in Exception Block");
			;
			ATUReports.add("Button not Clicked", "", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}

	}

	public void scrollingToElementByXpath(String xpath) {

		try {
			WebElement element = driver.findElement(By.xpath(xpath));
			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView();", element);
			CommonLogger.log("Scrolled to particular element");
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
	}
	
	public void scrollingToElementByXpath(String xpath1, String xpath2) {

		try {
			WebElement element = driver.findElement(By.xpath(xpath1));
			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView();", element);
			CommonLogger.log("Scrolled to particular element");
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
	}
	
	public void selectDropDownListJSByXpath(String xpath,String data) {

		try {
			WebElement element = driver.findElement(By.xpath(xpath));
			((JavascriptExecutor) driver).executeScript("arguments[2].data;", element);
			CommonLogger.log("DropDown Value Selected element");
			
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
	}

	public void scrollingToElementByLinkText(String LinkText) {

		try {
			WebElement element = driver.findElement(By.linkText(LinkText));
			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView();", element);
			CommonLogger.log("Scrolled to particular element");
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
	}

	public void scrollingToElementById(String id) {

		try {
			WebElement element = driver.findElement(By.id(id));
			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView();", element);
			CommonLogger.log("Scrolled to particular element");
			
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
	}

	public void scrollingToElementByName(String name) {

		try {
			WebElement element = driver.findElement(By.name(name));
			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView();", element);
			CommonLogger.log("Scrolled to particular element");
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
	}

	public void scrollingToElementByClassName(String classname) {

		try {
			WebElement element = driver.findElement(By.className(classname));
			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView();", element);
			CommonLogger.log("Scrolled to particular element");
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
	}

	public void scrollingToBottom() {
		try {
			((JavascriptExecutor) driver).executeScript("window.scrollTo(0, document.body.scrollHeight)");
			CommonLogger.log("Scrolled to particular element");
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
	}

	public void verifyTextWithSubStringByXpath(String Xpath, String Text, String substringval) {
		try {
			scrollingToElementByXpath(Xpath);
			if (getTextByXpath(Xpath).substring(Integer.parseInt(substringval)).contains(Text)) {
				ATUReports.add("Text validation successful", "", Text,
						getTextByXpath(Xpath).substring(Integer.parseInt(substringval)), LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else
				ATUReports.add("Text validation not successful", "", Text,
						getTextByXpath(Xpath).substring(Integer.parseInt(substringval)), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("Text Verified");
		} catch (NoSuchElementException e) {
			ATUReports.add("Text validation failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("Text Verification failed in NoSuchElement Block");
		} catch (WebDriverException e1) {
			CommonLogger.log("Text Verification failed in WebDriverException Block");
			ATUReports.add("The browser is unavailable", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		} finally {
			Xpath = null;
			Text = null;
			substringval = null;
		}
		

	}

	public void clickAndDragSlider(String Xpath, int value) {

		try {

			WebElement slider = driver.findElement(By.xpath(Xpath));
			Actions move = new Actions(driver);
			Action action = (Action) move.dragAndDropBy(slider, value, 0).build();
			action.perform();
			ATUReports.add("Click and Drag Passed", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		} catch (Exception e) {
			CommonLogger.errorLog(e);
			ATUReports.add("Click and Drag Failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}

	}

	public String selectTableWithAttrValue(String Value, String xpathValue, String xpathValue1, String data, String Text) {
		boolean success = false;
		int size = getSizeByXpath(Value);
		// System.out.println("Size" + size);
		try {
			CommonLogger.log("selectTableWithEnterValue invoked");
			for (int i = 1; i <= size; i++) {
				String table = getAttrTextByXpath(Value + "[" + (i) + "]" + xpathValue, "value");
				// System.out.println("Table" + table);
				if (table.equalsIgnoreCase(data)) {
					enterTextByXpath(Value + "[" + (i) + "]" + xpathValue1, Text);
					ATUReports.add("Value selected and Text Entered", data, Text, LogAs.PASSED, new CaptureScreen(
							ScreenshotOf.BROWSER_PAGE));
					success = true;
					break;
				}
			}
			if (success == false) {
				ATUReports.add("Value not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectTableWithEnterValue - Value Selected");
		} catch (Exception e) {
			CommonLogger.log("selectTableWithEnterValue - Value selection Failed in Exception Block");
			ATUReports.add("Value selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String selectTableCheckBoxWithValue(String Value, String xpathValue, String xpathValue1, String data,
			String AttrName, String chkboxval) {
		boolean success = false;
		int size = getSizeByXpath(Value);
		 System.out.println("Size" + size);
		try {
			CommonLogger.log("selectTableWithValue invoked");
			for (int i = 1; i <= size; i++) {
				String table = getTextByXpath(Value + "[" + (i) + "]" + xpathValue);
				System.out.println("table" + table);
				if (table.equalsIgnoreCase(data)) {
					// scrollingToElementByXpath(Value + "[" + (i) + "]" +
					// xpathValue1);
					String tes = driver.findElement(By.xpath(Value + "[" + (i) + "]" + xpathValue1)).getAttribute(
							AttrName);
					System.out.println("First " + tes);
					System.out.println("Sec " + chkboxval);
					if (tes.equals(chkboxval)) {
						ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(
								ScreenshotOf.BROWSER_PAGE));
					} else {

						scrollingToElementByXpath(Value + "[" + (i) + "]" + xpathValue1);
						driver.findElement(By.xpath(Value + "[" + (i) + "]" + xpathValue1)).click();
						
						try {
							WebDriverWait wait = new WebDriverWait(driver, 30);
							if(wait.until(ExpectedConditions.alertIsPresent()) != null){
								acceptAlert();
							}
						} catch (Exception e) {
							CommonLogger.errorLog(e);
						}						
						//WebDriverWait  wait.until(ExpectedConditions.alertIsPresent());
						// clickByXpath(Value + "[" + (i) + "]" + xpathValue1);
						ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(
								ScreenshotOf.BROWSER_PAGE));
					}
					success = true;
					break;
				}
			}
			if (success == false) {
				ATUReports.add("Value not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectTableWithValue - Value Selected");
		} catch (Exception e) {
			CommonLogger.log("selectTableWithValue - Value selection Failed in Exception Block");
			ATUReports.add("Value selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	// For Token Txn Config

	public void SelectListinLoopfrmTable(String Xpath, String XpathValue, String Xpath1, String data, String data2)
			throws FileNotFoundException, IOException {
		int size = getSizeByXpath(Xpath);
		boolean success = false;
		try {
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
			for (int i = 1; i <= size; i++) {

				String val = getTextByXpath(Xpath + "[" + (i) + "]" + XpathValue);
				if (val.trim().equalsIgnoreCase(data)) {
					selectVisibleTextByXpath(Xpath + "[" + (i) + "]" + Xpath1, data2);
					sleep(2000);
					ATUReports
					.add("Record selected", data2, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					success = true;
					break;
				}

				/*if (success == false) {
					ATUReports.add("Record not selected", data, LogAs.FAILED, new CaptureScreen(
							ScreenshotOf.BROWSER_PAGE));
				}*/
				CommonLogger.log("Record Selected");
			}
		} catch (NoSuchElementException e) {
			CommonLogger.log("Record Selection Failed in NoSuchElement Block");
			ATUReports.add("No such element present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		} catch (WebDriverException e1) {
			CommonLogger.log("Record Selection Failed in WebDriverException");
			ATUReports.add("List Option Selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
	}

	public String clickAndDragToStart(String Xpath1, String Class) {

		try {

			WebElement dragElement = driver.findElement(By.xpath(Xpath1));
			WebElement dropElement = driver.findElement(By.className(Class));

			Actions builder = new Actions(driver);
			Action dragAndDrop = builder.clickAndHold(dragElement).moveToElement(dropElement).release(dropElement)
					.build();
			dragAndDrop.perform();
			ATUReports.add("Click and Drag Passed", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		} catch (Exception e) {
			CommonLogger.errorLog(e);
			ATUReports.add("Click and Drag Failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Xpath1;
	}

	// Adding Token Project Pages

	public String VerifyDatafromTable(String Xpath1, int Num, String data) {
		int size = getSizeByXpath(Xpath1);
		try {
			for (int i = 1; i <= size; i++) {
				if ((getTextByXpath(Xpath1 + "[" + (i) + "]/td[" + Num + "]")).equalsIgnoreCase(data)) {
				}
			}
			ATUReports.add("Data Verified", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		} catch (Exception e) {
			ATUReports.add("Data Not Verified", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return data;
	}

	public String ClickMenuSelection(String Menus, String Option, int Num, String Xpath1) {
		int size = getSizeByXpath(Xpath1);
		String value = null;
		try {
			for (int i = 1; i <= size; i++) {

				if ((getTextByXpath((Xpath1) + "[" + (i) + "]/td[2]")).equalsIgnoreCase(Menus)) {
					clickByXpath(Xpath1 + "[" + (i) + "]/td[1]");
					clickByXpath(Xpath1 + "[" + (i) + "]/td[" + Num + "]");
					ATUReports.add(Option + " for " + Menus + "Selected", LogAs.PASSED, new CaptureScreen(
							ScreenshotOf.BROWSER_PAGE));
				} else
					ATUReports.add(Option + " for " + Menus + "Not Selected", LogAs.FAILED, new CaptureScreen(
							ScreenshotOf.BROWSER_PAGE));
			}
		} catch (Exception e) {
			ATUReports.add("Menu Selection Failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Option;
	}

	public String verifyElementIsDisabled(String Xpath, String data) {
		try {
			CommonLogger.log("IsElementsDisabledByXpath invoked");
			if (verifyAttrTextByXpath(Xpath, "disabled", "true"))
				ATUReports.add("Element Disabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports
				.add("Element not Disabled", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsDisabledByXpath - Elements Disabled");
		} catch (Exception e) {
			CommonLogger.log("IsElementsDisabledByXpath - Elements Enable Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Xpath;
	}

	public String VerifyListInLoopByXpath(String Value, String data) {
		try {
			CommonLogger.log("VerifyListInLoopByXpath invoked");
			int size = getSizeByXpath(Value);
			for (int i = 2; i <= size; i++) {
				// String value = getTextByXpath(Value + "[" + i + "]").trim();

				if ((getTextByXpath(Value + "[" + i + "]").trim()).contains(data)) {
				}
			}

			ATUReports.add("Roles Belongs to Institution", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			CommonLogger.log("VerifyListInLoopByXpath - Option Verified");
		} catch (Exception e) {
			CommonLogger.log("VerifyListInLoopByXpath - Option Verified Failed in Exception Block");
			ATUReports.add("Roles Not Belongs to Institution", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String verifyMenuEnabledAndDisabled(String Xpath,String TextVal,String Xpath1,String Xpath2,String Xpath3,String VerifyValue,String Menu) {
		int size = getSizeByXpath(Xpath);
		System.out.println(size);
		try {
			for (int i = 1; i <= size; i++) {
				String Text = getTextByXpath(Xpath + "[" + i + "]" + TextVal).trim();
				if (Text.equalsIgnoreCase(VerifyValue)) {
					String AttrValue = getAttrTextByXpath(Xpath + "[" + i + "]" + Xpath2, "class");
					if(AttrValue.contains("checked")){
						ATUReports.add(VerifyValue + "Enabled", LogAs.PASSED, new CaptureScreen(
							ScreenshotOf.BROWSER_PAGE));
						String AttrValue1 = getAttrTextByXpath(Xpath + "[" + i + "]" + Xpath2, "class");
						if (AttrValue1.contains("checked")) {
							ATUReports.add(Menu +"Enabled", LogAs.PASSED,new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
						}
						else{
							clickByXpath(Xpath + "[" + i + "]" + Xpath3);
							ATUReports.add(Menu +"Disabled",Menu, LogAs.PASSED,new CaptureScreen(ScreenshotOf.BROWSER_PAGE));	
						}
					}
					else{
						clickByXpath(Xpath + "[" + i + "]" + Xpath1);
						ATUReports.add(VerifyValue + "Disabled", LogAs.PASSED, new CaptureScreen(
								ScreenshotOf.BROWSER_PAGE));
						String AttrValue1 = getAttrTextByXpath(Xpath + "[" + i + "]" + Xpath2, "class");
						System.out.println("Sttribute value" +AttrValue);
						if (AttrValue1.contains("checked")) {
							ATUReports.add(Menu +"Enabled", LogAs.PASSED,new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
						}
						else{
							clickByXpath(Xpath + "[" + i + "]" + Xpath3);
							ATUReports.add(Menu +"Disabled",Menu, LogAs.PASSED,new CaptureScreen(ScreenshotOf.BROWSER_PAGE));	
						}
					}
			}
			}
		}
		catch (Exception e) {
			ATUReports.add( "Not Selected", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Menu;
	}

	public String VerifyIsElementsById(String Id, String data) {
		try {
			CommonLogger.log("IsElementsEnabledById invoked");
			if (!IsEnabledById(Id))
				ATUReports.add("Element Disabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports
				.add("Element not Disabled", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsEnabledById - Elements Enabled");
		} catch (Exception e) {
			CommonLogger.log("IsElementsEnabledById - Elements Enable Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Id;
	}

	public void ActionSelectbyXpath(String Xpath) {
		try {
			if (clickByXpathUsingAction(Xpath)) {
				sleep(2000);
				ATUReports.add("Option Selected", "", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else
				ATUReports.add("Option Not Selected", "", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("Element not Displayed");
		} catch (Exception e) {
			CommonLogger.log("Element not Present Verification passed in Exception Block");
			ATUReports.add("Option Not Selected", Xpath, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}

	}

	public void ElementDisabledByXapth(String Xpath, String data) {
		try {
			String attvalue = "class";
			if ((getAttrTextByXpath(Xpath, attvalue)).contains("disabled")) {
				sleep(2000);
				ATUReports.add("Option Disabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Option Not Disabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			}
			CommonLogger.log("Element not Disabled");
		} catch (Exception e) {
			CommonLogger.log("Element not Present Verification passed in Exception Block");
			;
			ATUReports.add("Option Not Disabled", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}

	}

	public void ActionSelectWithDatabyXpath(String Xpath, String data) {
		try {
			if (clickByXpathUsingAction(Xpath)) {
				sleep(2000);
				ATUReports.add("Option Selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else
				ATUReports.add("Option not Selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("Element not Selected");
		} catch (Exception e) {
			CommonLogger.log("Element not Present Verification passed in Exception Block");
			CommonLogger.errorLog(e);
			;
			ATUReports.add("Button not Clicked", Xpath, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}

	}

	public void ActionUncheckClickbyXpath(String Xpath, String Xpath1, String data, String attvalue) {
		try {
			if ((getAttrTextByXpath(Xpath, attvalue)).contains("checked")) {
				clickByXpathUsingAction(Xpath1);
				sleep(2000);
				ATUReports.add("Option deselected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {

				sleep(2000);
				ATUReports.add("Option deselected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			}
			CommonLogger.log("Element not Displayed");
		} catch (Exception e) {
			CommonLogger.errorLog(e);
			CommonLogger.log("Element not Present Verification passed in Exception Block");
			;
			ATUReports.add("Button not Clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}

	}

	public String selectPanSourceTablebyXpath(String Value, String xpathValue, String xpathValue1, String data) {
		boolean success = false;
		int size = getSizeByXpath(Value);
		try {
			clickByXpath(xpathValue);
			for (int i = 1; i <= size; i++) {
				if ((getTextByXpath(Value + "[" + (i) + "]" + xpathValue1)).equalsIgnoreCase(data)) {
					if ((getAttrTextByXpath(Value + "[" + (i) + "]", "class")).equalsIgnoreCase("active")) {
						ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(
								ScreenshotOf.BROWSER_PAGE));
					} else {
						clickByXpath(Value + "[" + (i) + "]" + xpathValue1);
						ATUReports.add("Value selected", data, LogAs.PASSED, new CaptureScreen(
								ScreenshotOf.BROWSER_PAGE));
					}
					success = true;
					break;
				}
			}
			if (success == false) {
				ATUReports.add("Value not selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("selectChannelTablebyXpath - Value Selected");
		} catch (Exception e) {
			CommonLogger.errorLog(e);
			CommonLogger.log("selectChannelTablebyXpath - Value selection Failed in Exception Block");
			ATUReports.add("Value selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String clickByIdforDisabledBase(String Value, String data) {
		try {
			CommonLogger.log("clickByIdBase invoked");
			// String value = getTextById(Value);
			if ((getTextById(Value)).equals(data)) {
				clickById(Value);
				ATUReports.add("Button clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Button not clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("clickByIdBase - Button Clicked");
		} catch (Exception e) {
			CommonLogger.log("clickByIdBase - Button Click Failed in Exception Block");
			ATUReports.add("Button Not clicked ", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public String IsElementsDisabledAttrById(String Id, String data) {
		try {
			CommonLogger.log("IsElementsDisabledById invoked");
			if (verifyAttrTextById(Id, "disabled", "true"))
				ATUReports.add("Element Disabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports
				.add("Element not Disabled", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsDisabledById - Elements Disabled");
		} catch (Exception e) {
			CommonLogger.log("IsElementsDisabledById - Elements Enable Verification Failed in Exception Block");
			CommonLogger.errorLog(e);
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Id;
	}

	public String IsElementsNotEnabledByXpath(String Xpath, String data) {
		try {
			CommonLogger.log("IsElementsNotEnabledByXpath invoked");
			if (!IsEnabledByXpath(Xpath))
				ATUReports.add("Element Disabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports
				.add("Element not Disabled", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsNotEnabledByXpath - Elements Enabled");
		} catch (Exception e) {
			CommonLogger.log("IsElementsNotEnabledByXpath - Elements Enable Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Xpath;
	}

	public String verifyTextBoxValidationEntry(String Field, String value, String data) {
		try {
			CommonLogger.log("verifyTextBoxValidation invoked");
			if (enterTextById(value, data))
				ATUReports.add(Field + " Not allows to enter", data, LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add(Field + " allows to enter", data, LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("verifyTextBoxValidation - completed");
		} catch (Exception e) {
			CommonLogger.log("verifyTextBoxValidation - Text Entry Failed in Exception Block");
			ATUReports.add("Text entry failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return value;
	}

	public String verifyTextBoxContainsValidation(String Field, String value, String data) {
		try {
			CommonLogger.log("containsTextByXpathBase invoked");
			// String Text = getAttrTextById(value, "value");
			if ((getAttrTextById(value, "value")).contains(data))
				ATUReports.add(Field + " contains", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add(Field + " not contains", data, LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("containsTextByXpathBase - completed");
		} catch (Exception e) {
			CommonLogger.log("containsTextByXpathBase - Text contains check Failed in Exception Block");
			ATUReports.add("Text entry failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return value;
	}

	public String containsTextByXpathBase(String value, String data) {
		try {
			CommonLogger.log("containsTextByXpathBase invoked");
			// String Text = getAttrTextById(value, "value");
			if ((getAttrTextById(value, "value")).contains(data))
				ATUReports.add("Text Contains", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Text not Contains", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("containsTextByXpathBase - completed");
		} catch (Exception e) {
			CommonLogger.log("containsTextByXpathBase - Text contains check Failed in Exception Block");
			ATUReports.add("Text entry failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return value;
	}

	public String verifyTextInTableByXpathBase(String Value, String data) {
		try {
			if (verifyTextByXpath(Value, data)) {
				ATUReports.add("Table Contains SearchValue ", "", data, getTextByXpath(Value), LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Table Not Contains SearchValue ", "", data, getTextByXpath(Value), LogAs.FAILED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyTextByXpathBase - Text Verifed");
		} catch (Exception e) {
			CommonLogger.log("verifyTextByXpathBase - Text Verification Failed in Exception Block");
			ATUReports.add("Text verification failed from Table", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

	public void EnableCheckBoxbyVerification(String Xpath, String Value, String data) {
		try {
			String attvalue = "class";
			// String text = getAttrTextByXpath(Xpath, attvalue);
			if ((getAttrTextByXpath(Xpath, attvalue)).contains("checked")) {
				sleep(2000);
				ATUReports.add("Option Enabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				clickByID(Value, data);
				ATUReports.add("Option Enabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			}
			CommonLogger.log("Element not Disabled");
		} catch (Exception e) {
			CommonLogger.log("Element not Present Verification passed in Exception Block");
			ATUReports.add("Option Not Enabled", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}

	}

	public void disableCheckBoxbyVerification(String Xpath, String Value, String data) {
		try {
			String attvalue = "class";
			if ((getAttrTextByXpath(Xpath, attvalue)).contains("checked")) {
				sleep(2000);
				clickByID(Value, data);
				ATUReports.add("Option Disabled ", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {

				ATUReports.add("Option Disabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			}
			CommonLogger.log("Element not Disabled");
		} catch (Exception e) {
			CommonLogger.log("Element not Present Verification passed in Exception Block");
			ATUReports.add("Option Not Disabled", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
	}

	public String IsElementsNotDisplayedByXpath(String Xpath, String data) {
		try {
			CommonLogger.log("IsElementsDisplayedByXpath invoked");
			if (!IsDisplayedByXpath(Xpath))
				ATUReports.add("Element Not Displayed", data, LogAs.PASSED,
						new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Element Displayed", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsDisplayedByXpath - Elements Displayed");
		} catch (Exception e) {
			CommonLogger.log("IsElementsDisplayedByXpath - Elements Display Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Xpath;
	}

	public void ActioncheckDisableCheckboxbyXpath(String Xpath, String Xpath1, String data) {
		try {
			String attvalue = "class";
			if ((getAttrTextByXpath(Xpath, attvalue)).contains("checked")) {
				clickByXpathUsingAction(Xpath1);
			} else {

				sleep(2000);

			}
			CommonLogger.log("Element not Displayed");
		} catch (Exception e) {
			CommonLogger.log("Element not Present Verification passed in Exception Block");
			;
			// ATUReports.add("Button not Clicked", data, LogAs.FAILED, new
			// CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}

	}

	public void verifychannelResetByXpath(String Xpath, String Xpath1, String data) {
		try {
			String attvalue = "class";
			if ((getAttrTextByXpath(Xpath, attvalue)).contains("checked")) {
				ATUReports.add("Page Not Reset", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {

				ATUReports.add("Page Reset", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			}
			CommonLogger.log("Page Not Reset");
		} catch (Exception e) {
			CommonLogger.log("Element not Present Verification passed in Exception Block");
			CommonLogger.errorLog(e);
		}

	}

	public String IsElementsAttTextDisabledByXpath(String Xpath, String data) {
		try {
			if (verifyAttrTextByXpath(Xpath, "disabled", "true"))

				ATUReports.add("Element Disabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports
				.add("Element not Disabled", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsDisabledByXapth - Elements Disabled");
		} catch (Exception e) {
			CommonLogger.errorLog(e);
			CommonLogger.log("IsElementsDisabledByXapth - Elements Enable Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return Xpath;
	}

	public void ActioncheckClickbyXpathProject(String Xpath, String data) {
		try {
			String attvalue = "class";
			String text = getAttrTextByXpath(Xpath, attvalue);
			if (text.contains("checked")) {
				sleep(2000);
				ATUReports.add("Option Selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				clickByXpathUsingAction(Xpath);
				sleep(2000);
				ATUReports.add("Option Selected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			}
			CommonLogger.log("Element not Displayed");
		} catch (Exception e) {
			CommonLogger.errorLog(e);
			CommonLogger.log("Element not Present Verification passed in Exception Block");
			ATUReports.add("Button not Clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}

	}

	public void verifyTextForViewpermission(String Value, String data) {
		try {
			String Text = getTextByXpath(Value);
			if (Text.equalsIgnoreCase(data)) {
				ATUReports.add("Text verified ", "", data, Text, LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Text not verified", "", data, Text, LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("getAndVerifyText - Text Verifed");
		} catch (Exception e) {
			CommonLogger.log("getAndVerifyText - Text Verification Failed in Exception Block");
			ATUReports.add("Text verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}

	}

	public void ElementIsNotPresentByXpath(String Xpath, String data) {
		try {
			if (IsEnabledByXpath(Xpath))
				ATUReports.add("Element Present", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Element  Present", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsEnabledByXpath - Elements Enabled");
		} catch (Exception e) {
			CommonLogger.log("IsElementsEnabledByXpath - Elements Enable Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}

	}

	public void moveVerifyAttrTextBase(String Value, String attvalue, String data) {
		try {
			clickByXpathUsingAction(Value);
			String text = getAttrTextByXpath(Value, attvalue);
			if (text.contains("checked")) {
				ATUReports.add("Option selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Option deselected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
		} catch (Exception e) {
			CommonLogger.log("verifyAttrTextBase - Text Match Failed in Exception Block");
			ATUReports.add("Text Verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}

	}

	public void elementNotSelectedByXpath(String Xpath, String data) {
		try {
			if (Xpath.contains("checked")) {
				ATUReports.add("Option selected", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Option deselected", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
		} catch (Exception e) {
			CommonLogger.log("verifyAttrTextBase - Text Match Failed in Exception Block");
			ATUReports.add("Text Verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}

	}


	public void scrollVerifyElementDisabled(String Xpath, String data) {
		try {
			scrollingToElementByXpath(Xpath);
			CommonLogger.log("IsElementsDisabledByXpath invoked");
			if (verifyAttrTextByXpath(Xpath, "disabled", "true"))
				ATUReports.add("Element Disabled", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports
				.add("Element not Disabled", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("IsElementsDisabledByXpath - Elements Disabled");
		} catch (Exception e) {
			CommonLogger.log("IsElementsDisabledByXpath - Elements Enable Verification Failed in Exception Block");
			ATUReports.add("Element not present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}

	}
	
	public String getTextByXpathBase(String Xpath) {

		try {
			CommonLogger.log("getTextByXpathBase invoked");
			if (!getTextByXpath(Xpath).equals(""))
				ATUReports.add("Text fetched", "", LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Text not fetched", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("getTextByXpathBase - Text Fetched ");
		} catch (Exception e) {
			ATUReports.add("Text fetching failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return getTextByXpath(Xpath);
	}

	// To get the Table Size List Count
	public void getDynamicTabSizeList(String Value, String Count) {
		int size = getSizeByXpath(Value);
		try {
			CommonLogger.log("getTableSizeListCount invoked");
			if (size <= Integer.parseInt(Count)) {
				ATUReports.add("Data Listed As per Sorting", "", Count + "", size + "", LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Data Not Listed As per Sorting", "", Count + "", size + "", LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("getTableSizeListCount - Count Matched");
		} catch (Exception e) {
			CommonLogger.errorLog(e);
			ATUReports.add("Count Match failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
	}

	public void selectVisibleTextForFailureByXpath(String Value, String data) {
		int size = getSizeByXpath(Value);
		try {
			CommonLogger.log("selectVisibleTextForFailureById invoked");
			for(int i =1;i<=size;i++){
			if (getTextByXpath(Value + "[" + i + "]").equalsIgnoreCase(data)) {
				ATUReports.add(data + " present in the dropdown menu", LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
				break;
			} else {
				ATUReports.add(data + " not present in the dropdown menu", LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			}
			CommonLogger.log("selectVisibleTextForFailureById - Option Selected");
		} catch (Exception e) {
			CommonLogger.log("selectVisibleTextForFailureById - Option Selection Failed in Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}

	}
	
	public void verifyTwoStringsBase(String text1, String text2) {
		try {
			CommonLogger.log("verifyTwoStringsBase invoked");
			if (text1.equals(text2)){
				ATUReports.add("Text verified ", "", text1, text2, LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			} else {
				ATUReports.add("Text not verified", "", text1, text2, LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			CommonLogger.log("verifyTwoStringsBase - Text Verified");
		} catch (Exception e) {
			CommonLogger.log("verifyTwoStringsBase - Text Verification Failed in Exception Block");
			ATUReports.add("Text verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		
	}

	public String getTextByIdBase(String Id) {

		try {
			CommonLogger.log("getTextByIdBase invoked");
			if (!getTextById(Id).equals(""))
				ATUReports.add("Text fetched","",LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Text not fetched", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("getTextByIdBase - Text Fetched ");
		} catch (Exception e) {
			ATUReports.add("Text fetching failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return getTextByIdBase(Id);
	}
	public String getTextByNameBase(String Name) {

		try {
			CommonLogger.log("getTextByNameBase invoked");
			if (!getTextByName(Name).equals(""))
				ATUReports.add("Text fetched","", LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			else
				ATUReports.add("Text not fetched", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("getTextByNameBase - Text Fetched ");
		} catch (Exception e) {
			ATUReports.add("Text fetching failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return getTextByNameBase(Name);
	}
	
public String getOTP(String link) throws FileNotFoundException, IOException {
		
		String resp;
		String otp;
		try {
			sleep(30000);
			URL url = new URL(link);
			HttpURLConnection con = (HttpURLConnection) url.openConnection();
			con.setRequestMethod("POST");
			con.setDoOutput(true);
			con.getURL();
			
			BufferedReader reader1 = new BufferedReader(new InputStreamReader(con.getInputStream()));
			resp = reader1.readLine();
			//System.out.println("::"+resp);
			otp= resp.substring(0, 6);
			reader1.close();
			return otp;
		} catch (ProtocolException e) {
			CommonLogger.errorLog(e);
			ATUReports.add("Protocol Exception", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			e.printStackTrace();
		} catch (IOException e) {
			CommonLogger.errorLog(e);
			ATUReports.add("IO Exception", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			e.printStackTrace();
		}
		return "";

	}

	public void enterOTP(String link, String Xpath) throws FileNotFoundException, IOException, NullPointerException {
		try {
			String newotp = getOTP(link);
			System.out.println("newotp"+newotp);
		   
			if (!oldotp.equals(newotp)){
				oldotp=newotp;
				System.out.println(newotp);
				enterTextByXpathBase(Xpath, newotp);
			
			}else
			{	
				sleep(15000);
				newotp = getOTP(link);
				oldotp=newotp;
				enterTextByXpathBase(Xpath, newotp);
			}
		} catch (NullPointerException e) {
			CommonLogger.errorLog(e);
			ATUReports.add("Null value retrieved", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			e.printStackTrace();
		} catch (Exception e) {
			CommonLogger.errorLog(e);
			ATUReports.add("OTP fetch and entry failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
	}
	
	
	public void matchAndverifyTextfromTable(String Xpath, String Xpath1, String data, String data2)
			throws FileNotFoundException, IOException {
		scrollingToElementByXpath(Xpath);
		int size = getSizeByXpath(Xpath);
		try {
			boolean flag = false;
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));

			for (int i = 1; i <= size; i++) {
				scrollingToElementByXpath(Xpath + "[" + (i) + "]/td");
				int size2 = getSizeByXpath(Xpath + "[" + (i) + "]/td");
				for (int j = 1; j < size2; j++) {
					String val = getTextByXpath(Xpath + "[" + (i) + "]/td" + "[" + (j) + "]").trim();

					if (val.equals(data)) {

						String val2 = getTextByXpath(Xpath + "[" + (i) + "]" + Xpath1).trim();
						if (val2.equals(data2))
							ATUReports.add("Text Matched", val2, LogAs.PASSED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						else
							ATUReports.add("Text not Matched", val2, LogAs.FAILED, new CaptureScreen(
									ScreenshotOf.BROWSER_PAGE));
						// break;
						flag = true;
					}
					if (flag) {
						break;
					}
				}
				if (flag) {
					break;
				}
				CommonLogger.log("Link clicked");
			}
		} catch (NoSuchElementException e) {
			CommonLogger.log("Link Selection Failed in NoSuchElement Block");
			ATUReports.add("No such element present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		} catch (WebDriverException e1) {
			CommonLogger.log("Link Selection Failed in WebDriverException");
			ATUReports.add("Text Match and verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e1);
		}
	}

	public void verifyTextfromTable(String Xpath, String XpathVal, String data) throws FileNotFoundException,
			IOException {
		scrollingToElementByXpath(Xpath);
		int size = getSizeByXpath(Xpath);
		try {
			boolean flag = false;
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));

			for (int i = 1; i <= size; i++) {
				scrollingToElementByXpath(Xpath + "[" + (i) + "]/td");
				int size2 = getSizeByXpath(Xpath + "[" + (i) + "]/td");
				String val = getTextByXpath(Xpath + "[" + (i) + "]" + XpathVal).trim();
				if (val.equals(data)) {
					ATUReports.add("Text Matched", val, data, LogAs.PASSED,
							new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
					flag = true;
					break;
				} else {
					ATUReports.add("Text not Matched", val, data, LogAs.FAILED, new CaptureScreen(
							ScreenshotOf.BROWSER_PAGE));
				}

				if (flag) {
					break;
				}
				CommonLogger.log("Link clicked");
			}
		} catch (NoSuchElementException e) {
			CommonLogger.log("Link Selection Failed in NoSuchElement Block");
			ATUReports.add("No such element present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		} catch (WebDriverException e1) {
			CommonLogger.log("Link Selection Failed in WebDriverException");
			ATUReports.add("Text Verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e1);
		}
	}

	public void verifyListTextByXpathInLoop(String Xpath, String Xpath1) throws FileNotFoundException, IOException {

		try {
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath1)));

			scrollingToElementByXpath(Xpath1);
			clickByXpath(Xpath1);
			int size = getSizeByXpath(Xpath);
			//System.out.println(size);
			for (int i = 1; i <= size; i++) {
			
				if (driver.findElement(By.xpath(Xpath + "[" + i + "]")).isDisplayed()) {
					ATUReports.add("Option Listed in drop down", getTextByXpath(Xpath + "[" + i + "]").trim(), LogAs.PASSED, new CaptureScreen(
							ScreenshotOf.BROWSER_PAGE));
				} else {
					WebElement element1 = driver.findElement(By.xpath(Xpath + "[" + i + "]"));
					((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView();", element1);				}
			}
			clickByXpath(Xpath1);
			CommonLogger.log("verifyListTextByXpathInLoop Verified successfully");
		} catch (NoSuchElementException e) {
			CommonLogger.log("Text Verification failed in NoSuchElement Block");
			ATUReports.add("No such element present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		} catch (WebDriverException e1) {
			CommonLogger.log("Text Verification failed in WebDriverException Block");
			ATUReports.add("List Text Verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e1);
		}
	}

	public String executeQueryInDBMySql(String ServerIp, int portNo, String userName, String password, String SSID,
			String Query) {
		try {
			Connection con = null;
			int rs = 0;
			Statement stmt = null;
			String Val = "";
			try {
				Class.forName("com.mysql.jdbc.Driver");
				con = DriverManager.getConnection("jdbc:mysql://" + ServerIp + ":" + portNo + "/" + SSID, ""
						+ userName + "", "" + password + "");
				stmt = con.createStatement();
				try {
//					rs = stmt.executeQuery(Query);
					rs=stmt.executeUpdate(Query);
					// System.out.println(rs);
				} catch (Exception e) {
					CommonLogger.errorLog(e);
				}
				stmt.close();
				stmt = null;
				// Close the local connection
				if ((con != null)) {
					con.close();
					con = null;
				}
				CommonLogger.log("Query executed in db");
				if(rs!=0){
					ATUReports.add("Db query executed", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				}else{
					ATUReports.add("Db query execution failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				}
			} catch (Exception ex) {
				CommonLogger.errorLog(ex);
				
			}
			/*
			 * if (Val.equals(Text)) { a = true; }
			 */
			return Val;
		} catch (Exception e) {
			CommonLogger.errorLog(e);
			ATUReports.add("Db Connection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			return "";
		}
}
	
	public void selectNotDisplayedByXpath(String Xpath, String data) {
		int size = getSizeByXpath(Xpath);
		try {
			CommonLogger.log("selectVisibleTextForFailureById invoked");
			for(int i =1;i<=size;i++){
			if (getTextByXpath(Xpath + "[" + i + "]").equalsIgnoreCase(data)) {
				ATUReports.add(data + " present in the dropdown menu", LogAs.FAILED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
				break;
			} else {
				ATUReports.add(data + " not present in the dropdown menu", LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
			}
			}
			CommonLogger.log("selectVisibleTextForFailureById - Option Selected");
		} catch (Exception e) {
			CommonLogger.log("selectVisibleTextForFailureById - Option Selection Failed in Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}

	}

	public String changeTableStatusByXpath(String Value,String xpathValue,
			String xpathValue1,String xpathValue2,String verifyText,String Text,String Button) {
		try {
			int size = getSizeByXpath(Value);
			//System.out.println(size);
			for (int i = 1; i <= size; i++) {
				String table = getTextByXpath(Value + "[" + i + "]" + xpathValue);
				if (table.equals(verifyText)) {
					clickByXpath(Value + "[" + i + "]"+ xpathValue1);
					String data = getTextByXpath(Value + "[" + i + "]" + xpathValue2);
					System.out.println(data);
					if (data.equalsIgnoreCase(Text)) {
						clickByXpath(Button);
						acceptAlert();
						ATUReports.add("Record status changed", 
								verifyText, LogAs.PASSED, new CaptureScreen(
								ScreenshotOf.BROWSER_PAGE));
						break;
					} else {
						ATUReports.add("Record status already changed", verifyText, LogAs.PASSED,
								new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
						break;
					}
				}
			}
			CommonLogger.log("changeTableStatusByXpath - Record status changed");
		} catch (Exception e) {
			CommonLogger.errorLog(e);
			ATUReports.add("Record Status Change failed", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
		}
		return Text;
	}

	
	
	public String valuesInsertInExcelSheet(String fileName, String sheetName, int colNum, String setValueData) {
		try {
			
			FileInputStream file = new FileInputStream(new File(fileName));

			HSSFWorkbook yourworkbook = new HSSFWorkbook(file);
			HSSFSheet sheet1 = yourworkbook.getSheet(sheetName);
		
			int rowCount = sheet1.getLastRowNum();
//			System.out.println("Row Count " + rowCount);
//			for(int i=1 ; i<rowCount ; i++){
				Row row = sheet1.getRow(1);
				Cell column = row.getCell(colNum);
				column.setCellValue(setValueData);
				file.close();
				FileOutputStream out = new FileOutputStream(new File(fileName));
				yourworkbook.write(out);
				out.close();
				ATUReports.add("Values entered in the file", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				CommonLogger.log("changeTableStatusByXpath - Values entered in the file");
//			}
			/*Row row = sheet1.getRow(rowNum);
			Cell column = row.getCell(colNum);
			column.setCellValue(setValueData);
			file.close();
			FileOutputStream out = new FileOutputStream(new File(fileName));
			yourworkbook.write(out);
			out.close();*/
		} catch (Exception e1) {
			CommonLogger.errorLog(e1);
			System.out.println(e1);
			ATUReports.add("Values not entered in the file", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return fileName;
	}
	public String valuesInsertInExcelSheetCol(String fileName, String sheetName, int colNum, int rownum, String setValueData) {
		try {
			
			FileInputStream file = new FileInputStream(new File(fileName));

			HSSFWorkbook yourworkbook = new HSSFWorkbook(file);
			HSSFSheet sheet1 = yourworkbook.getSheet(sheetName);
		
			int rowCount = sheet1.getLastRowNum();
//			System.out.println("Row Count " + rowCount);
//			for(int i=1 ; i<rowCount ; i++){
				Row row = sheet1.getRow(rownum);
				Cell column = row.getCell(colNum);
				column.setCellValue(setValueData);
				file.close();
				FileOutputStream out = new FileOutputStream(new File(fileName));
				yourworkbook.write(out);
				out.close();
				ATUReports.add("Values entered in the file", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				CommonLogger.log("changeTableStatusByXpath - Values entered in the file");
//			}
			/*Row row = sheet1.getRow(rowNum);
			Cell column = row.getCell(colNum);
			column.setCellValue(setValueData);
			file.close();
			FileOutputStream out = new FileOutputStream(new File(fileName));
			yourworkbook.write(out);
			out.close();*/
		} catch (Exception e1) {
			CommonLogger.errorLog(e1);
			System.out.println(e1);
			ATUReports.add("Values not entered in the file", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		return fileName;
	}
	public String ErrorAlertHandling(String data) {
		try {
			
	String text = driver.switchTo().alert().getText();
	//ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
	ATUReports.add("Alert box Text", "Creation Failed",data, text, LogAs.FAILED, new CaptureScreen(ScreenshotOf.DESKTOP));
	driver.switchTo().alert().accept();}
		catch (Exception e) {
			CommonLogger.errorLog(e);
			ATUReports.add("Page Doesn't found","",data,"Page Out Error", LogAs.FAILED, new CaptureScreen(ScreenshotOf.DESKTOP));
			
		}
		return null;
	}	
	public String TranportalPWD() {
		try {
			
			WebDriverWait wait = new WebDriverWait(driver, 30);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.name("generate")));
		String text=	driver.findElement(By.name("generate")).getAttribute("Value");
			driver.findElement(By.name("generate")).click();
	//ATUReports.add("Button clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
	ATUReports.add("Button Clicked",text , LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		}
		catch (Exception e) {
			CommonLogger.errorLog(e);
			ATUReports.add("Button not found","", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			
		}
		return null;
	}	
	public String dateSelection(String Value,String xpath,String Value1,String Value2,String Value3,
			String Value4,String Value5,String Value6,String Value7, String data) {
		//String arr[] = data.split("/");
		LocalDateTime datetime=LocalDateTime.parse(data, DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss"));
		LocalDate localdate=datetime.toLocalDate();
		 
	String locdate=localdate. format(DateTimeFormatter.ofPattern("dd-MMMM-yyyy"));
	
		LocalTime localtime=datetime.toLocalTime();
		
		String loctime=localtime.toString();

		String arr[] = locdate.split("-");
		String arr1[] = loctime.split(":");

		try {
			clickById( Value);
			if (selectVisibleTextByName(Value1, arr[1])) {
				ATUReports.add("Option selected", arr[1], LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
			ATUReports.add("Option not selected", arr[1], LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("selectUsingVisibleTextById - Option not Selected");
			}
			if (selectVisibleTextByName(Value2, arr[2])) {
				ATUReports.add("Option selected", arr[2], LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
			ATUReports.add("Option not selected", arr[2], LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.log("selectUsingVisibleTextById - Option not Selected");
			}

			
			
			
			String Xpath= xpath+arr[0]+  "\"]";
			String Date= getTextByXpath(Xpath);
			if (Date.equals(arr[0])){

			clickByXpath(Xpath);
			ATUReports.add("Option selected", Date, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			else {
				ATUReports.add("Option not selected", Date, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				CommonLogger.log("Date selection - Option not Selected");
				
			}
			
						
			String tim=arr1[0] +":" +arr1[1]+":"+arr1[2];
			
			if (loctime.equals(tim))
					{
enterTextByName(Value3, arr1[0]);
enterTextByName(Value4, arr1[1]);
enterTextByName(Value5, arr1[2]);	

ATUReports.add("Option selected",tim , LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}
			else{
				ATUReports.add("Option Not selected",tim , LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));

			}
			if(clickByXpath(Value6)){
				ATUReports.add("Option selected","Date selection OK" , LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				CommonLogger.log("selectUsingVisibleTextById - Option  Selected");

			}
			else{
				
				clickByXpath(Value7);
				ATUReports.add("Option selected","Date selection Cancelled" , LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				CommonLogger.log("selectUsingVisibleTextById - Option not Selected");

				
			}
			
		} catch (Exception e) {
		CommonLogger.log("selectUsingVisibleTextById - Option Selection Failed in Exception Block");
			ATUReports.add("Option selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return data;
}
	public String checkBoxClickByJSexecutor(String Value, String data) {
		try {
			CommonLogger.log("clickByIdBase invoked");
			scrollingToElementByXpath(Value);
			
		if (verifyAttributeByXpath(Value,"checked", "true"))
		
		{
			
			if ("1".equals(data)) {
				//clickByXpath(Value);
				ATUReports.add("Button clicked", "Send Mail Selected", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			} else {
				WebDriverWait wait = new WebDriverWait(driver, 30);
				WebElement A = driver.findElement(By.xpath(Value));
				((JavascriptExecutor) driver).executeScript("arguments[0].click();", A);
			
				ATUReports.add("Button not clicked", "Send Mail unselected", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			}}
			else{
				
				if ("0".equals(data)) {
		
					ATUReports.add("Button clicked", "Send Mail UnSelected", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				} else {
					WebDriverWait wait = new WebDriverWait(driver, 30);
					WebElement A = driver.findElement(By.xpath(Value));
					((JavascriptExecutor) driver).executeScript("arguments[0].click();", A);
					ATUReports.add("Button not clicked", "Send Mail selected", LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
				}
			
			CommonLogger.log("clickByIdBase - Button Clicked");}
		} catch (Exception e) {
			CommonLogger.log("clickByIdBase - Button Click Failed in Exception Block");
			ATUReports.add("Button click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;

	}
	
	////Ramya
	
	public String enterTextByXpathIntMultipleAdd(String Value, String data,String Filepath,String SheetName,String Columnvalue) {
		try {
			CommonLogger.log("enterTextByXpathBase invoked");
			WebDriverWait wait = new WebDriverWait(driver, 300);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Value)));
			int i=Integer.parseInt(data);
			i=i+1;
			String value1 = String.valueOf(i);
	        driver.findElement(By.xpath(Value)).clear();
	        driver.findElement(By.xpath(Value)).sendKeys(value1);
				ATUReports.add("Inserted", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			WriteSheetMutiple(Filepath,SheetName,value1,Columnvalue);
				ATUReports.add("SheetUpdated ", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			
			CommonLogger.log("enterTextByXpathBase - Text Entered Successfully ");
		} catch (Exception e) {
			CommonLogger.log("enterTextByXpathBase -  Enter Text Failed in Exception Block");
			ATUReports.add(" Enter Text failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}
	public static String WriteSheetMutiple(String FilePath, String sheet_value,String Data,String Columnvalue ) {
		try {
			
			int sheetnum=Integer.parseInt(sheet_value);
			int cellvalue=Integer.parseInt(Columnvalue);
		        File src= new File(FilePath);
		        FileInputStream fis= new FileInputStream(src);
				HSSFWorkbook wb=new HSSFWorkbook(fis);
				HSSFSheet st=wb.getSheetAt(sheetnum);
				int rowCount=st.getLastRowNum();
				HSSFCell cell = st.getRow(1).getCell(cellvalue);
				cell.setCellValue(Data);
				fis.close();
				FileOutputStream fos = new FileOutputStream(src);
				wb.write(fos);
			    fos.close();
				wb.close();
				System.out.println("File upated Successfully");
			
		} catch (Exception e) {
			System.out.println("Exception Occured while writing File");
			e.printStackTrace();
		}
		return Data;
	}
	public String selectVisibleTextValueByXPath(String Value, String Text, String Caption) {
		try {
			CommonLogger.log("selectVisibleTextValueByXPath invoked");
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Value)));
		Select i = new Select(driver.findElement(By.xpath(Value)));
		i.selectByVisibleText(Text);
		ATUReports.add(Caption+" value selected", Text, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		} catch (Exception e) {
			CommonLogger.log("selectVisibleTextValueByXPath - click Failed in Exception Block");
			ATUReports.add(Caption+" select failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
			CommonLogger.errorLog(e);
		}
		return Value;
	}

public String verifyPartialTextByXpathBase(String Value, String data,String Caption) {
	try {
		CommonLogger.log("verifyTextByXpathBase invoked");
		scrollingToElementByXpath(Value);
		if (containsTextByXpath(Value, data)) {
			ATUReports.add(Caption+" Text verified ", "", data, getTextByXpath(Value), LogAs.PASSED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
		} else {
			ATUReports.add(Caption+" Text not verified", "", data, getTextByXpath(Value), LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
		}
		CommonLogger.log("verifyTextByXpathBase - Text Verifed");
	} catch (Exception e) {
		CommonLogger.log("verifyTextByXpathBase - Text Verification Failed in Exception Block");
		ATUReports.add(Caption+" Text verification failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
		CommonLogger.errorLog(e);
	}
	return Value;
}

public void SelectTomorrowDate(String CalImgLoc,String MonthLoc,String YearLoc) throws FileNotFoundException, IOException {
	System.out.println("Entered");
	try {
		//System.out.println("Entered");
		boolean success=false;
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(CalImgLoc)));
		driver.findElement(By.xpath(CalImgLoc)).click();
		
			Calendar newcalendar = Calendar.getInstance();
		
			DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date =new Date();
			int days=1;
			String currentDate = df.format(date.getTime()+ (days*86400000));
			//String currentDate = df.format(date.getTime());
			System.out.println(currentDate);
		
			String[] Split=currentDate.split("-");
			String Year= Split[0];
			String Mon=Split[1];
			String[] Split1=Split[2].split(" ");
			String Date= Split1[0];
			String MonText="";
			switch (Mon) {
			case "01":
				MonText= "January";
				break;

			case "02":
				MonText = "February";
				break;

			case "03":
				MonText = "March";
				break;
				
			case "04":
				MonText = "April";
				break;
				
			case "05":
				MonText = "May";
				break;
				
			case "06":
				MonText = "June";
				break;
				
			case "07":
				MonText = "July";
				break;
				
			case "08":
				MonText = "August";
				break;
				
			case "09":
				MonText = "September";
				break;
				
			case "10":
				MonText = "October";
				break;
				
			case "11":
				MonText = "November";
				break;
				
			case "12":
				MonText = "December";
				break;
			}
			
		System.out.println("Montext"+MonText);
			
		sleep(1000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(MonthLoc)));
		Select i = new Select(driver.findElement(By.xpath(MonthLoc)));
		i.selectByVisibleText(MonText);
		ATUReports.add(" Monnth Selected",  LogAs.PASSED, new CaptureScreen(
				ScreenshotOf.BROWSER_PAGE));
			/*selectVisibleTextValueByXPath(MonthLoc, MonText,"Month");*/
			///System.out.println(MonthLoc+MonText);
			sleep(1000);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(YearLoc)));
			Select n = new Select(driver.findElement(By.name(YearLoc)));
			n.selectByValue(Year);
			ATUReports.add(" Year Selected",  LogAs.PASSED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
			switch (Date) {
			case "01":
				Date = "1";
				break;

			case "02":
				Date = "2";
				break;

			case "03":
				Date = "3";
				break;
				
			case "04":
				Date = "4";
				break;
				
			case "05":
				Date = "5";
				break;
				
			case "06":
				Date = "6";
				break;
				
			case "07":
				Date = "7";
				break;
				
			case "08":
				Date = "8";
				break;
				
			case "09":
				Date = "9";
				break;
			
			}
			/*selectUsingValueByName(YearLoc, Year,Year);*/	
			///System.out.println(Year);
		//List<WebElement> element = driver.findElements(By.xpath(DDLoc));
		//int size = element.size();
		sleep(1000);
		//for (int i = 1 ; i <= size ; i++ ){
			/*List<WebElement> element1 = driver.findElements(By.xpath(DDLoc));
			int size1 = element1.size();
			for (int j = 1 ; j <= size1 ; j++ ){
			String dateText=driver.findElement(By.xpath(DDLoc + "[" + i + "]/td[" + j + "]")).getText().trim();
			if(dateText.equals(Split[0])){*/
				driver.findElement(By.xpath("//td[contains(text(),'"+Date+"')]")).click();
				ATUReports.add(" Date Selected",  LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
				success=true;
				
		
		if(success=false){
			ATUReports.add(" Date not selected", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
		}
		CommonLogger.log("Date Selected successfully");
	} catch (NoSuchElementException e) {
		CommonLogger.errorLog(e);
		ATUReports.add(" No such element present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
	} catch (WebDriverException e1) {
		CommonLogger.errorLog(e1);
		ATUReports.add(" Date selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
	}
}


public void SelectCurrentDay(String CalImgLoc,String MonthLoc,String YearLoc) throws FileNotFoundException, IOException {
	System.out.println("Entered");
	try {
		//System.out.println("Entered");
		boolean success=false;
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(CalImgLoc)));
		driver.findElement(By.xpath(CalImgLoc)).click();
		
			Calendar newcalendar = Calendar.getInstance();
		
			DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date =new Date();
			int days=1;
			//String currentDate = df.format(date.getTime()+ (days*86400000));
			String currentDate = df.format(date.getTime());
			System.out.println(currentDate);
		
			String[] Split=currentDate.split("-");
			String Year= Split[0];
			String Mon=Split[1];
			String[] Split1=Split[2].split(" ");
			String Date= Split1[0];
			String MonText="";
			switch (Mon) {
			case "01":
				MonText= "January";
				break;

			case "02":
				MonText = "February";
				break;

			case "03":
				MonText = "March";
				break;
				
			case "04":
				MonText = "April";
				break;
				
			case "05":
				MonText = "May";
				break;
				
			case "06":
				MonText = "June";
				break;
				
			case "07":
				MonText = "July";
				break;
				
			case "08":
				MonText = "August";
				break;
				
			case "09":
				MonText = "September";
				break;
				
			case "10":
				MonText = "October";
				break;
				
			case "11":
				MonText = "November";
				break;
				
			case "12":
				MonText = "December";
				break;
			}
			
		System.out.println("Montext"+MonText);
			
		sleep(1000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(MonthLoc)));
		Select i = new Select(driver.findElement(By.xpath(MonthLoc)));
		i.selectByVisibleText(MonText);
		ATUReports.add(" Monnth Selected",  LogAs.PASSED, new CaptureScreen(
				ScreenshotOf.BROWSER_PAGE));
			/*selectVisibleTextValueByXPath(MonthLoc, MonText,"Month");*/
			///System.out.println(MonthLoc+MonText);
			sleep(1000);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(YearLoc)));
			Select n = new Select(driver.findElement(By.name(YearLoc)));
			n.selectByValue(Year);
			ATUReports.add(" Year Selected",  LogAs.PASSED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
			switch (Date) {
			case "01":
				Date = "1";
				break;

			case "02":
				Date = "2";
				break;

			case "03":
				Date = "3";
				break;
				
			case "04":
				Date = "4";
				break;
				
			case "05":
				Date = "5";
				break;
				
			case "06":
				Date = "6";
				break;
				
			case "07":
				Date = "7";
				break;
				
			case "08":
				Date = "8";
				break;
				
			case "09":
				Date = "9";
				break;
			
			}
			/*selectUsingValueByName(YearLoc, Year,Year);*/	
			///System.out.println(Year);
		//List<WebElement> element = driver.findElements(By.xpath(DDLoc));
		//int size = element.size();
		sleep(1000);
		//for (int i = 1 ; i <= size ; i++ ){
			/*List<WebElement> element1 = driver.findElements(By.xpath(DDLoc));
			int size1 = element1.size();
			for (int j = 1 ; j <= size1 ; j++ ){
			String dateText=driver.findElement(By.xpath(DDLoc + "[" + i + "]/td[" + j + "]")).getText().trim();
			if(dateText.equals(Split[0])){*/
				driver.findElement(By.xpath("//td[contains(text(),'"+Date+"')]")).click();
				System.out.println("//td[contains(text(),'"+Date+"')]");
				ATUReports.add(" Date Selected",  LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
				success=true;
			
		
		if(success=false){
			ATUReports.add(" Date not selected", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
		}
		CommonLogger.log("Date Selected successfully");
	} catch (NoSuchElementException e) {
		CommonLogger.errorLog(e);
		ATUReports.add(" No such element present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
	} catch (WebDriverException e1) {
		CommonLogger.errorLog(e1);
		ATUReports.add(" Date selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
	}
}

public void SelectYesterdayDate(String CalImgLoc,String MonthLoc,String YearLoc) throws FileNotFoundException, IOException {
	System.out.println("Entered");
	try {
		//System.out.println("Entered");
		boolean success=false;
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(CalImgLoc)));
		driver.findElement(By.xpath(CalImgLoc)).click();
		
			Calendar newcalendar = Calendar.getInstance();
		
			DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date =new Date();
			int days=1;
			String currentDate = df.format(date.getTime()- (days*86400000));
			//String currentDate = df.format(date.getTime());
			System.out.println(currentDate);
		
			String[] Split=currentDate.split("-");
			String Year= Split[0];
			String Mon=Split[1];
			String[] Split1=Split[2].split(" ");
			String Date= Split1[0];
			String MonText="";
			switch (Mon) {
			case "01":
				MonText= "January";
				break;

			case "02":
				MonText = "February";
				break;

			case "03":
				MonText = "March";
				break;
				
			case "04":
				MonText = "April";
				break;
				
			case "05":
				MonText = "May";
				break;
				
			case "06":
				MonText = "June";
				break;
				
			case "07":
				MonText = "July";
				break;
				
			case "08":
				MonText = "August";
				break;
				
			case "09":
				MonText = "September";
				break;
				
			case "10":
				MonText = "October";
				break;
				
			case "11":
				MonText = "November";
				break;
				
			case "12":
				MonText = "December";
				break;
			}
			
		System.out.println("Montext"+MonText);
			
		sleep(1000);
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(MonthLoc)));
		Select i = new Select(driver.findElement(By.xpath(MonthLoc)));
		i.selectByVisibleText(MonText);
		ATUReports.add(" Monnth Selected",  LogAs.PASSED, new CaptureScreen(
				ScreenshotOf.BROWSER_PAGE));
			/*selectVisibleTextValueByXPath(MonthLoc, MonText,"Month");*/
			///System.out.println(MonthLoc+MonText);
			sleep(1000);
			wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(YearLoc)));
			Select n = new Select(driver.findElement(By.name(YearLoc)));
			n.selectByValue(Year);
			ATUReports.add(" Year Selected",  LogAs.PASSED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
			switch (Date) {
			case "01":
				Date = "1";
				break;

			case "02":
				Date = "2";
				break;

			case "03":
				Date = "3";
				break;
				
			case "04":
				Date = "4";
				break;
				
			case "05":
				Date = "5";
				break;
				
			case "06":
				Date = "6";
				break;
				
			case "07":
				Date = "7";
				break;
				
			case "08":
				Date = "8";
				break;
				
			case "09":
				Date = "9";
				break;
			
			}
			/*selectUsingValueByName(YearLoc, Year,Year);*/	
			///System.out.println(Year);
		//List<WebElement> element = driver.findElements(By.xpath(DDLoc));
		//int size = element.size();
		sleep(1000);
		//for (int i = 1 ; i <= size ; i++ ){
			/*List<WebElement> element1 = driver.findElements(By.xpath(DDLoc));
			int size1 = element1.size();
			for (int j = 1 ; j <= size1 ; j++ ){
			String dateText=driver.findElement(By.xpath(DDLoc + "[" + i + "]/td[" + j + "]")).getText().trim();
			if(dateText.equals(Split[0])){*/
				driver.findElement(By.xpath("//td[contains(text(),'"+Date+"')]")).click();
				ATUReports.add(" Date Selected",  LogAs.PASSED, new CaptureScreen(
						ScreenshotOf.BROWSER_PAGE));
				success=true;
				
		
		if(success=false){
			ATUReports.add(" Date not selected", LogAs.FAILED, new CaptureScreen(
					ScreenshotOf.BROWSER_PAGE));
		}
		CommonLogger.log("Date Selected successfully");
	} catch (NoSuchElementException e) {
		CommonLogger.errorLog(e);
		ATUReports.add(" No such element present", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
	} catch (WebDriverException e1) {
		CommonLogger.errorLog(e1);
		ATUReports.add(" Date selection failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
	}
}

public void verifyClickByXpath(String Xpath, String data) {
    try {
        WebDriverWait wait = new WebDriverWait(driver, 30);
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Xpath)));
        scrollingToElementByXpath(Xpath);
        String value = driver.findElement(By.xpath(Xpath)).getText().trim();
        sleep(2000);
        if (value.equals(data)) {
            driver.findElement(By.xpath(Xpath)).click();
            ATUReports.add(data + " clicked", data, LogAs.PASSED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
            CommonLogger.log("Button clicked Successfully");
        } else {
            ATUReports.add(data + " not clicked", data, LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
        }
    } catch (NoSuchElementException e) {
        CommonLogger.errorLog(e);
        ATUReports.add(data+" not Clickable", data, LogAs.FAILED, new CaptureScreen(
                ScreenshotOf.BROWSER_PAGE));
    } catch (WebDriverException e1) {
        CommonLogger.errorLog(e1);
        ATUReports.add(data+" Verify and Click failed", LogAs.FAILED, new CaptureScreen(ScreenshotOf.BROWSER_PAGE));
    }
}




}
Base
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
package com.fss.aut.ipay.pages;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;

import com.fss.aut.base.util.CommonLogger;

public class AdmCreateUser_Add extends com.fss.aut.base.util.BasePage {
	Properties prop;

	public AdmCreateUser_Add() {
		try {
			prop = loadObjectRepository("./properties\\AdmCreateUser_Add.properties");
		} catch (FileNotFoundException e) {

		} catch (IOException e) {
		}
	}
	
	public AdmCreateUser_Add enterOldAdminPasswordNew(String data) {
		try {
			enterTextByIdBase(prop.getProperty("ChangeAdminPasswordOld.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstitutionId(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstitution.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}  
//	public AdmCreateUser_Add enterOldAdminPasswordNew(String data) {
//		try {
//			enterTextByIdBase(prop.getProperty("CreateInstitution.Id"),data);
//		} catch (Exception e) {
//			CommonLogger.errorLog(e);
//		}
//		return this;
//	}  
	
	public AdmCreateUser_Add enterUserName(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateUserAdd.UserName.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	
	public AdmCreateUser_Add enterUserID(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateUserAdd.UserID.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add clickTabMenus(String data) {
		try {
			clickLinkByLinkText(data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterAcquirerId(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateAcquirerId.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add clickInstAddress(String data) {
		try {
			clickButtonByXpathNew(prop.getProperty("ClickInstAddress.Xpath"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterFiidBankShortName(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateFiidBankShort.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstAddressLine1(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstAddress1.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstAddressLine2(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstAddress2.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstAddressLine3(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstAddress3.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstCity(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstCity.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstState(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstState.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstCountry(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstCountry.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstZipCode(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstZipCode.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstContactName(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstContactName.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstContactNumber(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstContactNum.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstFaxNumber(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateFaxNumber.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	
	public AdmCreateUser_Add enterInstEmailId(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstEmail.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	
	public AdmCreateUser_Add enterInstTechNamme(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstTechName.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstTechConNum(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstTechContactNum.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstTechEmailId(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstTechEmailid.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterAdminNewPassWord(String data) {
		try {
			enterTextByIdBase(prop.getProperty("EnterAdminNewPassword.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}

	public AdmCreateUser_Add enterBrandType(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstBrandType.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}

	public AdmCreateUser_Add enterCurrencyCode(String data) {
		try {
			enterTextByIdBase(prop.getProperty("AdminCurrencyCode.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterFromBINNo(String data) {
		try {
			enterTextByIdBase(prop.getProperty("AdminFromBINNo.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterToBINNo(String data) {
		try {
			enterTextByIdBase(prop.getProperty("AdminToBINNo.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterEnterBrandName(String data) {
		try {
			enterTextByIdBase(prop.getProperty("AdminBINMasterBrandType.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterMerchantCatCode(String data) {
		try {
			enterTextByIdBase(prop.getProperty("AdminMerchantCategoryCode.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	
	public AdmCreateUser_Add enterThresholdDays(String data) {
		try {
			enterTextByIdBase(prop.getProperty("AdminMerchantCategoryCode.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterMerchantCatDescription(String data) {
		try {
			enterTextByIdBase(prop.getProperty("AdminMerchantCatDescription.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterBINDescription(String data) {
		try {
			enterTextByIdBase(prop.getProperty("AdminBINMasterDescription.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterCurrencyDescription(String data) {
		try {
			enterTextByIdBase(prop.getProperty("AdminCurrencyDescription.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterCurrencySymbol(String data) {
		try {
			enterTextByIdBase(prop.getProperty("AdminCurrencySymbol.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstBrandDescription(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstBrandDescription.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}

	public AdmCreateUser_Add enterAdminConfirmPassWord(String data) {
		try {
			enterTextByIdBase(prop.getProperty("EnterAdminConfirmPassword.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}



	public AdmCreateUser_Add enterNoUserAllowed(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstAllowedUser.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstKeyStorePass2(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstKeyPass2.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstKeyStorePass1(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstKeyPass.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstWebAddress(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstWebAddress.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstLogo(String data) {
		try {
			selectUploadFileWithSendKeysBase(prop.getProperty("CreateInstImageUpload.Xpath"),data,"Description");
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstBankName(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateBankName.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterInstDescription(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateInstitutionDescrip.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterDescription(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateUserAdd.Description.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterResendPassEmailId(String data) {
		try {
			enterTextByIdBase(prop.getProperty("ResendPasswordEmail.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	
	public AdmCreateUser_Add selectUserType(String data) {
		
	try {
		//selectUsingVisibleTextById(prop.getProperty("CreateUserAdd.UserType.Id"),data);
		//selectUsingVisibleTextByName(prop.getProperty("CreateUserAdd.UserType.Id"),data);
		selectUsingVisibleTextByXpathNew(prop.getProperty("CreateuserAdd.UserOption.Xpath"),prop.getProperty("CreateuserAdd.UserType.Xpath"),data,"Role");
	}catch (Exception e) {
		CommonLogger.errorLog(e);
	}
	
		return this;
	}


	
	public AdmCreateUser_Add selectInstitutionCode(String data) {
		try {
			selectUsingVisibleTextById(prop.getProperty("CreateUserAdd.UserRole.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add selectUserRole(String data) {
		try {
			//selectUsingVisibleTextById(prop.getProperty("CreateUserAdd.UserRole.Id"),data);
			selectUsingVisibleTextByXpathNew(prop.getProperty("CreateUserAdd.UserRoleOption.Xpath"),prop.getProperty("CreateUserAdd.UserRole.Xpath"),data,"Role");
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	
	public AdmCreateUser_Add enterEmailID(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateUserAdd.EmailID.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	
	public AdmCreateUser_Add enterMobileNumber(String data) {
		try {
			enterTextByIdBase(prop.getProperty("CreateUserAdd.MobileNumber.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	
	public AdmCreateUser_Add chooseWorkStartTimeHH(String data) {
		try {
			selectUsingVisibleTextByName(prop.getProperty("CreateUserAdd.WorkStartTimeHH.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	
	public AdmCreateUser_Add chooseWorkStartTimeMM(String data) {
		try {
			selectUsingVisibleTextByName(prop.getProperty("CreateUserAdd.WorkStartTimeMM.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	
	public AdmCreateUser_Add chooseWorkEndTimeHH(String data) {
		try {
			selectUsingVisibleTextByName(prop.getProperty("CreateUserAdd.WorkEndTimeHH.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	
	public AdmCreateUser_Add chooseWorkEndTimeMM(String data) {
		try {
			selectUsingVisibleTextByName(prop.getProperty("CreateUserAdd.WorkEndTimeMM.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	
	public AdmCreateUser_Add chooseEnableUserExpiry(String data) {
		try {
			selectRadioButtonXpathSelection(prop.getProperty("CreateUserAdd.EnableUserExpirySizeLabel.Xpath"),
					prop.getProperty("CreateUserAdd.EnableUserExpiryRadioBtn.Xpath"),
					prop.getProperty("CreateUserAdd.EnableUserExpiryClick.Xpath"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	
	public AdmCreateUser_Add chooseBlockUser(String data) {
		try {
			selectRadioButtonXpathSelectionNew(prop.getProperty("CreateUserAdd.BlockUserNew.Xpath"),
					prop.getProperty("CreateUserAdd.BlockUserSizeLabelNew.Xpath"),
					prop.getProperty("CreateuserAdd.BlockButtonClickNew.Xpath"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add chooseLockUser(String data) {
		try {
			selectRadioButtonXpathSelection(prop.getProperty("CreateUserAdd.LockUserSizeLabel.Xpath"),
					prop.getProperty("CreateUserAdd.LockUserRadioBtn.Xpath"),
					prop.getProperty("CreateUserAdd.BlockUserClick.Xpath"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public CreateUser_Result clickSaveByName(String data) {
		try {
			Thread.sleep(5000);
			clickButtonByNameAlert(prop.getProperty("CreateUserAdd.SaveBtn.Name"), data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return new CreateUser_Result();
	}
	public CreateUser_Result clickSaveChangePassByName(String data) {
		try {
			clickButtonByNameAlert(prop.getProperty("CreateChangePassword.Name"), data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return new CreateUser_Result();
	}
	public CreateUser_Result clickSaveCurrencyByName(String data) {
		try {
			clickButtonByNameAlert(prop.getProperty("AdminCurrencySave.Name"), data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return new CreateUser_Result();
	}
	public CreateUser_Result clickSaveBINMasterByName(String data) {
		try {
			clickButtonByNameAlert(prop.getProperty("AdminBINSave.Name"), data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return new CreateUser_Result();
	}
	public CreateUser_Result selectCheckBoxCard() {
		try {
			clickByName(prop.getProperty("AdminBINCardCheckBox.Name"));
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return new CreateUser_Result();
	}
	public AdmCreateUser_Add selectBINBrandType(String data) {
		
	try {
		//selectUsingVisibleTextById(prop.getProperty("CreateUserAdd.UserType.Id"),data);
		//selectUsingVisibleTextByName(prop.getProperty("CreateUserAdd.UserType.Id"),data);
		selectUsingVisibleTextByXpathNew(prop.getProperty("AdminBINCardBrandTypeOption.Xpath"),prop.getProperty("AdminBINCardBrandType.Xpath"),data,"BrandType");
	}catch (Exception e) {
		CommonLogger.errorLog(e);
	}
	
		return new AdmCreateUser_Add();
	}


	public CreateUser_Result clickResendPassSearch(String data) {
		try {
			clickButtonByNameAlert(prop.getProperty("ResendPasswordSearchClick.Name"), data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return new CreateUser_Result();
	}

	public CreateUser_Result clickCancelPassword(String data) {
		try {
			clickButtonByNameAlert(prop.getProperty("CancelChangePassword.Name"), data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return new CreateUser_Result();
	}
	public CreateUser_Result clickCancelBrandType(String data) {
		try {
			clickButtonByNameAlert(prop.getProperty("CancelBrandType.Name"), data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return new CreateUser_Result();
	}

	
	public AdmCreateUser_Add enterBatchDownload(String data) {
		try {
			enterTextByIdBase(prop.getProperty("AdminMerchantCategoryCode.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}

	public AdmCreateUser_Add enterBatchUpload(String data) {
		try {
			enterTextByIdBase(prop.getProperty("AdminMerchantCategoryCode.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterBatchArchive(String data) {
		try {
			enterTextByIdBase(prop.getProperty("AdminMerchantCategoryCode.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}
	public AdmCreateUser_Add enterDeclinedCardMaximum(String data) {
		try {
			enterTextByIdBase(prop.getProperty("AdminMerchantCategoryCode.Id"),data);
		} catch (Exception e) {
			CommonLogger.errorLog(e);
		}
		return this;
	}


	


	
	
	
}
Java Class
//////////////////////////////////////////////
package com.fss.aut.base.wrap;

 

import java.io.File;

 

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;

 

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

 

public class DataInputProvider {

 

    static String a,b;

 


    public Properties loadObjectRepository(String FileName) throws FileNotFoundException, IOException {
        // Step 1: Instantiate Properties (java.util)
        Properties p = new Properties();
        // Step 2: Load the Property file
        p.load(new FileInputStream(new File(FileName)));

        return p;
    }

 

public static String getDataFromExcel(String FileName, String SheetName, int rowNo, int colNo) throws IOException {
    //String Temp="D:\\Sreeram\\Automation\\Merchant\\JSON\\Input\\JSON_Param\\";
    //FileName=Temp+FileName;
    String cellValue = null;
    // Select the particular excel file
    FileInputStream fis = new FileInputStream(new File(FileName));
    // Select the particular workbook
    HSSFWorkbook workbook = new HSSFWorkbook(fis);
    // Select the sheet in that workbook
    HSSFSheet sheet = workbook.getSheet(SheetName);
    try {
        HSSFRow row = sheet.getRow(rowNo - 1); // Select the particular row
        cellValue = row.getCell(colNo - 1).getStringCellValue();
    } catch (Exception e) {
        e.printStackTrace();
    }
    // Close the excel sheet
    workbook.close();
    fis.close();
    return cellValue;
}
public static String getDataFromExcelNew(String FileName, String SheetName, int rowNo, int colNo) throws IOException {

    int r=rowcount(FileName,SheetName);

    //String Temp="D:\\Sreeram\\Automation\\Merchant\\JSON\\Input\\JSON_Param\\";
    //FileName=Temp+FileName;
    String cellValue = null;
    // Select the particular excel file
    FileInputStream fis = new FileInputStream(new File(FileName));
    // Select the particular workbook
    HSSFWorkbook workbook = new HSSFWorkbook(fis);
    // Select the sheet in that workbook
    HSSFSheet sheet = workbook.getSheet(SheetName);
    try {for(int i=2;i<=r;i++) {
        HSSFRow row = sheet.getRow(i - 1); // Select the particular row
        cellValue = row.getCell(colNo - 1).getStringCellValue();
    }} catch (Exception e) {
        e.printStackTrace();
    }
    // Close the excel sheet
    workbook.close();
    fis.close();
    return cellValue;
}

 

public static int getDataFromExcelInteger(String FileName, String SheetName, int rowNo, int colNo) throws IOException {
    //String Temp="D:\\Sreeram\\Automation\\Merchant\\JSON\\Input\\JSON_Param\\";
    //FileName=Temp+FileName;
    String cellValue = null;
    int t=0;
    // Select the particular excel file
    FileInputStream fis = new FileInputStream(new File(FileName));
    // Select the particular workbook
    HSSFWorkbook workbook = new HSSFWorkbook(fis);
    // Select the sheet in that workbook
    HSSFSheet sheet = workbook.getSheet(SheetName);
    try {
        HSSFRow row = sheet.getRow(rowNo - 1); // Select the particular row
        cellValue = row.getCell(colNo - 1).getStringCellValue();
         t=Integer.parseInt(cellValue);
    } catch (Exception e) {
        e.printStackTrace();
    }
    // Close the excel sheet
    workbook.close();
    fis.close();
    return t;
}
public static String IncrementAlapthabet(String input) throws IOException {
    String value = input;
    String next="";
    int charValue = value.charAt(value.length()-1);
    next = String.valueOf( (char) (charValue + 1));
    next=value+next;

    System.out.println("Alpabet Incremented=="+next);



    return next;
}
public static String IncrementNumber(String input) throws IOException {
    long t=Long.parseLong(input);
    t=t+1;
    input=String.valueOf(t);

    System.out.println("NumberIncremented=="+input);
    return input;

}

 


public static String WritetoExcel(String FileName, String SheetName, int rowNo, int colNo,String Data) throws IOException {

    FileInputStream fis = new FileInputStream(new File(FileName));
    HSSFWorkbook workBook = new HSSFWorkbook(fis);

    // Create sheet
    HSSFSheet sheet = workBook.getSheet(SheetName);
 
    // Create cell

    try {
        HSSFRow row = sheet.getRow(rowNo - 1); // Select the particular row
        HSSFCell cell = row.getCell(colNo - 1);
        cell.setCellValue(Data);
    } catch (Exception e) {
        e.printStackTrace();
    }

    FileOutputStream fos = new FileOutputStream(new File(FileName));

 

    workBook.write(fos);

 

    fos.close();

 

    //workBook.close();
    return Data;
}

 

public static int rowcount(String FileName, String Sheet) throws IOException {
    FileInputStream fis = new FileInputStream(new File(FileName));
    HSSFWorkbook workbook = new HSSFWorkbook(fis);
    int sheet_no = workbook.getSheetIndex(Sheet);
    HSSFSheet sheet = workbook.getSheetAt(sheet_no);
    int rowCount = sheet.getLastRowNum();
    workbook.close();
    fis.close();
    return rowCount;
}

 

public static int ColumnCount(String FileName, String Sheet) throws IOException {
    FileInputStream fis = new FileInputStream(new File(FileName));
    HSSFWorkbook workbook = new HSSFWorkbook(fis);
    int sheet_no = workbook.getSheetIndex(Sheet);
    System.out.println("sheet number"+sheet_no);
    HSSFSheet sheet = workbook.getSheetAt(sheet_no);


    Object row = sheet.getRow(0); 

    int colCount = ((HSSFRow) row).getLastCellNum(); 
    workbook.close();
    fis.close();
    return colCount;
}
public static String[][] getSheet(String FileName,String SheetName ) {

    String[][] data = null;

    try {
        FileInputStream fis = new FileInputStream(new File("./data/"+FileName+".xls"));
        HSSFWorkbook workbook = new HSSFWorkbook(fis);

        HSSFSheet sheet = workbook.getSheet(SheetName);    

        
        // get the number of rows
        int rowCount = sheet.getLastRowNum();

        // get the number of columns
        int columnCount = sheet.getRow(0).getLastCellNum();
        data = new String[rowCount][columnCount];

        // loop through the rows
        for(int i=1; i <rowCount+1; i++){
            try {
                HSSFRow row = sheet.getRow(i);
                for(int j=0; j <columnCount; j++){ // loop through the columns
                    try {
                        String cellValue = "";
                        try{
                            cellValue = row.getCell(j).getStringCellValue();
                        }catch(NullPointerException e){

                        }

                        data[i-1][j]  = cellValue; // add to the data array
                    } catch (Exception e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }                
                }
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
        workbook.close();
        fis.close();

 

    } catch (Exception e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }

 

    return data;

 

}

 

}
dataProvider
/////////////////////////////////////////////////////////////////////////////

